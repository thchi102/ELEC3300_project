
ELEC3300_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003254  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000778  08003438  08003438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bb0  08003bb0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08003bb0  08003bb0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bb0  08003bb0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bb4  08003bb4  00013bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000084  08003c3c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08003c3c  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a735  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e89  00000000  00000000  0002a7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  0002c670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  0002cf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c56  00000000  00000000  0002d7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1f4  00000000  00000000  00047446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093ecb  00000000  00000000  0005263a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6505  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d8  00000000  00000000  000e6558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000084 	.word	0x20000084
 8000200:	00000000 	.word	0x00000000
 8000204:	08003420 	.word	0x08003420

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000088 	.word	0x20000088
 8000220:	08003420 	.word	0x08003420

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <sizeofuser>:
userDetails user[maxnumberofusers];

int usernumber = 0;

int sizeofuser (userDetails *user)
{
 8000248:	b480      	push	{r7}
 800024a:	b085      	sub	sp, #20
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
	int size=0;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
	while (user[size].firstname[0] != '\0') size++;
 8000254:	e002      	b.n	800025c <sizeofuser+0x14>
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	3301      	adds	r3, #1
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	68fa      	ldr	r2, [r7, #12]
 800025e:	4613      	mov	r3, r2
 8000260:	015b      	lsls	r3, r3, #5
 8000262:	4413      	add	r3, r2
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	4413      	add	r3, r2
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d1f3      	bne.n	8000256 <sizeofuser+0xe>
	return size+1;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	3301      	adds	r3, #1
}
 8000272:	4618      	mov	r0, r3
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr

0800027c <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD, char *STAIP)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b098      	sub	sp, #96	; 0x60
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	607a      	str	r2, [r7, #4]
	char data[80];

	Ringbuf_init();
 8000288:	f000 fa86 	bl	8000798 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 800028c:	4832      	ldr	r0, [pc, #200]	; (8000358 <ESP_Init+0xdc>)
 800028e:	f000 fb87 	bl	80009a0 <Uart_sendstring>
	HAL_Delay(2000);
 8000292:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000296:	f001 fb19 	bl	80018cc <HAL_Delay>

	/********* AT **********/
	Uart_flush();
 800029a:	f000 fc37 	bl	8000b0c <Uart_flush>
	Uart_sendstring("AT\r\n");
 800029e:	482f      	ldr	r0, [pc, #188]	; (800035c <ESP_Init+0xe0>)
 80002a0:	f000 fb7e 	bl	80009a0 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 80002a4:	bf00      	nop
 80002a6:	482e      	ldr	r0, [pc, #184]	; (8000360 <ESP_Init+0xe4>)
 80002a8:	f000 fcfc 	bl	8000ca4 <Wait_for>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f9      	beq.n	80002a6 <ESP_Init+0x2a>


	/********* AT+CWMODE=1 **********/
	Uart_flush();
 80002b2:	f000 fc2b 	bl	8000b0c <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n");
 80002b6:	482b      	ldr	r0, [pc, #172]	; (8000364 <ESP_Init+0xe8>)
 80002b8:	f000 fb72 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80002bc:	bf00      	nop
 80002be:	4828      	ldr	r0, [pc, #160]	; (8000360 <ESP_Init+0xe4>)
 80002c0:	f000 fcf0 	bl	8000ca4 <Wait_for>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f9      	beq.n	80002be <ESP_Init+0x42>

	/* Set Static IP Address */
	/********* AT+CWSTAIP=IPADDRESS **********/
	Uart_flush();
 80002ca:	f000 fc1f 	bl	8000b0c <Uart_flush>
	sprintf (data, "AT+CIPSTA=\"%s\"\r\n", STAIP);
 80002ce:	f107 0310 	add.w	r3, r7, #16
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	4924      	ldr	r1, [pc, #144]	; (8000368 <ESP_Init+0xec>)
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fc1a 	bl	8002b10 <siprintf>
	Uart_sendstring(data);
 80002dc:	f107 0310 	add.w	r3, r7, #16
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fb5d 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80002e6:	bf00      	nop
 80002e8:	481d      	ldr	r0, [pc, #116]	; (8000360 <ESP_Init+0xe4>)
 80002ea:	f000 fcdb 	bl	8000ca4 <Wait_for>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f9      	beq.n	80002e8 <ESP_Init+0x6c>

	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_flush();
 80002f4:	f000 fc0a 	bl	8000b0c <Uart_flush>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80002f8:	f107 0010 	add.w	r0, r7, #16
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	68fa      	ldr	r2, [r7, #12]
 8000300:	491a      	ldr	r1, [pc, #104]	; (800036c <ESP_Init+0xf0>)
 8000302:	f002 fc05 	bl	8002b10 <siprintf>
	Uart_sendstring(data);
 8000306:	f107 0310 	add.w	r3, r7, #16
 800030a:	4618      	mov	r0, r3
 800030c:	f000 fb48 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000310:	bf00      	nop
 8000312:	4813      	ldr	r0, [pc, #76]	; (8000360 <ESP_Init+0xe4>)
 8000314:	f000 fcc6 	bl	8000ca4 <Wait_for>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d0f9      	beq.n	8000312 <ESP_Init+0x96>

	/********* AT+CIPMUX **********/
	Uart_flush();
 800031e:	f000 fbf5 	bl	8000b0c <Uart_flush>
	Uart_sendstring("AT+CIPMUX=1\r\n");
 8000322:	4813      	ldr	r0, [pc, #76]	; (8000370 <ESP_Init+0xf4>)
 8000324:	f000 fb3c 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000328:	bf00      	nop
 800032a:	480d      	ldr	r0, [pc, #52]	; (8000360 <ESP_Init+0xe4>)
 800032c:	f000 fcba 	bl	8000ca4 <Wait_for>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d0f9      	beq.n	800032a <ESP_Init+0xae>

	/********* AT+CIPSERVER **********/
	Uart_flush();
 8000336:	f000 fbe9 	bl	8000b0c <Uart_flush>
	Uart_sendstring("AT+CIPSERVER=1,80\r\n");
 800033a:	480e      	ldr	r0, [pc, #56]	; (8000374 <ESP_Init+0xf8>)
 800033c:	f000 fb30 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000340:	bf00      	nop
 8000342:	4807      	ldr	r0, [pc, #28]	; (8000360 <ESP_Init+0xe4>)
 8000344:	f000 fcae 	bl	8000ca4 <Wait_for>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d0f9      	beq.n	8000342 <ESP_Init+0xc6>

}
 800034e:	bf00      	nop
 8000350:	bf00      	nop
 8000352:	3760      	adds	r7, #96	; 0x60
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	080039e4 	.word	0x080039e4
 800035c:	080039f0 	.word	0x080039f0
 8000360:	080039f8 	.word	0x080039f8
 8000364:	08003a00 	.word	0x08003a00
 8000368:	08003a10 	.word	0x08003a10
 800036c:	08003a24 	.word	0x08003a24
 8000370:	08003a3c 	.word	0x08003a3c
 8000374:	08003a4c 	.word	0x08003a4c

08000378 <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b098      	sub	sp, #96	; 0x60
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f7ff ff58 	bl	8000238 <strlen>
 8000388:	4603      	mov	r3, r0
 800038a:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	Uart_flush();
 800038c:	f000 fbbe 	bl	8000b0c <Uart_flush>
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 8000390:	f107 000c 	add.w	r0, r7, #12
 8000394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	4919      	ldr	r1, [pc, #100]	; (8000400 <Server_Send+0x88>)
 800039a:	f002 fbb9 	bl	8002b10 <siprintf>
	Uart_sendstring(data);
 800039e:	f107 030c 	add.w	r3, r7, #12
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 fafc 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for(">")));
 80003a8:	bf00      	nop
 80003aa:	4816      	ldr	r0, [pc, #88]	; (8000404 <Server_Send+0x8c>)
 80003ac:	f000 fc7a 	bl	8000ca4 <Wait_for>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0f9      	beq.n	80003aa <Server_Send+0x32>
	Uart_sendstring (str);
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f000 faf2 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("SEND OK")));
 80003bc:	bf00      	nop
 80003be:	4812      	ldr	r0, [pc, #72]	; (8000408 <Server_Send+0x90>)
 80003c0:	f000 fc70 	bl	8000ca4 <Wait_for>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f9      	beq.n	80003be <Server_Send+0x46>
	Uart_flush();
 80003ca:	f000 fb9f 	bl	8000b0c <Uart_flush>
	sprintf (data, "AT+CIPCLOSE=%d\r\n",Link_ID);
 80003ce:	f107 030c 	add.w	r3, r7, #12
 80003d2:	683a      	ldr	r2, [r7, #0]
 80003d4:	490d      	ldr	r1, [pc, #52]	; (800040c <Server_Send+0x94>)
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 fb9a 	bl	8002b10 <siprintf>
	Uart_sendstring(data);
 80003dc:	f107 030c 	add.w	r3, r7, #12
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fadd 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80003e6:	bf00      	nop
 80003e8:	4809      	ldr	r0, [pc, #36]	; (8000410 <Server_Send+0x98>)
 80003ea:	f000 fc5b 	bl	8000ca4 <Wait_for>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d0f9      	beq.n	80003e8 <Server_Send+0x70>
	return 1;
 80003f4:	2301      	movs	r3, #1
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3760      	adds	r7, #96	; 0x60
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	08003a60 	.word	0x08003a60
 8000404:	08003a74 	.word	0x08003a74
 8000408:	08003a78 	.word	0x08003a78
 800040c:	08003a80 	.word	0x08003a80
 8000410:	080039f8 	.word	0x080039f8

08000414 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	f5ad 5dc0 	sub.w	sp, sp, #6144	; 0x1800
 800041a:	b087      	sub	sp, #28
 800041c:	af02      	add	r7, sp, #8
 800041e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000422:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8000426:	6018      	str	r0, [r3, #0]
 8000428:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800042c:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8000430:	6019      	str	r1, [r3, #0]
	char datatosend[4096] = {0};
 8000432:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000436:	2200      	movs	r2, #0
 8000438:	f843 2c08 	str.w	r2, [r3, #-8]
 800043c:	3b04      	subs	r3, #4
 800043e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000442:	2100      	movs	r1, #0
 8000444:	4618      	mov	r0, r3
 8000446:	f002 fb5b 	bl	8002b00 <memset>
	if (!(strcmp (str, "/page1")))
 800044a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800044e:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8000452:	496c      	ldr	r1, [pc, #432]	; (8000604 <Server_Handle+0x1f0>)
 8000454:	6818      	ldr	r0, [r3, #0]
 8000456:	f7ff fee5 	bl	8000224 <strcmp>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d114      	bne.n	800048a <Server_Handle+0x76>
	{
		sprintf(datatosend, page1);
 8000460:	4b69      	ldr	r3, [pc, #420]	; (8000608 <Server_Handle+0x1f4>)
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000468:	3b08      	subs	r3, #8
 800046a:	4611      	mov	r1, r2
 800046c:	4618      	mov	r0, r3
 800046e:	f002 fb4f 	bl	8002b10 <siprintf>
		Server_Send(datatosend, Link_ID);
 8000472:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000476:	f5a3 6201 	sub.w	r2, r3, #2064	; 0x810
 800047a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800047e:	3b08      	subs	r3, #8
 8000480:	6811      	ldr	r1, [r2, #0]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ff78 	bl	8000378 <Server_Send>
	{
		sprintf (datatosend, home);
		Server_Send(datatosend, Link_ID);
	}

}
 8000488:	e0b5      	b.n	80005f6 <Server_Handle+0x1e2>
	else if (!(strcmp (str, "/page2")))
 800048a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800048e:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8000492:	495e      	ldr	r1, [pc, #376]	; (800060c <Server_Handle+0x1f8>)
 8000494:	6818      	ldr	r0, [r3, #0]
 8000496:	f7ff fec5 	bl	8000224 <strcmp>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	f040 8096 	bne.w	80005ce <Server_Handle+0x1ba>
		sprintf(datatosend, page2_Top);
 80004a2:	4b5b      	ldr	r3, [pc, #364]	; (8000610 <Server_Handle+0x1fc>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80004aa:	3b08      	subs	r3, #8
 80004ac:	4611      	mov	r1, r2
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 fb2e 	bl	8002b10 <siprintf>
		strcat (datatosend, table);
 80004b4:	4b57      	ldr	r3, [pc, #348]	; (8000614 <Server_Handle+0x200>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80004bc:	3b08      	subs	r3, #8
 80004be:	4611      	mov	r1, r2
 80004c0:	4618      	mov	r0, r3
 80004c2:	f002 fb45 	bl	8002b50 <strcat>
		int bufsize = (sizeofuser (user));
 80004c6:	4854      	ldr	r0, [pc, #336]	; (8000618 <Server_Handle+0x204>)
 80004c8:	f7ff febe 	bl	8000248 <sizeofuser>
 80004cc:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80004d0:	f103 0308 	add.w	r3, r3, #8
 80004d4:	6018      	str	r0, [r3, #0]
		for (int i=0; i<bufsize; i++)
 80004d6:	2300      	movs	r3, #0
 80004d8:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80004dc:	f102 020c 	add.w	r2, r2, #12
 80004e0:	6013      	str	r3, [r2, #0]
 80004e2:	e03f      	b.n	8000564 <Server_Handle+0x150>
			sprintf (localbuf, "<tr><td>%s %s</td>	<td>%s</td></tr>",user[i].firstname,user[i].lastname,user[i].age);
 80004e4:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80004e8:	f103 030c 	add.w	r3, r3, #12
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	4613      	mov	r3, r2
 80004f0:	015b      	lsls	r3, r3, #5
 80004f2:	4413      	add	r3, r2
 80004f4:	4a48      	ldr	r2, [pc, #288]	; (8000618 <Server_Handle+0x204>)
 80004f6:	1899      	adds	r1, r3, r2
 80004f8:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80004fc:	f103 030c 	add.w	r3, r3, #12
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	4613      	mov	r3, r2
 8000504:	015b      	lsls	r3, r3, #5
 8000506:	4413      	add	r3, r2
 8000508:	3308      	adds	r3, #8
 800050a:	4a43      	ldr	r2, [pc, #268]	; (8000618 <Server_Handle+0x204>)
 800050c:	4413      	add	r3, r2
 800050e:	1ddc      	adds	r4, r3, #7
 8000510:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8000514:	f103 030c 	add.w	r3, r3, #12
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	4613      	mov	r3, r2
 800051c:	015b      	lsls	r3, r3, #5
 800051e:	4413      	add	r3, r2
 8000520:	3318      	adds	r3, #24
 8000522:	4a3d      	ldr	r2, [pc, #244]	; (8000618 <Server_Handle+0x204>)
 8000524:	4413      	add	r3, r2
 8000526:	3306      	adds	r3, #6
 8000528:	f107 0010 	add.w	r0, r7, #16
 800052c:	3808      	subs	r0, #8
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	4623      	mov	r3, r4
 8000532:	460a      	mov	r2, r1
 8000534:	4939      	ldr	r1, [pc, #228]	; (800061c <Server_Handle+0x208>)
 8000536:	f002 faeb 	bl	8002b10 <siprintf>
			strcat (datatosend, localbuf);
 800053a:	f107 0210 	add.w	r2, r7, #16
 800053e:	3a08      	subs	r2, #8
 8000540:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000544:	3b08      	subs	r3, #8
 8000546:	4611      	mov	r1, r2
 8000548:	4618      	mov	r0, r3
 800054a:	f002 fb01 	bl	8002b50 <strcat>
		for (int i=0; i<bufsize; i++)
 800054e:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8000552:	f103 030c 	add.w	r3, r3, #12
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	3301      	adds	r3, #1
 800055a:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 800055e:	f102 020c 	add.w	r2, r2, #12
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8000568:	f103 030c 	add.w	r3, r3, #12
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8000572:	f103 0308 	add.w	r3, r3, #8
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	429a      	cmp	r2, r3
 800057a:	dbb3      	blt.n	80004e4 <Server_Handle+0xd0>
		strcat (datatosend, "</table>");
 800057c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000580:	3b08      	subs	r3, #8
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fe58 	bl	8000238 <strlen>
 8000588:	4603      	mov	r3, r0
 800058a:	461a      	mov	r2, r3
 800058c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000590:	3b08      	subs	r3, #8
 8000592:	4413      	add	r3, r2
 8000594:	4922      	ldr	r1, [pc, #136]	; (8000620 <Server_Handle+0x20c>)
 8000596:	461a      	mov	r2, r3
 8000598:	460b      	mov	r3, r1
 800059a:	cb03      	ldmia	r3!, {r0, r1}
 800059c:	6010      	str	r0, [r2, #0]
 800059e:	6051      	str	r1, [r2, #4]
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	7213      	strb	r3, [r2, #8]
		strcat(datatosend, page2_end);
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <Server_Handle+0x210>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80005ac:	3b08      	subs	r3, #8
 80005ae:	4611      	mov	r1, r2
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 facd 	bl	8002b50 <strcat>
		Server_Send(datatosend, Link_ID);
 80005b6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80005ba:	f5a3 6201 	sub.w	r2, r3, #2064	; 0x810
 80005be:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80005c2:	3b08      	subs	r3, #8
 80005c4:	6811      	ldr	r1, [r2, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fed6 	bl	8000378 <Server_Send>
}
 80005cc:	e013      	b.n	80005f6 <Server_Handle+0x1e2>
		sprintf (datatosend, home);
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <Server_Handle+0x214>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80005d6:	3b08      	subs	r3, #8
 80005d8:	4611      	mov	r1, r2
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fa98 	bl	8002b10 <siprintf>
		Server_Send(datatosend, Link_ID);
 80005e0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80005e4:	f5a3 6201 	sub.w	r2, r3, #2064	; 0x810
 80005e8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80005ec:	3b08      	subs	r3, #8
 80005ee:	6811      	ldr	r1, [r2, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fec1 	bl	8000378 <Server_Send>
}
 80005f6:	bf00      	nop
 80005f8:	f507 57c0 	add.w	r7, r7, #6144	; 0x1800
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd90      	pop	{r4, r7, pc}
 8000602:	bf00      	nop
 8000604:	08003a94 	.word	0x08003a94
 8000608:	20000004 	.word	0x20000004
 800060c:	08003a9c 	.word	0x08003a9c
 8000610:	20000008 	.word	0x20000008
 8000614:	20000010 	.word	0x20000010
 8000618:	200000a0 	.word	0x200000a0
 800061c:	08003aa4 	.word	0x08003aa4
 8000620:	08003ac8 	.word	0x08003ac8
 8000624:	2000000c 	.word	0x2000000c
 8000628:	20000000 	.word	0x20000000

0800062c <Server_Start>:

void Server_Start (void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b0a2      	sub	sp, #136	; 0x88
 8000630:	af00      	add	r7, sp, #0
	char buftostoreheader[128] = {0};
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	227c      	movs	r2, #124	; 0x7c
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fa5e 	bl	8002b00 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID)));
 8000644:	bf00      	nop
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	461a      	mov	r2, r3
 800064a:	2101      	movs	r1, #1
 800064c:	4844      	ldr	r0, [pc, #272]	; (8000760 <Server_Start+0x134>)
 800064e:	f000 fafd 	bl	8000c4c <Get_after>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0f6      	beq.n	8000646 <Server_Start+0x1a>

	Link_ID -= 48;
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	3b30      	subs	r3, #48	; 0x30
 800065c:	b2db      	uxtb	r3, r3
 800065e:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftostoreheader)));
 8000660:	bf00      	nop
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	4619      	mov	r1, r3
 8000668:	483e      	ldr	r0, [pc, #248]	; (8000764 <Server_Start+0x138>)
 800066a:	f000 fa7b 	bl	8000b64 <Copy_upto>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0f6      	beq.n	8000662 <Server_Start+0x36>
	if (Look_for("/page1", buftostoreheader) == 1)
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	4619      	mov	r1, r3
 800067a:	483b      	ldr	r0, [pc, #236]	; (8000768 <Server_Start+0x13c>)
 800067c:	f000 f8d0 	bl	8000820 <Look_for>
 8000680:	4603      	mov	r3, r0
 8000682:	2b01      	cmp	r3, #1
 8000684:	d13c      	bne.n	8000700 <Server_Start+0xd4>
	{
		GetDataFromBuffer("fname=", "&", buftostoreheader, user[usernumber].firstname);
 8000686:	4b39      	ldr	r3, [pc, #228]	; (800076c <Server_Start+0x140>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	4613      	mov	r3, r2
 800068c:	015b      	lsls	r3, r3, #5
 800068e:	4413      	add	r3, r2
 8000690:	4a37      	ldr	r2, [pc, #220]	; (8000770 <Server_Start+0x144>)
 8000692:	4413      	add	r3, r2
 8000694:	f107 0208 	add.w	r2, r7, #8
 8000698:	4936      	ldr	r1, [pc, #216]	; (8000774 <Server_Start+0x148>)
 800069a:	4837      	ldr	r0, [pc, #220]	; (8000778 <Server_Start+0x14c>)
 800069c:	f000 f995 	bl	80009ca <GetDataFromBuffer>
		GetDataFromBuffer("lname=", "&", buftostoreheader, user[usernumber].lastname);
 80006a0:	4b32      	ldr	r3, [pc, #200]	; (800076c <Server_Start+0x140>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4613      	mov	r3, r2
 80006a6:	015b      	lsls	r3, r3, #5
 80006a8:	4413      	add	r3, r2
 80006aa:	3308      	adds	r3, #8
 80006ac:	4a30      	ldr	r2, [pc, #192]	; (8000770 <Server_Start+0x144>)
 80006ae:	4413      	add	r3, r2
 80006b0:	3307      	adds	r3, #7
 80006b2:	f107 0208 	add.w	r2, r7, #8
 80006b6:	492f      	ldr	r1, [pc, #188]	; (8000774 <Server_Start+0x148>)
 80006b8:	4830      	ldr	r0, [pc, #192]	; (800077c <Server_Start+0x150>)
 80006ba:	f000 f986 	bl	80009ca <GetDataFromBuffer>
		GetDataFromBuffer("age=", " HTTP", buftostoreheader, user[usernumber].age);
 80006be:	4b2b      	ldr	r3, [pc, #172]	; (800076c <Server_Start+0x140>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4613      	mov	r3, r2
 80006c4:	015b      	lsls	r3, r3, #5
 80006c6:	4413      	add	r3, r2
 80006c8:	3318      	adds	r3, #24
 80006ca:	4a29      	ldr	r2, [pc, #164]	; (8000770 <Server_Start+0x144>)
 80006cc:	4413      	add	r3, r2
 80006ce:	3306      	adds	r3, #6
 80006d0:	f107 0208 	add.w	r2, r7, #8
 80006d4:	492a      	ldr	r1, [pc, #168]	; (8000780 <Server_Start+0x154>)
 80006d6:	482b      	ldr	r0, [pc, #172]	; (8000784 <Server_Start+0x158>)
 80006d8:	f000 f977 	bl	80009ca <GetDataFromBuffer>
		usernumber++;
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <Server_Start+0x140>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4a22      	ldr	r2, [pc, #136]	; (800076c <Server_Start+0x140>)
 80006e4:	6013      	str	r3, [r2, #0]
		if (usernumber >9) usernumber = 0;
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <Server_Start+0x140>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b09      	cmp	r3, #9
 80006ec:	dd02      	ble.n	80006f4 <Server_Start+0xc8>
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <Server_Start+0x140>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
		Server_Handle("/page1",Link_ID);
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	4619      	mov	r1, r3
 80006f8:	481b      	ldr	r0, [pc, #108]	; (8000768 <Server_Start+0x13c>)
 80006fa:	f7ff fe8b 	bl	8000414 <Server_Handle>

	else
	{
		Server_Handle("/ ", Link_ID);
	}
}
 80006fe:	e02b      	b.n	8000758 <Server_Start+0x12c>
	else if (Look_for("/page2", buftostoreheader) == 1)
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	4619      	mov	r1, r3
 8000706:	4820      	ldr	r0, [pc, #128]	; (8000788 <Server_Start+0x15c>)
 8000708:	f000 f88a 	bl	8000820 <Look_for>
 800070c:	4603      	mov	r3, r0
 800070e:	2b01      	cmp	r3, #1
 8000710:	d105      	bne.n	800071e <Server_Start+0xf2>
		Server_Handle("/page2",Link_ID);
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4619      	mov	r1, r3
 8000716:	481c      	ldr	r0, [pc, #112]	; (8000788 <Server_Start+0x15c>)
 8000718:	f7ff fe7c 	bl	8000414 <Server_Handle>
}
 800071c:	e01c      	b.n	8000758 <Server_Start+0x12c>
	else if (Look_for("/home", buftostoreheader) == 1)
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	4619      	mov	r1, r3
 8000724:	4819      	ldr	r0, [pc, #100]	; (800078c <Server_Start+0x160>)
 8000726:	f000 f87b 	bl	8000820 <Look_for>
 800072a:	4603      	mov	r3, r0
 800072c:	2b01      	cmp	r3, #1
 800072e:	d105      	bne.n	800073c <Server_Start+0x110>
		Server_Handle("/home",Link_ID);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	4619      	mov	r1, r3
 8000734:	4815      	ldr	r0, [pc, #84]	; (800078c <Server_Start+0x160>)
 8000736:	f7ff fe6d 	bl	8000414 <Server_Handle>
}
 800073a:	e00d      	b.n	8000758 <Server_Start+0x12c>
	else if (Look_for("/favicon.ico", buftostoreheader) == 1);
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	4619      	mov	r1, r3
 8000742:	4813      	ldr	r0, [pc, #76]	; (8000790 <Server_Start+0x164>)
 8000744:	f000 f86c 	bl	8000820 <Look_for>
 8000748:	4603      	mov	r3, r0
 800074a:	2b01      	cmp	r3, #1
 800074c:	d004      	beq.n	8000758 <Server_Start+0x12c>
		Server_Handle("/ ", Link_ID);
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	4619      	mov	r1, r3
 8000752:	4810      	ldr	r0, [pc, #64]	; (8000794 <Server_Start+0x168>)
 8000754:	f7ff fe5e 	bl	8000414 <Server_Handle>
}
 8000758:	bf00      	nop
 800075a:	3788      	adds	r7, #136	; 0x88
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	08003ad4 	.word	0x08003ad4
 8000764:	08003adc 	.word	0x08003adc
 8000768:	08003a94 	.word	0x08003a94
 800076c:	200001ec 	.word	0x200001ec
 8000770:	200000a0 	.word	0x200000a0
 8000774:	08003ae8 	.word	0x08003ae8
 8000778:	08003aec 	.word	0x08003aec
 800077c:	08003af4 	.word	0x08003af4
 8000780:	08003afc 	.word	0x08003afc
 8000784:	08003b04 	.word	0x08003b04
 8000788:	08003a9c 	.word	0x08003a9c
 800078c:	08003b0c 	.word	0x08003b0c
 8000790:	08003b14 	.word	0x08003b14
 8000794:	08003b24 	.word	0x08003b24

08000798 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <Ringbuf_init+0x38>)
 800079e:	4a0d      	ldr	r2, [pc, #52]	; (80007d4 <Ringbuf_init+0x3c>)
 80007a0:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <Ringbuf_init+0x40>)
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <Ringbuf_init+0x44>)
 80007a6:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <Ringbuf_init+0x48>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	695a      	ldr	r2, [r3, #20]
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <Ringbuf_init+0x48>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f042 0201 	orr.w	r2, r2, #1
 80007b6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <Ringbuf_init+0x48>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	68da      	ldr	r2, [r3, #12]
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <Ringbuf_init+0x48>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f042 0220 	orr.w	r2, r2, #32
 80007c6:	60da      	str	r2, [r3, #12]
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	20000280 	.word	0x20000280
 80007d4:	200001f0 	.word	0x200001f0
 80007d8:	20000284 	.word	0x20000284
 80007dc:	20000238 	.word	0x20000238
 80007e0:	20000288 	.word	0x20000288

080007e4 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	6039      	str	r1, [r7, #0]
 80007ee:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	3301      	adds	r3, #1
 80007f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007fa:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	429a      	cmp	r2, r3
 8000804:	d007      	beq.n	8000816 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	79f9      	ldrb	r1, [r7, #7]
 800080e:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <Look_for>:

int Look_for (char *str, char *buffertolookinto)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff fd04 	bl	8000238 <strlen>
 8000830:	4603      	mov	r3, r0
 8000832:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8000834:	6838      	ldr	r0, [r7, #0]
 8000836:	f7ff fcff 	bl	8000238 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8000846:	e002      	b.n	800084e <Look_for+0x2e>
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	3301      	adds	r3, #1
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	4413      	add	r3, r2
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	6839      	ldr	r1, [r7, #0]
 800085a:	440b      	add	r3, r1
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	429a      	cmp	r2, r3
 8000860:	d1f2      	bne.n	8000848 <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx])
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	4413      	add	r3, r2
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	6839      	ldr	r1, [r7, #0]
 800086e:	440b      	add	r3, r1
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	429a      	cmp	r2, r3
 8000874:	d111      	bne.n	800089a <Look_for+0x7a>
	{
		while (str[so_far] == buffertolookinto[indx])
 8000876:	e005      	b.n	8000884 <Look_for+0x64>
		{
			so_far++;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	3301      	adds	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
			indx++;
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	3301      	adds	r3, #1
 8000882:	613b      	str	r3, [r7, #16]
		while (str[so_far] == buffertolookinto[indx])
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	4413      	add	r3, r2
 800088a:	781a      	ldrb	r2, [r3, #0]
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	6839      	ldr	r1, [r7, #0]
 8000890:	440b      	add	r3, r1
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	429a      	cmp	r2, r3
 8000896:	d0ef      	beq.n	8000878 <Look_for+0x58>
 8000898:	e008      	b.n	80008ac <Look_for+0x8c>
		}
	}
	else
	{
		so_far =0;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
		if (indx >= bufferlength) return -1;
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	dbcf      	blt.n	8000846 <Look_for+0x26>
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008aa:	e007      	b.n	80008bc <Look_for+0x9c>
		goto repeat;
	}

	if (so_far == stringlength) return 1;
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d101      	bne.n	80008b8 <Look_for+0x98>
 80008b4:	2301      	movs	r3, #1
 80008b6:	e001      	b.n	80008bc <Look_for+0x9c>
	else return -1;
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <Uart_read>:

int Uart_read(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <Uart_read+0x48>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <Uart_read+0x48>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d102      	bne.n	80008e0 <Uart_read+0x1c>
  {
    return -1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008de:	e010      	b.n	8000902 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <Uart_read+0x48>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <Uart_read+0x48>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	5cd3      	ldrb	r3, [r2, r3]
 80008ec:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <Uart_read+0x48>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <Uart_read+0x48>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008fe:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8000900:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	20000280 	.word	0x20000280

08000910 <Uart_write>:

void Uart_write(int c)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db21      	blt.n	8000962 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <Uart_write+0x5c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	3301      	adds	r3, #1
 8000926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800092a:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 800092c:	bf00      	nop
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <Uart_write+0x5c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	429a      	cmp	r2, r3
 8000938:	d0f9      	beq.n	800092e <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <Uart_write+0x5c>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <Uart_write+0x5c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	b2c9      	uxtb	r1, r1
 8000948:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <Uart_write+0x5c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <Uart_write+0x60>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	68da      	ldr	r2, [r3, #12]
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <Uart_write+0x60>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000960:	60da      	str	r2, [r3, #12]
	}
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	20000284 	.word	0x20000284
 8000970:	20000288 	.word	0x20000288

08000974 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <IsDataAvailable+0x28>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <IsDataAvailable+0x28>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	b29b      	uxth	r3, r3
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	b29b      	uxth	r3, r3
 800098c:	3340      	adds	r3, #64	; 0x40
 800098e:	b29b      	uxth	r3, r3
 8000990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	20000280 	.word	0x20000280

080009a0 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 80009a8:	e006      	b.n	80009b8 <Uart_sendstring+0x18>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	607a      	str	r2, [r7, #4]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ffac 	bl	8000910 <Uart_write>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1f4      	bne.n	80009aa <Uart_sendstring+0xa>
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <GetDataFromBuffer>:

  while(*s) Uart_write(*s++);
}

void GetDataFromBuffer (char *startString, char *endString, char *buffertocopyfrom, char *buffertocopyinto)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b08c      	sub	sp, #48	; 0x30
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	60f8      	str	r0, [r7, #12]
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	603b      	str	r3, [r7, #0]
	int startStringLength = strlen (startString);
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f7ff fc2d 	bl	8000238 <strlen>
 80009de:	4603      	mov	r3, r0
 80009e0:	623b      	str	r3, [r7, #32]
	int endStringLength   = strlen (endString);
 80009e2:	68b8      	ldr	r0, [r7, #8]
 80009e4:	f7ff fc28 	bl	8000238 <strlen>
 80009e8:	4603      	mov	r3, r0
 80009ea:	61fb      	str	r3, [r7, #28]
	int so_far = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	int indx = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
	int startposition = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]
	int endposition = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]

repeat1:
	while (startString[so_far] != buffertocopyfrom[indx]) indx++;
 80009fc:	e002      	b.n	8000a04 <GetDataFromBuffer+0x3a>
 80009fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a00:	3301      	adds	r3, #1
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	4413      	add	r3, r2
 8000a0a:	781a      	ldrb	r2, [r3, #0]
 8000a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	440b      	add	r3, r1
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d1f2      	bne.n	80009fe <GetDataFromBuffer+0x34>
	if (startString[so_far] == buffertocopyfrom[indx])
 8000a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	781a      	ldrb	r2, [r3, #0]
 8000a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	440b      	add	r3, r1
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d110      	bne.n	8000a4e <GetDataFromBuffer+0x84>
	{
		while (startString[so_far] == buffertocopyfrom[indx])
 8000a2c:	e005      	b.n	8000a3a <GetDataFromBuffer+0x70>
		{
			so_far++;
 8000a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a30:	3301      	adds	r3, #1
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
			indx++;
 8000a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a36:	3301      	adds	r3, #1
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
		while (startString[so_far] == buffertocopyfrom[indx])
 8000a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a44:	6879      	ldr	r1, [r7, #4]
 8000a46:	440b      	add	r3, r1
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d0ef      	beq.n	8000a2e <GetDataFromBuffer+0x64>
		}
	}

	if (so_far == startStringLength) startposition = indx;
 8000a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a50:	6a3b      	ldr	r3, [r7, #32]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d104      	bne.n	8000a60 <GetDataFromBuffer+0x96>
 8000a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a58:	61bb      	str	r3, [r7, #24]
	{
		so_far =0;
		goto repeat1;
	}

	so_far = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a5e:	e006      	b.n	8000a6e <GetDataFromBuffer+0xa4>
		so_far =0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
		goto repeat1;
 8000a64:	e7ca      	b.n	80009fc <GetDataFromBuffer+0x32>

repeat2:
	while (endString[so_far] != buffertocopyfrom[indx]) indx++;
 8000a66:	e002      	b.n	8000a6e <GetDataFromBuffer+0xa4>
 8000a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	4413      	add	r3, r2
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	440b      	add	r3, r1
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d1f2      	bne.n	8000a68 <GetDataFromBuffer+0x9e>
	if (endString[so_far] == buffertocopyfrom[indx])
 8000a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	4413      	add	r3, r2
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	440b      	add	r3, r1
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d110      	bne.n	8000ab8 <GetDataFromBuffer+0xee>
	{
		while (endString[so_far] == buffertocopyfrom[indx])
 8000a96:	e005      	b.n	8000aa4 <GetDataFromBuffer+0xda>
		{
			so_far++;
 8000a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
			indx++;
 8000a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
		while (endString[so_far] == buffertocopyfrom[indx])
 8000aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	440b      	add	r3, r1
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d0ef      	beq.n	8000a98 <GetDataFromBuffer+0xce>
		}
	}

	if (so_far == endStringLength) endposition = indx-endStringLength;
 8000ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d10a      	bne.n	8000ad6 <GetDataFromBuffer+0x10c>
 8000ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	617b      	str	r3, [r7, #20]
	{
		so_far =0;
		goto repeat2;
	}

	so_far = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
	indx=0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28

	for (int i=startposition; i<endposition; i++)
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad4:	e010      	b.n	8000af8 <GetDataFromBuffer+0x12e>
		so_far =0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
		goto repeat2;
 8000ada:	e7c4      	b.n	8000a66 <GetDataFromBuffer+0x9c>
	{
		buffertocopyinto[indx] = buffertocopyfrom[i];
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	441a      	add	r2, r3
 8000ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae4:	6839      	ldr	r1, [r7, #0]
 8000ae6:	440b      	add	r3, r1
 8000ae8:	7812      	ldrb	r2, [r2, #0]
 8000aea:	701a      	strb	r2, [r3, #0]
		indx++;
 8000aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aee:	3301      	adds	r3, #1
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int i=startposition; i<endposition; i++)
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	3301      	adds	r3, #1
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
 8000af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbed      	blt.n	8000adc <GetDataFromBuffer+0x112>
	}
}
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
 8000b04:	3730      	adds	r7, #48	; 0x30
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <Uart_flush>:

void Uart_flush (void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <Uart_flush+0x20>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2240      	movs	r2, #64	; 0x40
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 fff1 	bl	8002b00 <memset>
	_rx_buffer->head = 0;
 8000b1e:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <Uart_flush+0x20>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2200      	movs	r2, #0
 8000b24:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000280 	.word	0x20000280

08000b30 <Uart_peek>:

int Uart_peek()
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <Uart_peek+0x30>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <Uart_peek+0x30>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d102      	bne.n	8000b4a <Uart_peek+0x1a>
  {
    return -1;
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b48:	e005      	b.n	8000b56 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <Uart_peek+0x30>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <Uart_peek+0x30>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b54:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000280 	.word	0x20000280

08000b64 <Copy_upto>:


int Copy_upto (char *string, char *buffertocopyinto)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff fb60 	bl	8000238 <strlen>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]

again:
	while (!IsDataAvailable());
 8000b80:	bf00      	nop
 8000b82:	f7ff fef7 	bl	8000974 <IsDataAvailable>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0fa      	beq.n	8000b82 <Copy_upto+0x1e>
	while (Uart_peek() != string[so_far])
 8000b8c:	e01b      	b.n	8000bc6 <Copy_upto+0x62>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8000b8e:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <Copy_upto+0xe4>)
 8000b90:	6819      	ldr	r1, [r3, #0]
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <Copy_upto+0xe4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	6838      	ldr	r0, [r7, #0]
 8000b9c:	4403      	add	r3, r0
 8000b9e:	5c8a      	ldrb	r2, [r1, r2]
 8000ba0:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000ba2:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <Copy_upto+0xe4>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba8:	1c5a      	adds	r2, r3, #1
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <Copy_upto+0xe4>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000bb2:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8000bba:	bf00      	nop
 8000bbc:	f7ff feda 	bl	8000974 <IsDataAvailable>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d0fa      	beq.n	8000bbc <Copy_upto+0x58>
	while (Uart_peek() != string[so_far])
 8000bc6:	f7ff ffb3 	bl	8000b30 <Uart_peek>
 8000bca:	4601      	mov	r1, r0
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4299      	cmp	r1, r3
 8000bd6:	d1da      	bne.n	8000b8e <Copy_upto+0x2a>

		}
	while (Uart_peek() == string [so_far])
 8000bd8:	e019      	b.n	8000c0e <Copy_upto+0xaa>
	{
		so_far++;
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8000be0:	f7ff fe70 	bl	80008c4 <Uart_read>
 8000be4:	4601      	mov	r1, r0
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	1c5a      	adds	r2, r3, #1
 8000bea:	613a      	str	r2, [r7, #16]
 8000bec:	461a      	mov	r2, r3
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2ca      	uxtb	r2, r1
 8000bf4:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d101      	bne.n	8000c02 <Copy_upto+0x9e>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e01d      	b.n	8000c3e <Copy_upto+0xda>
		while (!IsDataAvailable());
 8000c02:	bf00      	nop
 8000c04:	f7ff feb6 	bl	8000974 <IsDataAvailable>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0fa      	beq.n	8000c04 <Copy_upto+0xa0>
	while (Uart_peek() == string [so_far])
 8000c0e:	f7ff ff8f 	bl	8000b30 <Uart_peek>
 8000c12:	4601      	mov	r1, r0
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	d0dc      	beq.n	8000bda <Copy_upto+0x76>
	}

	if (so_far != len)
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d002      	beq.n	8000c2e <Copy_upto+0xca>
	{
		so_far = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
		goto again;
 8000c2c:	e7a8      	b.n	8000b80 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d101      	bne.n	8000c3a <Copy_upto+0xd6>
 8000c36:	2301      	movs	r3, #1
 8000c38:	e001      	b.n	8000c3e <Copy_upto+0xda>
	else return -1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000280 	.word	0x20000280

08000c4c <Get_after>:

int Get_after (char *string, uint8_t numberofchars, char *buffertosave)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	460b      	mov	r3, r1
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string) != 1);
 8000c5a:	bf00      	nop
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f000 f821 	bl	8000ca4 <Wait_for>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d1f9      	bne.n	8000c5c <Get_after+0x10>
	for (int indx=0; indx<numberofchars; indx++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	e010      	b.n	8000c90 <Get_after+0x44>
	{
		while (!(IsDataAvailable()));
 8000c6e:	bf00      	nop
 8000c70:	f7ff fe80 	bl	8000974 <IsDataAvailable>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0fa      	beq.n	8000c70 <Get_after+0x24>
		buffertosave[indx] = Uart_read();
 8000c7a:	f7ff fe23 	bl	80008c4 <Uart_read>
 8000c7e:	4601      	mov	r1, r0
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	b2ca      	uxtb	r2, r1
 8000c88:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	7afb      	ldrb	r3, [r7, #11]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	dbea      	blt.n	8000c6e <Get_after+0x22>
	}
	return 1;
 8000c98:	2301      	movs	r3, #1
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <Wait_for>:


int Wait_for (char *string)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff fac1 	bl	8000238 <strlen>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 8000cba:	bf00      	nop
 8000cbc:	f7ff fe5a 	bl	8000974 <IsDataAvailable>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0fa      	beq.n	8000cbc <Wait_for+0x18>
	while (Uart_peek() != string[so_far]) _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000cc6:	e008      	b.n	8000cda <Wait_for+0x36>
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <Wait_for+0xa4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <Wait_for+0xa4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cd8:	645a      	str	r2, [r3, #68]	; 0x44
 8000cda:	f7ff ff29 	bl	8000b30 <Uart_peek>
 8000cde:	4601      	mov	r1, r0
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d1ed      	bne.n	8000cc8 <Wait_for+0x24>
	while (Uart_peek() == string [so_far])
 8000cec:	e010      	b.n	8000d10 <Wait_for+0x6c>
	{
		so_far++;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
		Uart_read();
 8000cf4:	f7ff fde6 	bl	80008c4 <Uart_read>
		if (so_far == len) return 1;
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d101      	bne.n	8000d04 <Wait_for+0x60>
 8000d00:	2301      	movs	r3, #1
 8000d02:	e01d      	b.n	8000d40 <Wait_for+0x9c>
		while (!IsDataAvailable());
 8000d04:	bf00      	nop
 8000d06:	f7ff fe35 	bl	8000974 <IsDataAvailable>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0fa      	beq.n	8000d06 <Wait_for+0x62>
	while (Uart_peek() == string [so_far])
 8000d10:	f7ff ff0e 	bl	8000b30 <Uart_peek>
 8000d14:	4601      	mov	r1, r0
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d0e5      	beq.n	8000cee <Wait_for+0x4a>
	}

	if (so_far != len)
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d002      	beq.n	8000d30 <Wait_for+0x8c>
	{
		so_far = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
		goto again;
 8000d2e:	e7c4      	b.n	8000cba <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d101      	bne.n	8000d3c <Wait_for+0x98>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e001      	b.n	8000d40 <Wait_for+0x9c>
	else return -1;
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000280 	.word	0x20000280

08000d4c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f003 0320 	and.w	r3, r3, #32
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d013      	beq.n	8000d96 <Uart_isr+0x4a>
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	f003 0320 	and.w	r3, r3, #32
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d00e      	beq.n	8000d96 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <Uart_isr+0xac>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fd28 	bl	80007e4 <store_char>
        return;
 8000d94:	e02c      	b.n	8000df0 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d027      	beq.n	8000df0 <Uart_isr+0xa4>
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d022      	beq.n	8000df0 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <Uart_isr+0xb0>)
 8000dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <Uart_isr+0xb0>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d108      	bne.n	8000dc8 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dc4:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000dc6:	e012      	b.n	8000dee <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <Uart_isr+0xb0>)
 8000dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dcc:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <Uart_isr+0xb0>)
 8000dce:	5cd3      	ldrb	r3, [r2, r3]
 8000dd0:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <Uart_isr+0xb0>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <Uart_isr+0xb0>)
 8000dde:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	7bba      	ldrb	r2, [r7, #14]
 8000dec:	605a      	str	r2, [r3, #4]
    	return;
 8000dee:	bf00      	nop
    }
}
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000280 	.word	0x20000280
 8000dfc:	20000238 	.word	0x20000238

08000e00 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	e002      	b.n	8000e10 <Delay+0x10>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f9      	bne.n	8000e0a <Delay+0xa>
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f000 f829 	bl	8000e80 <LCD_BackLed_Control>
	LCD_Rst();
 8000e2e:	f000 f80f 	bl	8000e50 <LCD_Rst>
	LCD_REG_Config();
 8000e32:	f000 f85f 	bl	8000ef4 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e40:	22f0      	movs	r2, #240	; 0xf0
 8000e42:	2100      	movs	r1, #0
 8000e44:	2000      	movs	r0, #0
 8000e46:	f000 f9e6 	bl	8001216 <LCD_Clear>
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2102      	movs	r1, #2
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <LCD_Rst+0x28>)
 8000e5a:	f000 fffd 	bl	8001e58 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000e5e:	4807      	ldr	r0, [pc, #28]	; (8000e7c <LCD_Rst+0x2c>)
 8000e60:	f7ff ffce 	bl	8000e00 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2102      	movs	r1, #2
 8000e68:	4803      	ldr	r0, [pc, #12]	; (8000e78 <LCD_Rst+0x28>)
 8000e6a:	f000 fff5 	bl	8001e58 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000e6e:	4803      	ldr	r0, [pc, #12]	; (8000e7c <LCD_Rst+0x2c>)
 8000e70:	f7ff ffc6 	bl	8000e00 <Delay>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40011800 	.word	0x40011800
 8000e7c:	0002bffc 	.word	0x0002bffc

08000e80 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d006      	beq.n	8000e9e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e96:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <LCD_BackLed_Control+0x34>)
 8000e98:	f000 ffde 	bl	8001e58 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000e9c:	e005      	b.n	8000eaa <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea4:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <LCD_BackLed_Control+0x34>)
 8000ea6:	f000 ffd7 	bl	8001e58 <HAL_GPIO_WritePin>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40011400 	.word	0x40011400

08000eb8 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000ec2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	8013      	strh	r3, [r2, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <LCD_Write_Data+0x1c>)
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	8013      	strh	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	60020000 	.word	0x60020000

08000ef4 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000ef8:	20cf      	movs	r0, #207	; 0xcf
 8000efa:	f7ff ffdd 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff ffe8 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000f04:	2081      	movs	r0, #129	; 0x81
 8000f06:	f7ff ffe5 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000f0a:	2030      	movs	r0, #48	; 0x30
 8000f0c:	f7ff ffe2 	bl	8000ed4 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000f10:	20ed      	movs	r0, #237	; 0xed
 8000f12:	f7ff ffd1 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000f16:	2064      	movs	r0, #100	; 0x64
 8000f18:	f7ff ffdc 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f7ff ffd9 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000f22:	2012      	movs	r0, #18
 8000f24:	f7ff ffd6 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000f28:	2081      	movs	r0, #129	; 0x81
 8000f2a:	f7ff ffd3 	bl	8000ed4 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000f2e:	20e8      	movs	r0, #232	; 0xe8
 8000f30:	f7ff ffc2 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000f34:	2085      	movs	r0, #133	; 0x85
 8000f36:	f7ff ffcd 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000f3a:	2010      	movs	r0, #16
 8000f3c:	f7ff ffca 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000f40:	2078      	movs	r0, #120	; 0x78
 8000f42:	f7ff ffc7 	bl	8000ed4 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000f46:	20cb      	movs	r0, #203	; 0xcb
 8000f48:	f7ff ffb6 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000f4c:	2039      	movs	r0, #57	; 0x39
 8000f4e:	f7ff ffc1 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000f52:	202c      	movs	r0, #44	; 0x2c
 8000f54:	f7ff ffbe 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff ffbb 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000f5e:	2034      	movs	r0, #52	; 0x34
 8000f60:	f7ff ffb8 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000f64:	2002      	movs	r0, #2
 8000f66:	f7ff ffb5 	bl	8000ed4 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000f6a:	20f7      	movs	r0, #247	; 0xf7
 8000f6c:	f7ff ffa4 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000f70:	2020      	movs	r0, #32
 8000f72:	f7ff ffaf 	bl	8000ed4 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000f76:	20ea      	movs	r0, #234	; 0xea
 8000f78:	f7ff ff9e 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff ffa9 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff ffa6 	bl	8000ed4 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000f88:	20b1      	movs	r0, #177	; 0xb1
 8000f8a:	f7ff ff95 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff ffa0 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000f94:	201b      	movs	r0, #27
 8000f96:	f7ff ff9d 	bl	8000ed4 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000f9a:	20b6      	movs	r0, #182	; 0xb6
 8000f9c:	f7ff ff8c 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000fa0:	200a      	movs	r0, #10
 8000fa2:	f7ff ff97 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000fa6:	20a2      	movs	r0, #162	; 0xa2
 8000fa8:	f7ff ff94 	bl	8000ed4 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000fac:	20c0      	movs	r0, #192	; 0xc0
 8000fae:	f7ff ff83 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000fb2:	2035      	movs	r0, #53	; 0x35
 8000fb4:	f7ff ff8e 	bl	8000ed4 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000fb8:	20c1      	movs	r0, #193	; 0xc1
 8000fba:	f7ff ff7d 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000fbe:	2011      	movs	r0, #17
 8000fc0:	f7ff ff88 	bl	8000ed4 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000fc4:	20c5      	movs	r0, #197	; 0xc5
 8000fc6:	f7ff ff77 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000fca:	2045      	movs	r0, #69	; 0x45
 8000fcc:	f7ff ff82 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000fd0:	2045      	movs	r0, #69	; 0x45
 8000fd2:	f7ff ff7f 	bl	8000ed4 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000fd6:	20c7      	movs	r0, #199	; 0xc7
 8000fd8:	f7ff ff6e 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000fdc:	20a2      	movs	r0, #162	; 0xa2
 8000fde:	f7ff ff79 	bl	8000ed4 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000fe2:	20f2      	movs	r0, #242	; 0xf2
 8000fe4:	f7ff ff68 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff ff73 	bl	8000ed4 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000fee:	2026      	movs	r0, #38	; 0x26
 8000ff0:	f7ff ff62 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f7ff ff6d 	bl	8000ed4 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000ffa:	20e0      	movs	r0, #224	; 0xe0
 8000ffc:	f7ff ff5c 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001000:	200f      	movs	r0, #15
 8001002:	f7ff ff67 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8001006:	2026      	movs	r0, #38	; 0x26
 8001008:	f7ff ff64 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 800100c:	2024      	movs	r0, #36	; 0x24
 800100e:	f7ff ff61 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8001012:	200b      	movs	r0, #11
 8001014:	f7ff ff5e 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001018:	200e      	movs	r0, #14
 800101a:	f7ff ff5b 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800101e:	2009      	movs	r0, #9
 8001020:	f7ff ff58 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8001024:	2054      	movs	r0, #84	; 0x54
 8001026:	f7ff ff55 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800102a:	20a8      	movs	r0, #168	; 0xa8
 800102c:	f7ff ff52 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001030:	2046      	movs	r0, #70	; 0x46
 8001032:	f7ff ff4f 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8001036:	200c      	movs	r0, #12
 8001038:	f7ff ff4c 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 800103c:	2017      	movs	r0, #23
 800103e:	f7ff ff49 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001042:	2009      	movs	r0, #9
 8001044:	f7ff ff46 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001048:	200f      	movs	r0, #15
 800104a:	f7ff ff43 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800104e:	2007      	movs	r0, #7
 8001050:	f7ff ff40 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff ff3d 	bl	8000ed4 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800105a:	20e1      	movs	r0, #225	; 0xe1
 800105c:	f7ff ff2c 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff ff37 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001066:	2019      	movs	r0, #25
 8001068:	f7ff ff34 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800106c:	201b      	movs	r0, #27
 800106e:	f7ff ff31 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001072:	2004      	movs	r0, #4
 8001074:	f7ff ff2e 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001078:	2010      	movs	r0, #16
 800107a:	f7ff ff2b 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800107e:	2007      	movs	r0, #7
 8001080:	f7ff ff28 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001084:	202a      	movs	r0, #42	; 0x2a
 8001086:	f7ff ff25 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800108a:	2047      	movs	r0, #71	; 0x47
 800108c:	f7ff ff22 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001090:	2039      	movs	r0, #57	; 0x39
 8001092:	f7ff ff1f 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001096:	2003      	movs	r0, #3
 8001098:	f7ff ff1c 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800109c:	2006      	movs	r0, #6
 800109e:	f7ff ff19 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80010a2:	2006      	movs	r0, #6
 80010a4:	f7ff ff16 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80010a8:	2030      	movs	r0, #48	; 0x30
 80010aa:	f7ff ff13 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80010ae:	2038      	movs	r0, #56	; 0x38
 80010b0:	f7ff ff10 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80010b4:	200f      	movs	r0, #15
 80010b6:	f7ff ff0d 	bl	8000ed4 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80010ba:	2036      	movs	r0, #54	; 0x36
 80010bc:	f7ff fefc 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 80010c0:	20c8      	movs	r0, #200	; 0xc8
 80010c2:	f7ff ff07 	bl	8000ed4 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80010c6:	202a      	movs	r0, #42	; 0x2a
 80010c8:	f7ff fef6 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff ff01 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff fefe 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff fefb 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80010de:	20ef      	movs	r0, #239	; 0xef
 80010e0:	f7ff fef8 	bl	8000ed4 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80010e4:	202b      	movs	r0, #43	; 0x2b
 80010e6:	f7ff fee7 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff fef2 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff feef 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80010f6:	2001      	movs	r0, #1
 80010f8:	f7ff feec 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80010fc:	203f      	movs	r0, #63	; 0x3f
 80010fe:	f7ff fee9 	bl	8000ed4 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8001102:	203a      	movs	r0, #58	; 0x3a
 8001104:	f7ff fed8 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001108:	2055      	movs	r0, #85	; 0x55
 800110a:	f7ff fee3 	bl	8000ed4 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 800110e:	2011      	movs	r0, #17
 8001110:	f7ff fed2 	bl	8000eb8 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <LCD_REG_Config+0x230>)
 8001116:	f7ff fe73 	bl	8000e00 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800111a:	2029      	movs	r0, #41	; 0x29
 800111c:	f7ff fecc 	bl	8000eb8 <LCD_Write_Cmd>
	
	
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	0002bffc 	.word	0x0002bffc

08001128 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4604      	mov	r4, r0
 8001130:	4608      	mov	r0, r1
 8001132:	4611      	mov	r1, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4623      	mov	r3, r4
 8001138:	80fb      	strh	r3, [r7, #6]
 800113a:	4603      	mov	r3, r0
 800113c:	80bb      	strh	r3, [r7, #4]
 800113e:	460b      	mov	r3, r1
 8001140:	807b      	strh	r3, [r7, #2]
 8001142:	4613      	mov	r3, r2
 8001144:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8001146:	202a      	movs	r0, #42	; 0x2a
 8001148:	f7ff feb6 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	0a1b      	lsrs	r3, r3, #8
 8001150:	b29b      	uxth	r3, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff febe 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	b29b      	uxth	r3, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff feb8 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001164:	88fa      	ldrh	r2, [r7, #6]
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	4413      	add	r3, r2
 800116a:	3b01      	subs	r3, #1
 800116c:	121b      	asrs	r3, r3, #8
 800116e:	b29b      	uxth	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff feaf 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001176:	88fa      	ldrh	r2, [r7, #6]
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	4413      	add	r3, r2
 800117c:	b29b      	uxth	r3, r3
 800117e:	3b01      	subs	r3, #1
 8001180:	b29b      	uxth	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fea4 	bl	8000ed4 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 800118c:	202b      	movs	r0, #43	; 0x2b
 800118e:	f7ff fe93 	bl	8000eb8 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001192:	88bb      	ldrh	r3, [r7, #4]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	b29b      	uxth	r3, r3
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fe9b 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 800119e:	88bb      	ldrh	r3, [r7, #4]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fe95 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80011aa:	88ba      	ldrh	r2, [r7, #4]
 80011ac:	883b      	ldrh	r3, [r7, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	3b01      	subs	r3, #1
 80011b2:	121b      	asrs	r3, r3, #8
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fe8c 	bl	8000ed4 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80011bc:	88ba      	ldrh	r2, [r7, #4]
 80011be:	883b      	ldrh	r3, [r7, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	3b01      	subs	r3, #1
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fe81 	bl	8000ed4 <LCD_Write_Data>
	
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}

080011da <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b084      	sub	sp, #16
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	460b      	mov	r3, r1
 80011e4:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80011ea:	202c      	movs	r0, #44	; 0x2c
 80011ec:	f7ff fe64 	bl	8000eb8 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e006      	b.n	8001204 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fe6b 	bl	8000ed4 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	3301      	adds	r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	429a      	cmp	r2, r3
 800120a:	d3f4      	bcc.n	80011f6 <LCD_FillColor+0x1c>
		
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001216:	b590      	push	{r4, r7, lr}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	4604      	mov	r4, r0
 800121e:	4608      	mov	r0, r1
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	4623      	mov	r3, r4
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4603      	mov	r3, r0
 800122a:	80bb      	strh	r3, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001234:	883b      	ldrh	r3, [r7, #0]
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	88b9      	ldrh	r1, [r7, #4]
 800123a:	88f8      	ldrh	r0, [r7, #6]
 800123c:	f7ff ff74 	bl	8001128 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001240:	887b      	ldrh	r3, [r7, #2]
 8001242:	883a      	ldrh	r2, [r7, #0]
 8001244:	fb02 f303 	mul.w	r3, r2, r3
 8001248:	461a      	mov	r2, r3
 800124a:	8b3b      	ldrh	r3, [r7, #24]
 800124c:	4619      	mov	r1, r3
 800124e:	4610      	mov	r0, r2
 8001250:	f7ff ffc3 	bl	80011da <LCD_FillColor>
	
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bd90      	pop	{r4, r7, pc}

0800125c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001260:	f000 fad2 	bl	8001808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001264:	f000 f816 	bl	8001294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001268:	f000 f884 	bl	8001374 <MX_GPIO_Init>
  MX_FSMC_Init();
 800126c:	f000 f8fa 	bl	8001464 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8001270:	f000 f856 	bl	8001320 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8001274:	f7ff fdd5 	bl	8000e22 <LCD_INIT>
  ESP_Init("Coin master", "jonathan102", "192.168.0.102");
 8001278:	4a03      	ldr	r2, [pc, #12]	; (8001288 <main+0x2c>)
 800127a:	4904      	ldr	r1, [pc, #16]	; (800128c <main+0x30>)
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <main+0x34>)
 800127e:	f7fe fffd 	bl	800027c <ESP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Server_Start();
 8001282:	f7ff f9d3 	bl	800062c <Server_Start>
 8001286:	e7fc      	b.n	8001282 <main+0x26>
 8001288:	08003b28 	.word	0x08003b28
 800128c:	08003b38 	.word	0x08003b38
 8001290:	08003b44 	.word	0x08003b44

08001294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b090      	sub	sp, #64	; 0x40
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	f107 0318 	add.w	r3, r7, #24
 800129e:	2228      	movs	r2, #40	; 0x28
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 fc2c 	bl	8002b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c4:	2301      	movs	r3, #1
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c8:	2302      	movs	r3, #2
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fdd3 	bl	8001e88 <HAL_RCC_OscConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012e8:	f000 f920 	bl	800152c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ec:	230f      	movs	r3, #15
 80012ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f0:	2302      	movs	r3, #2
 80012f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2102      	movs	r1, #2
 8001306:	4618      	mov	r0, r3
 8001308:	f001 f840 	bl	800238c <HAL_RCC_ClockConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001312:	f000 f90b 	bl	800152c <Error_Handler>
  }
}
 8001316:	bf00      	nop
 8001318:	3740      	adds	r7, #64	; 0x40
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_USART3_UART_Init+0x4c>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <MX_USART3_UART_Init+0x50>)
 8001328:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <MX_USART3_UART_Init+0x4c>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001330:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_USART3_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_USART3_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_USART3_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_USART3_UART_Init+0x4c>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_USART3_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_USART3_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_USART3_UART_Init+0x4c>)
 8001358:	f001 f9f3 	bl	8002742 <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001362:	f000 f8e3 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000288 	.word	0x20000288
 8001370:	40004800 	.word	0x40004800

08001374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	f107 0318 	add.w	r3, r7, #24
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001388:	4b33      	ldr	r3, [pc, #204]	; (8001458 <MX_GPIO_Init+0xe4>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a32      	ldr	r2, [pc, #200]	; (8001458 <MX_GPIO_Init+0xe4>)
 800138e:	f043 0310 	orr.w	r3, r3, #16
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b30      	ldr	r3, [pc, #192]	; (8001458 <MX_GPIO_Init+0xe4>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0310 	and.w	r3, r3, #16
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013a0:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <MX_GPIO_Init+0xe4>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a2c      	ldr	r2, [pc, #176]	; (8001458 <MX_GPIO_Init+0xe4>)
 80013a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <MX_GPIO_Init+0xe4>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	4b27      	ldr	r3, [pc, #156]	; (8001458 <MX_GPIO_Init+0xe4>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a26      	ldr	r2, [pc, #152]	; (8001458 <MX_GPIO_Init+0xe4>)
 80013be:	f043 0308 	orr.w	r3, r3, #8
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <MX_GPIO_Init+0xe4>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <MX_GPIO_Init+0xe4>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a20      	ldr	r2, [pc, #128]	; (8001458 <MX_GPIO_Init+0xe4>)
 80013d6:	f043 0320 	orr.w	r3, r3, #32
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <MX_GPIO_Init+0xe4>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0320 	and.w	r3, r3, #32
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_GPIO_Init+0xe4>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a1a      	ldr	r2, [pc, #104]	; (8001458 <MX_GPIO_Init+0xe4>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <MX_GPIO_Init+0xe4>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001406:	4815      	ldr	r0, [pc, #84]	; (800145c <MX_GPIO_Init+0xe8>)
 8001408:	f000 fd26 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2102      	movs	r1, #2
 8001410:	4813      	ldr	r0, [pc, #76]	; (8001460 <MX_GPIO_Init+0xec>)
 8001412:	f000 fd21 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001428:	f107 0318 	add.w	r3, r7, #24
 800142c:	4619      	mov	r1, r3
 800142e:	480b      	ldr	r0, [pc, #44]	; (800145c <MX_GPIO_Init+0xe8>)
 8001430:	f000 fb7e 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001444:	f107 0318 	add.w	r3, r7, #24
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_GPIO_Init+0xec>)
 800144c:	f000 fb70 	bl	8001b30 <HAL_GPIO_Init>

}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	; 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021000 	.word	0x40021000
 800145c:	40011400 	.word	0x40011400
 8001460:	40011800 	.word	0x40011800

08001464 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	615a      	str	r2, [r3, #20]
 800147a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800147c:	4b28      	ldr	r3, [pc, #160]	; (8001520 <MX_FSMC_Init+0xbc>)
 800147e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001482:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001484:	4b26      	ldr	r3, [pc, #152]	; (8001520 <MX_FSMC_Init+0xbc>)
 8001486:	4a27      	ldr	r2, [pc, #156]	; (8001524 <MX_FSMC_Init+0xc0>)
 8001488:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800148a:	4b25      	ldr	r3, [pc, #148]	; (8001520 <MX_FSMC_Init+0xbc>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001490:	4b23      	ldr	r3, [pc, #140]	; (8001520 <MX_FSMC_Init+0xbc>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001496:	4b22      	ldr	r3, [pc, #136]	; (8001520 <MX_FSMC_Init+0xbc>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800149c:	4b20      	ldr	r3, [pc, #128]	; (8001520 <MX_FSMC_Init+0xbc>)
 800149e:	2210      	movs	r2, #16
 80014a0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80014a2:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <MX_FSMC_Init+0xbc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_FSMC_Init+0xbc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80014ae:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <MX_FSMC_Init+0xbc>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_FSMC_Init+0xbc>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MX_FSMC_Init+0xbc>)
 80014bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_FSMC_Init+0xbc>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_FSMC_Init+0xbc>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_FSMC_Init+0xbc>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_FSMC_Init+0xbc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80014da:	230f      	movs	r3, #15
 80014dc:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80014de:	230f      	movs	r3, #15
 80014e0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80014e2:	23ff      	movs	r3, #255	; 0xff
 80014e4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80014e6:	230f      	movs	r3, #15
 80014e8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80014ea:	2310      	movs	r3, #16
 80014ec:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80014ee:	2311      	movs	r3, #17
 80014f0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2200      	movs	r2, #0
 80014fa:	4619      	mov	r1, r3
 80014fc:	4808      	ldr	r0, [pc, #32]	; (8001520 <MX_FSMC_Init+0xbc>)
 80014fe:	f001 f8d3 	bl	80026a8 <HAL_SRAM_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001508:	f000 f810 	bl	800152c <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_FSMC_Init+0xc4>)
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	4a05      	ldr	r2, [pc, #20]	; (8001528 <MX_FSMC_Init+0xc4>)
 8001512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001516:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001518:	bf00      	nop
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200002d0 	.word	0x200002d0
 8001524:	a0000104 	.word	0xa0000104
 8001528:	40010000 	.word	0x40010000

0800152c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001530:	b672      	cpsid	i
}
 8001532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001534:	e7fe      	b.n	8001534 <Error_Handler+0x8>
	...

08001538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_MspInit+0x5c>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	4a14      	ldr	r2, [pc, #80]	; (8001594 <HAL_MspInit+0x5c>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6193      	str	r3, [r2, #24]
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_MspInit+0x5c>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_MspInit+0x5c>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <HAL_MspInit+0x5c>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_MspInit+0x5c>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_MspInit+0x60>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_MspInit+0x60>)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	40021000 	.word	0x40021000
 8001598:	40010000 	.word	0x40010000

0800159c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a20      	ldr	r2, [pc, #128]	; (8001638 <HAL_UART_MspInit+0x9c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d139      	bne.n	8001630 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015bc:	4b1f      	ldr	r3, [pc, #124]	; (800163c <HAL_UART_MspInit+0xa0>)
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	4a1e      	ldr	r2, [pc, #120]	; (800163c <HAL_UART_MspInit+0xa0>)
 80015c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c6:	61d3      	str	r3, [r2, #28]
 80015c8:	4b1c      	ldr	r3, [pc, #112]	; (800163c <HAL_UART_MspInit+0xa0>)
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_UART_MspInit+0xa0>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a18      	ldr	r2, [pc, #96]	; (800163c <HAL_UART_MspInit+0xa0>)
 80015da:	f043 0308 	orr.w	r3, r3, #8
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_UART_MspInit+0xa0>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 0310 	add.w	r3, r7, #16
 80015fe:	4619      	mov	r1, r3
 8001600:	480f      	ldr	r0, [pc, #60]	; (8001640 <HAL_UART_MspInit+0xa4>)
 8001602:	f000 fa95 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001606:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800160a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	4619      	mov	r1, r3
 800161a:	4809      	ldr	r0, [pc, #36]	; (8001640 <HAL_UART_MspInit+0xa4>)
 800161c:	f000 fa88 	bl	8001b30 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	2027      	movs	r0, #39	; 0x27
 8001626:	f000 fa4c 	bl	8001ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800162a:	2027      	movs	r0, #39	; 0x27
 800162c:	f000 fa65 	bl	8001afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001630:	bf00      	nop
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40004800 	.word	0x40004800
 800163c:	40021000 	.word	0x40021000
 8001640:	40010c00 	.word	0x40010c00

08001644 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_FSMC_MspInit+0x78>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d129      	bne.n	80016b4 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <HAL_FSMC_MspInit+0x78>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <HAL_FSMC_MspInit+0x7c>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	4a15      	ldr	r2, [pc, #84]	; (80016c0 <HAL_FSMC_MspInit+0x7c>)
 800166c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001670:	6153      	str	r3, [r2, #20]
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_FSMC_MspInit+0x7c>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800167e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001682:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	4619      	mov	r1, r3
 8001692:	480c      	ldr	r0, [pc, #48]	; (80016c4 <HAL_FSMC_MspInit+0x80>)
 8001694:	f000 fa4c 	bl	8001b30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001698:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800169c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4619      	mov	r1, r3
 80016ac:	4806      	ldr	r0, [pc, #24]	; (80016c8 <HAL_FSMC_MspInit+0x84>)
 80016ae:	f000 fa3f 	bl	8001b30 <HAL_GPIO_Init>
 80016b2:	e000      	b.n	80016b6 <HAL_FSMC_MspInit+0x72>
    return;
 80016b4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000318 	.word	0x20000318
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40011800 	.word	0x40011800
 80016c8:	40011400 	.word	0x40011400

080016cc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80016d4:	f7ff ffb6 	bl	8001644 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <NMI_Handler+0x4>

080016e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <MemManage_Handler+0x4>

080016f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <BusFault_Handler+0x4>

080016f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <UsageFault_Handler+0x4>

080016fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001726:	f000 f8b5 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <USART3_IRQHandler+0x10>)
 8001736:	f7ff fb09 	bl	8000d4c <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  //HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000288 	.word	0x20000288

08001744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800174c:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <_sbrk+0x5c>)
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <_sbrk+0x60>)
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <_sbrk+0x64>)
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <_sbrk+0x68>)
 8001764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	429a      	cmp	r2, r3
 8001772:	d207      	bcs.n	8001784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001774:	f001 f99a 	bl	8002aac <__errno>
 8001778:	4603      	mov	r3, r0
 800177a:	220c      	movs	r2, #12
 800177c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001782:	e009      	b.n	8001798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <_sbrk+0x64>)
 8001794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001796:	68fb      	ldr	r3, [r7, #12]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20010000 	.word	0x20010000
 80017a4:	00000400 	.word	0x00000400
 80017a8:	2000031c 	.word	0x2000031c
 80017ac:	20000338 	.word	0x20000338

080017b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017bc:	f7ff fff8 	bl	80017b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c0:	480b      	ldr	r0, [pc, #44]	; (80017f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017c2:	490c      	ldr	r1, [pc, #48]	; (80017f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017c4:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a09      	ldr	r2, [pc, #36]	; (80017fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017d8:	4c09      	ldr	r4, [pc, #36]	; (8001800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e6:	f001 f967 	bl	8002ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ea:	f7ff fd37 	bl	800125c <main>
  bx lr
 80017ee:	4770      	bx	lr
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80017f8:	08003bb8 	.word	0x08003bb8
  ldr r2, =_sbss
 80017fc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001800:	20000334 	.word	0x20000334

08001804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC1_2_IRQHandler>
	...

08001808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_Init+0x28>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_Init+0x28>)
 8001812:	f043 0310 	orr.w	r3, r3, #16
 8001816:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f000 f947 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181e:	200f      	movs	r0, #15
 8001820:	f000 f808 	bl	8001834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001824:	f7ff fe88 	bl	8001538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40022000 	.word	0x40022000

08001834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_InitTick+0x54>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_InitTick+0x58>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184a:	fbb3 f3f1 	udiv	r3, r3, r1
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f95f 	bl	8001b16 <HAL_SYSTICK_Config>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e00e      	b.n	8001880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d80a      	bhi.n	800187e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001868:	2200      	movs	r2, #0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001870:	f000 f927 	bl	8001ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001874:	4a06      	ldr	r2, [pc, #24]	; (8001890 <HAL_InitTick+0x5c>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000014 	.word	0x20000014
 800188c:	2000001c 	.word	0x2000001c
 8001890:	20000018 	.word	0x20000018

08001894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_IncTick+0x1c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_IncTick+0x20>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	4a03      	ldr	r2, [pc, #12]	; (80018b4 <HAL_IncTick+0x20>)
 80018a6:	6013      	str	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	2000001c 	.word	0x2000001c
 80018b4:	20000320 	.word	0x20000320

080018b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <HAL_GetTick+0x10>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	20000320 	.word	0x20000320

080018cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff fff0 	bl	80018b8 <HAL_GetTick>
 80018d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018e4:	d005      	beq.n	80018f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_Delay+0x44>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f2:	bf00      	nop
 80018f4:	f7ff ffe0 	bl	80018b8 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d8f7      	bhi.n	80018f4 <HAL_Delay+0x28>
  {
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000001c 	.word	0x2000001c

08001914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001946:	4a04      	ldr	r2, [pc, #16]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	60d3      	str	r3, [r2, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	db0b      	blt.n	80019a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	f003 021f 	and.w	r2, r3, #31
 8001990:	4906      	ldr	r1, [pc, #24]	; (80019ac <__NVIC_EnableIRQ+0x34>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	2001      	movs	r0, #1
 800199a:	fa00 f202 	lsl.w	r2, r0, r2
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0a      	blt.n	80019da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	490c      	ldr	r1, [pc, #48]	; (80019fc <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d8:	e00a      	b.n	80019f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4908      	ldr	r1, [pc, #32]	; (8001a00 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	761a      	strb	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	bf28      	it	cs
 8001a22:	2304      	movcs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d902      	bls.n	8001a34 <NVIC_EncodePriority+0x30>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b03      	subs	r3, #3
 8001a32:	e000      	b.n	8001a36 <NVIC_EncodePriority+0x32>
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a78:	d301      	bcc.n	8001a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00f      	b.n	8001a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <SysTick_Config+0x40>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a86:	210f      	movs	r1, #15
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a8c:	f7ff ff90 	bl	80019b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <SysTick_Config+0x40>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <SysTick_Config+0x40>)
 8001a98:	2207      	movs	r2, #7
 8001a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	e000e010 	.word	0xe000e010

08001aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff2d 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad4:	f7ff ff42 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f7ff ff90 	bl	8001a04 <NVIC_EncodePriority>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff5f 	bl	80019b0 <__NVIC_SetPriority>
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff35 	bl	8001978 <__NVIC_EnableIRQ>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ffa2 	bl	8001a68 <SysTick_Config>
 8001b24:	4603      	mov	r3, r0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b08b      	sub	sp, #44	; 0x2c
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b42:	e179      	b.n	8001e38 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b44:	2201      	movs	r2, #1
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	f040 8168 	bne.w	8001e32 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4a96      	ldr	r2, [pc, #600]	; (8001dc0 <HAL_GPIO_Init+0x290>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d05e      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
 8001b6c:	4a94      	ldr	r2, [pc, #592]	; (8001dc0 <HAL_GPIO_Init+0x290>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d875      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001b72:	4a94      	ldr	r2, [pc, #592]	; (8001dc4 <HAL_GPIO_Init+0x294>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d058      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
 8001b78:	4a92      	ldr	r2, [pc, #584]	; (8001dc4 <HAL_GPIO_Init+0x294>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d86f      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001b7e:	4a92      	ldr	r2, [pc, #584]	; (8001dc8 <HAL_GPIO_Init+0x298>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d052      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
 8001b84:	4a90      	ldr	r2, [pc, #576]	; (8001dc8 <HAL_GPIO_Init+0x298>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d869      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001b8a:	4a90      	ldr	r2, [pc, #576]	; (8001dcc <HAL_GPIO_Init+0x29c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d04c      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
 8001b90:	4a8e      	ldr	r2, [pc, #568]	; (8001dcc <HAL_GPIO_Init+0x29c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d863      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001b96:	4a8e      	ldr	r2, [pc, #568]	; (8001dd0 <HAL_GPIO_Init+0x2a0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d046      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
 8001b9c:	4a8c      	ldr	r2, [pc, #560]	; (8001dd0 <HAL_GPIO_Init+0x2a0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d85d      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001ba2:	2b12      	cmp	r3, #18
 8001ba4:	d82a      	bhi.n	8001bfc <HAL_GPIO_Init+0xcc>
 8001ba6:	2b12      	cmp	r3, #18
 8001ba8:	d859      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001baa:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <HAL_GPIO_Init+0x80>)
 8001bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb0:	08001c2b 	.word	0x08001c2b
 8001bb4:	08001c05 	.word	0x08001c05
 8001bb8:	08001c17 	.word	0x08001c17
 8001bbc:	08001c59 	.word	0x08001c59
 8001bc0:	08001c5f 	.word	0x08001c5f
 8001bc4:	08001c5f 	.word	0x08001c5f
 8001bc8:	08001c5f 	.word	0x08001c5f
 8001bcc:	08001c5f 	.word	0x08001c5f
 8001bd0:	08001c5f 	.word	0x08001c5f
 8001bd4:	08001c5f 	.word	0x08001c5f
 8001bd8:	08001c5f 	.word	0x08001c5f
 8001bdc:	08001c5f 	.word	0x08001c5f
 8001be0:	08001c5f 	.word	0x08001c5f
 8001be4:	08001c5f 	.word	0x08001c5f
 8001be8:	08001c5f 	.word	0x08001c5f
 8001bec:	08001c5f 	.word	0x08001c5f
 8001bf0:	08001c5f 	.word	0x08001c5f
 8001bf4:	08001c0d 	.word	0x08001c0d
 8001bf8:	08001c21 	.word	0x08001c21
 8001bfc:	4a75      	ldr	r2, [pc, #468]	; (8001dd4 <HAL_GPIO_Init+0x2a4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d013      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c02:	e02c      	b.n	8001c5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	623b      	str	r3, [r7, #32]
          break;
 8001c0a:	e029      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	3304      	adds	r3, #4
 8001c12:	623b      	str	r3, [r7, #32]
          break;
 8001c14:	e024      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	3308      	adds	r3, #8
 8001c1c:	623b      	str	r3, [r7, #32]
          break;
 8001c1e:	e01f      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	330c      	adds	r3, #12
 8001c26:	623b      	str	r3, [r7, #32]
          break;
 8001c28:	e01a      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c32:	2304      	movs	r3, #4
 8001c34:	623b      	str	r3, [r7, #32]
          break;
 8001c36:	e013      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d105      	bne.n	8001c4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c40:	2308      	movs	r3, #8
 8001c42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	611a      	str	r2, [r3, #16]
          break;
 8001c4a:	e009      	b.n	8001c60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c4c:	2308      	movs	r3, #8
 8001c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	615a      	str	r2, [r3, #20]
          break;
 8001c56:	e003      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
          break;
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          break;
 8001c5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2bff      	cmp	r3, #255	; 0xff
 8001c64:	d801      	bhi.n	8001c6a <HAL_GPIO_Init+0x13a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	e001      	b.n	8001c6e <HAL_GPIO_Init+0x13e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2bff      	cmp	r3, #255	; 0xff
 8001c74:	d802      	bhi.n	8001c7c <HAL_GPIO_Init+0x14c>
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	e002      	b.n	8001c82 <HAL_GPIO_Init+0x152>
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	3b08      	subs	r3, #8
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	210f      	movs	r1, #15
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	401a      	ands	r2, r3
 8001c94:	6a39      	ldr	r1, [r7, #32]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80c1 	beq.w	8001e32 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cb0:	4b49      	ldr	r3, [pc, #292]	; (8001dd8 <HAL_GPIO_Init+0x2a8>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a48      	ldr	r2, [pc, #288]	; (8001dd8 <HAL_GPIO_Init+0x2a8>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b46      	ldr	r3, [pc, #280]	; (8001dd8 <HAL_GPIO_Init+0x2a8>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cc8:	4a44      	ldr	r2, [pc, #272]	; (8001ddc <HAL_GPIO_Init+0x2ac>)
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3302      	adds	r3, #2
 8001cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	220f      	movs	r2, #15
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a3c      	ldr	r2, [pc, #240]	; (8001de0 <HAL_GPIO_Init+0x2b0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d01f      	beq.n	8001d34 <HAL_GPIO_Init+0x204>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a3b      	ldr	r2, [pc, #236]	; (8001de4 <HAL_GPIO_Init+0x2b4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d019      	beq.n	8001d30 <HAL_GPIO_Init+0x200>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a3a      	ldr	r2, [pc, #232]	; (8001de8 <HAL_GPIO_Init+0x2b8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d013      	beq.n	8001d2c <HAL_GPIO_Init+0x1fc>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a39      	ldr	r2, [pc, #228]	; (8001dec <HAL_GPIO_Init+0x2bc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d00d      	beq.n	8001d28 <HAL_GPIO_Init+0x1f8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a38      	ldr	r2, [pc, #224]	; (8001df0 <HAL_GPIO_Init+0x2c0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d007      	beq.n	8001d24 <HAL_GPIO_Init+0x1f4>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a37      	ldr	r2, [pc, #220]	; (8001df4 <HAL_GPIO_Init+0x2c4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d101      	bne.n	8001d20 <HAL_GPIO_Init+0x1f0>
 8001d1c:	2305      	movs	r3, #5
 8001d1e:	e00a      	b.n	8001d36 <HAL_GPIO_Init+0x206>
 8001d20:	2306      	movs	r3, #6
 8001d22:	e008      	b.n	8001d36 <HAL_GPIO_Init+0x206>
 8001d24:	2304      	movs	r3, #4
 8001d26:	e006      	b.n	8001d36 <HAL_GPIO_Init+0x206>
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e004      	b.n	8001d36 <HAL_GPIO_Init+0x206>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e002      	b.n	8001d36 <HAL_GPIO_Init+0x206>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_GPIO_Init+0x206>
 8001d34:	2300      	movs	r3, #0
 8001d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d38:	f002 0203 	and.w	r2, r2, #3
 8001d3c:	0092      	lsls	r2, r2, #2
 8001d3e:	4093      	lsls	r3, r2
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d46:	4925      	ldr	r1, [pc, #148]	; (8001ddc <HAL_GPIO_Init+0x2ac>)
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d006      	beq.n	8001d6e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d60:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <HAL_GPIO_Init+0x2c8>)
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	4924      	ldr	r1, [pc, #144]	; (8001df8 <HAL_GPIO_Init+0x2c8>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	608b      	str	r3, [r1, #8]
 8001d6c:	e006      	b.n	8001d7c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d6e:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <HAL_GPIO_Init+0x2c8>)
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	4920      	ldr	r1, [pc, #128]	; (8001df8 <HAL_GPIO_Init+0x2c8>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d006      	beq.n	8001d96 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_GPIO_Init+0x2c8>)
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	491a      	ldr	r1, [pc, #104]	; (8001df8 <HAL_GPIO_Init+0x2c8>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60cb      	str	r3, [r1, #12]
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d96:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <HAL_GPIO_Init+0x2c8>)
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	4916      	ldr	r1, [pc, #88]	; (8001df8 <HAL_GPIO_Init+0x2c8>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d025      	beq.n	8001dfc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_GPIO_Init+0x2c8>)
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4910      	ldr	r1, [pc, #64]	; (8001df8 <HAL_GPIO_Init+0x2c8>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
 8001dbc:	e025      	b.n	8001e0a <HAL_GPIO_Init+0x2da>
 8001dbe:	bf00      	nop
 8001dc0:	10320000 	.word	0x10320000
 8001dc4:	10310000 	.word	0x10310000
 8001dc8:	10220000 	.word	0x10220000
 8001dcc:	10210000 	.word	0x10210000
 8001dd0:	10120000 	.word	0x10120000
 8001dd4:	10110000 	.word	0x10110000
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	40010800 	.word	0x40010800
 8001de4:	40010c00 	.word	0x40010c00
 8001de8:	40011000 	.word	0x40011000
 8001dec:	40011400 	.word	0x40011400
 8001df0:	40011800 	.word	0x40011800
 8001df4:	40011c00 	.word	0x40011c00
 8001df8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_GPIO_Init+0x324>)
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	4913      	ldr	r1, [pc, #76]	; (8001e54 <HAL_GPIO_Init+0x324>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e16:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <HAL_GPIO_Init+0x324>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	490e      	ldr	r1, [pc, #56]	; (8001e54 <HAL_GPIO_Init+0x324>)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]
 8001e22:	e006      	b.n	8001e32 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_GPIO_Init+0x324>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	4909      	ldr	r1, [pc, #36]	; (8001e54 <HAL_GPIO_Init+0x324>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	3301      	adds	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f47f ae7e 	bne.w	8001b44 <HAL_GPIO_Init+0x14>
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	372c      	adds	r7, #44	; 0x2c
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	807b      	strh	r3, [r7, #2]
 8001e64:	4613      	mov	r3, r2
 8001e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e68:	787b      	ldrb	r3, [r7, #1]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e74:	e003      	b.n	8001e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	041a      	lsls	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	611a      	str	r2, [r3, #16]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e272      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8087 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ea8:	4b92      	ldr	r3, [pc, #584]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 030c 	and.w	r3, r3, #12
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d00c      	beq.n	8001ece <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eb4:	4b8f      	ldr	r3, [pc, #572]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d112      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x5e>
 8001ec0:	4b8c      	ldr	r3, [pc, #560]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ecc:	d10b      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ece:	4b89      	ldr	r3, [pc, #548]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d06c      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x12c>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d168      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e24c      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eee:	d106      	bne.n	8001efe <HAL_RCC_OscConfig+0x76>
 8001ef0:	4b80      	ldr	r3, [pc, #512]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a7f      	ldr	r2, [pc, #508]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	e02e      	b.n	8001f5c <HAL_RCC_OscConfig+0xd4>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x98>
 8001f06:	4b7b      	ldr	r3, [pc, #492]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a7a      	ldr	r2, [pc, #488]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b78      	ldr	r3, [pc, #480]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a77      	ldr	r2, [pc, #476]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e01d      	b.n	8001f5c <HAL_RCC_OscConfig+0xd4>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0xbc>
 8001f2a:	4b72      	ldr	r3, [pc, #456]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a71      	ldr	r2, [pc, #452]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b6f      	ldr	r3, [pc, #444]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a6e      	ldr	r2, [pc, #440]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e00b      	b.n	8001f5c <HAL_RCC_OscConfig+0xd4>
 8001f44:	4b6b      	ldr	r3, [pc, #428]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a6a      	ldr	r2, [pc, #424]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	4b68      	ldr	r3, [pc, #416]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a67      	ldr	r2, [pc, #412]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d013      	beq.n	8001f8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fca8 	bl	80018b8 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff fca4 	bl	80018b8 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e200      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	4b5d      	ldr	r3, [pc, #372]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0xe4>
 8001f8a:	e014      	b.n	8001fb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff fc94 	bl	80018b8 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f94:	f7ff fc90 	bl	80018b8 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e1ec      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	4b53      	ldr	r3, [pc, #332]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x10c>
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d063      	beq.n	800208a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fc2:	4b4c      	ldr	r3, [pc, #304]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00b      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fce:	4b49      	ldr	r3, [pc, #292]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d11c      	bne.n	8002014 <HAL_RCC_OscConfig+0x18c>
 8001fda:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d116      	bne.n	8002014 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	4b43      	ldr	r3, [pc, #268]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d005      	beq.n	8001ffe <HAL_RCC_OscConfig+0x176>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e1c0      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4939      	ldr	r1, [pc, #228]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002012:	e03a      	b.n	800208a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800201c:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 800201e:	2201      	movs	r2, #1
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7ff fc49 	bl	80018b8 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202a:	f7ff fc45 	bl	80018b8 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e1a1      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002048:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4927      	ldr	r1, [pc, #156]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]
 800205c:	e015      	b.n	800208a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205e:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff fc28 	bl	80018b8 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206c:	f7ff fc24 	bl	80018b8 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e180      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d03a      	beq.n	800210c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d019      	beq.n	80020d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_RCC_OscConfig+0x274>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a4:	f7ff fc08 	bl	80018b8 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ac:	f7ff fc04 	bl	80018b8 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e160      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020ca:	2001      	movs	r0, #1
 80020cc:	f000 face 	bl	800266c <RCC_Delay>
 80020d0:	e01c      	b.n	800210c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_RCC_OscConfig+0x274>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d8:	f7ff fbee 	bl	80018b8 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020de:	e00f      	b.n	8002100 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e0:	f7ff fbea 	bl	80018b8 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d908      	bls.n	8002100 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e146      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	42420000 	.word	0x42420000
 80020fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002100:	4b92      	ldr	r3, [pc, #584]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1e9      	bne.n	80020e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80a6 	beq.w	8002266 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800211e:	4b8b      	ldr	r3, [pc, #556]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10d      	bne.n	8002146 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	4b88      	ldr	r3, [pc, #544]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4a87      	ldr	r2, [pc, #540]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002134:	61d3      	str	r3, [r2, #28]
 8002136:	4b85      	ldr	r3, [pc, #532]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002142:	2301      	movs	r3, #1
 8002144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	4b82      	ldr	r3, [pc, #520]	; (8002350 <HAL_RCC_OscConfig+0x4c8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d118      	bne.n	8002184 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002152:	4b7f      	ldr	r3, [pc, #508]	; (8002350 <HAL_RCC_OscConfig+0x4c8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a7e      	ldr	r2, [pc, #504]	; (8002350 <HAL_RCC_OscConfig+0x4c8>)
 8002158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215e:	f7ff fbab 	bl	80018b8 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002166:	f7ff fba7 	bl	80018b8 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b64      	cmp	r3, #100	; 0x64
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e103      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002178:	4b75      	ldr	r3, [pc, #468]	; (8002350 <HAL_RCC_OscConfig+0x4c8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d106      	bne.n	800219a <HAL_RCC_OscConfig+0x312>
 800218c:	4b6f      	ldr	r3, [pc, #444]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a6e      	ldr	r2, [pc, #440]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6213      	str	r3, [r2, #32]
 8002198:	e02d      	b.n	80021f6 <HAL_RCC_OscConfig+0x36e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0x334>
 80021a2:	4b6a      	ldr	r3, [pc, #424]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4a69      	ldr	r2, [pc, #420]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	6213      	str	r3, [r2, #32]
 80021ae:	4b67      	ldr	r3, [pc, #412]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a66      	ldr	r2, [pc, #408]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f023 0304 	bic.w	r3, r3, #4
 80021b8:	6213      	str	r3, [r2, #32]
 80021ba:	e01c      	b.n	80021f6 <HAL_RCC_OscConfig+0x36e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b05      	cmp	r3, #5
 80021c2:	d10c      	bne.n	80021de <HAL_RCC_OscConfig+0x356>
 80021c4:	4b61      	ldr	r3, [pc, #388]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4a60      	ldr	r2, [pc, #384]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	6213      	str	r3, [r2, #32]
 80021d0:	4b5e      	ldr	r3, [pc, #376]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4a5d      	ldr	r2, [pc, #372]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6213      	str	r3, [r2, #32]
 80021dc:	e00b      	b.n	80021f6 <HAL_RCC_OscConfig+0x36e>
 80021de:	4b5b      	ldr	r3, [pc, #364]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a5a      	ldr	r2, [pc, #360]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	6213      	str	r3, [r2, #32]
 80021ea:	4b58      	ldr	r3, [pc, #352]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4a57      	ldr	r2, [pc, #348]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	f023 0304 	bic.w	r3, r3, #4
 80021f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d015      	beq.n	800222a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fe:	f7ff fb5b 	bl	80018b8 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002204:	e00a      	b.n	800221c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002206:	f7ff fb57 	bl	80018b8 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f241 3288 	movw	r2, #5000	; 0x1388
 8002214:	4293      	cmp	r3, r2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e0b1      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221c:	4b4b      	ldr	r3, [pc, #300]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0ee      	beq.n	8002206 <HAL_RCC_OscConfig+0x37e>
 8002228:	e014      	b.n	8002254 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222a:	f7ff fb45 	bl	80018b8 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002230:	e00a      	b.n	8002248 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7ff fb41 	bl	80018b8 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e09b      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002248:	4b40      	ldr	r3, [pc, #256]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1ee      	bne.n	8002232 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002254:	7dfb      	ldrb	r3, [r7, #23]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d105      	bne.n	8002266 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225a:	4b3c      	ldr	r3, [pc, #240]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	4a3b      	ldr	r2, [pc, #236]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 8002260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002264:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8087 	beq.w	800237e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002270:	4b36      	ldr	r3, [pc, #216]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b08      	cmp	r3, #8
 800227a:	d061      	beq.n	8002340 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d146      	bne.n	8002312 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002284:	4b33      	ldr	r3, [pc, #204]	; (8002354 <HAL_RCC_OscConfig+0x4cc>)
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228a:	f7ff fb15 	bl	80018b8 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002292:	f7ff fb11 	bl	80018b8 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e06d      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a4:	4b29      	ldr	r3, [pc, #164]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f0      	bne.n	8002292 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d108      	bne.n	80022cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	4921      	ldr	r1, [pc, #132]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022cc:	4b1f      	ldr	r3, [pc, #124]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a19      	ldr	r1, [r3, #32]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	430b      	orrs	r3, r1
 80022de:	491b      	ldr	r1, [pc, #108]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e4:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_RCC_OscConfig+0x4cc>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7ff fae5 	bl	80018b8 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f2:	f7ff fae1 	bl	80018b8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e03d      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x46a>
 8002310:	e035      	b.n	800237e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <HAL_RCC_OscConfig+0x4cc>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7ff face 	bl	80018b8 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002320:	f7ff faca 	bl	80018b8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e026      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_RCC_OscConfig+0x4c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x498>
 800233e:	e01e      	b.n	800237e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d107      	bne.n	8002358 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e019      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
 800234c:	40021000 	.word	0x40021000
 8002350:	40007000 	.word	0x40007000
 8002354:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_RCC_OscConfig+0x500>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	429a      	cmp	r2, r3
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d001      	beq.n	800237e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000

0800238c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0d0      	b.n	8002542 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023a0:	4b6a      	ldr	r3, [pc, #424]	; (800254c <HAL_RCC_ClockConfig+0x1c0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d910      	bls.n	80023d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b67      	ldr	r3, [pc, #412]	; (800254c <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 0207 	bic.w	r2, r3, #7
 80023b6:	4965      	ldr	r1, [pc, #404]	; (800254c <HAL_RCC_ClockConfig+0x1c0>)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023be:	4b63      	ldr	r3, [pc, #396]	; (800254c <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d001      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0b8      	b.n	8002542 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d020      	beq.n	800241e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e8:	4b59      	ldr	r3, [pc, #356]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a58      	ldr	r2, [pc, #352]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002400:	4b53      	ldr	r3, [pc, #332]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	4a52      	ldr	r2, [pc, #328]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800240a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800240c:	4b50      	ldr	r3, [pc, #320]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	494d      	ldr	r1, [pc, #308]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d040      	beq.n	80024ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	4b47      	ldr	r3, [pc, #284]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d115      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e07f      	b.n	8002542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244a:	4b41      	ldr	r3, [pc, #260]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e073      	b.n	8002542 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245a:	4b3d      	ldr	r3, [pc, #244]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e06b      	b.n	8002542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246a:	4b39      	ldr	r3, [pc, #228]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f023 0203 	bic.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4936      	ldr	r1, [pc, #216]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800247c:	f7ff fa1c 	bl	80018b8 <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	e00a      	b.n	800249a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7ff fa18 	bl	80018b8 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e053      	b.n	8002542 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 020c 	and.w	r2, r3, #12
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d1eb      	bne.n	8002484 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ac:	4b27      	ldr	r3, [pc, #156]	; (800254c <HAL_RCC_ClockConfig+0x1c0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d210      	bcs.n	80024dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b24      	ldr	r3, [pc, #144]	; (800254c <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 0207 	bic.w	r2, r3, #7
 80024c2:	4922      	ldr	r1, [pc, #136]	; (800254c <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ca:	4b20      	ldr	r3, [pc, #128]	; (800254c <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e032      	b.n	8002542 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4916      	ldr	r1, [pc, #88]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	490e      	ldr	r1, [pc, #56]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	4313      	orrs	r3, r2
 8002518:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800251a:	f000 f821 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 800251e:	4602      	mov	r2, r0
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	490a      	ldr	r1, [pc, #40]	; (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	5ccb      	ldrb	r3, [r1, r3]
 800252e:	fa22 f303 	lsr.w	r3, r2, r3
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <HAL_RCC_ClockConfig+0x1cc>)
 8002534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_RCC_ClockConfig+0x1d0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff f97a 	bl	8001834 <HAL_InitTick>

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40022000 	.word	0x40022000
 8002550:	40021000 	.word	0x40021000
 8002554:	08003b50 	.word	0x08003b50
 8002558:	20000014 	.word	0x20000014
 800255c:	20000018 	.word	0x20000018

08002560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b04      	cmp	r3, #4
 8002588:	d002      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x30>
 800258a:	2b08      	cmp	r3, #8
 800258c:	d003      	beq.n	8002596 <HAL_RCC_GetSysClockFreq+0x36>
 800258e:	e027      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002592:	613b      	str	r3, [r7, #16]
      break;
 8002594:	e027      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	0c9b      	lsrs	r3, r3, #18
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	4a17      	ldr	r2, [pc, #92]	; (80025fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80025a0:	5cd3      	ldrb	r3, [r2, r3]
 80025a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d010      	beq.n	80025d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	0c5b      	lsrs	r3, r3, #17
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	4a11      	ldr	r2, [pc, #68]	; (8002600 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025ba:	5cd3      	ldrb	r3, [r2, r3]
 80025bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025c2:	fb03 f202 	mul.w	r2, r3, r2
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	e004      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a0c      	ldr	r2, [pc, #48]	; (8002604 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025d4:	fb02 f303 	mul.w	r3, r2, r3
 80025d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	613b      	str	r3, [r7, #16]
      break;
 80025de:	e002      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025e2:	613b      	str	r3, [r7, #16]
      break;
 80025e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025e6:	693b      	ldr	r3, [r7, #16]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	371c      	adds	r7, #28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000
 80025f8:	007a1200 	.word	0x007a1200
 80025fc:	08003b68 	.word	0x08003b68
 8002600:	08003b78 	.word	0x08003b78
 8002604:	003d0900 	.word	0x003d0900

08002608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800260c:	4b02      	ldr	r3, [pc, #8]	; (8002618 <HAL_RCC_GetHCLKFreq+0x10>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	20000014 	.word	0x20000014

0800261c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002620:	f7ff fff2 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8002624:	4602      	mov	r2, r0
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	4903      	ldr	r1, [pc, #12]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002632:	5ccb      	ldrb	r3, [r1, r3]
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	08003b60 	.word	0x08003b60

08002644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002648:	f7ff ffde 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	0adb      	lsrs	r3, r3, #11
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4903      	ldr	r1, [pc, #12]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	08003b60 	.word	0x08003b60

0800266c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <RCC_Delay+0x34>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <RCC_Delay+0x38>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	0a5b      	lsrs	r3, r3, #9
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002688:	bf00      	nop
  }
  while (Delay --);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1e5a      	subs	r2, r3, #1
 800268e:	60fa      	str	r2, [r7, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f9      	bne.n	8002688 <RCC_Delay+0x1c>
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	20000014 	.word	0x20000014
 80026a4:	10624dd3 	.word	0x10624dd3

080026a8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d004      	beq.n	80026c4 <HAL_SRAM_Init+0x1c>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c2:	d101      	bne.n	80026c8 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e038      	b.n	800273a <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d106      	bne.n	80026e2 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f7fe fff5 	bl	80016cc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3308      	adds	r3, #8
 80026ea:	4619      	mov	r1, r3
 80026ec:	4610      	mov	r0, r2
 80026ee:	f000 f907 	bl	8002900 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	461a      	mov	r2, r3
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	f000 f969 	bl	80029d4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6858      	ldr	r0, [r3, #4]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	f000 f994 	bl	8002a3c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	6892      	ldr	r2, [r2, #8]
 800271c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	6892      	ldr	r2, [r2, #8]
 8002728:	f041 0101 	orr.w	r1, r1, #1
 800272c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e042      	b.n	80027da <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d106      	bne.n	800276e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7fe ff17 	bl	800159c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2224      	movs	r2, #36	; 0x24
 8002772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002784:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f82c 	bl	80027e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691a      	ldr	r2, [r3, #16]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800279a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	4313      	orrs	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800281e:	f023 030c 	bic.w	r3, r3, #12
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	430b      	orrs	r3, r1
 800282a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a2c      	ldr	r2, [pc, #176]	; (80028f8 <UART_SetConfig+0x114>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d103      	bne.n	8002854 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800284c:	f7ff fefa 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	e002      	b.n	800285a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002854:	f7ff fee2 	bl	800261c <HAL_RCC_GetPCLK1Freq>
 8002858:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	009a      	lsls	r2, r3, #2
 8002864:	441a      	add	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	4a22      	ldr	r2, [pc, #136]	; (80028fc <UART_SetConfig+0x118>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	0119      	lsls	r1, r3, #4
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	009a      	lsls	r2, r3, #2
 8002884:	441a      	add	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002890:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <UART_SetConfig+0x118>)
 8002892:	fba3 0302 	umull	r0, r3, r3, r2
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2064      	movs	r0, #100	; 0x64
 800289a:	fb00 f303 	mul.w	r3, r0, r3
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	3332      	adds	r3, #50	; 0x32
 80028a4:	4a15      	ldr	r2, [pc, #84]	; (80028fc <UART_SetConfig+0x118>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b0:	4419      	add	r1, r3
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	009a      	lsls	r2, r3, #2
 80028bc:	441a      	add	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <UART_SetConfig+0x118>)
 80028ca:	fba3 0302 	umull	r0, r3, r3, r2
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2064      	movs	r0, #100	; 0x64
 80028d2:	fb00 f303 	mul.w	r3, r0, r3
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	3332      	adds	r3, #50	; 0x32
 80028dc:	4a07      	ldr	r2, [pc, #28]	; (80028fc <UART_SetConfig+0x118>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	f003 020f 	and.w	r2, r3, #15
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	440a      	add	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40013800 	.word	0x40013800
 80028fc:	51eb851f 	.word	0x51eb851f

08002900 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	f023 0101 	bic.w	r1, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b08      	cmp	r3, #8
 8002928:	d102      	bne.n	8002930 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800292a:	2340      	movs	r3, #64	; 0x40
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	e001      	b.n	8002934 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002940:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002946:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800294c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002952:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002958:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800295e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002964:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800296a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002970:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <FSMC_NORSRAM_Init+0xd0>)
 8002990:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002998:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80029a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	ea02 0103 	and.w	r1, r2, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4319      	orrs	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	371c      	adds	r7, #28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	0008fb7f 	.word	0x0008fb7f

080029d4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ea:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	431a      	orrs	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	041b      	lsls	r3, r3, #16
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	051b      	lsls	r3, r3, #20
 8002a12:	431a      	orrs	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	3b02      	subs	r3, #2
 8002a1a:	061b      	lsls	r3, r3, #24
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	3201      	adds	r2, #1
 8002a28:	4319      	orrs	r1, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a50:	d11d      	bne.n	8002a8e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a5a:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	6811      	ldr	r1, [r2, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	6852      	ldr	r2, [r2, #4]
 8002a66:	0112      	lsls	r2, r2, #4
 8002a68:	4311      	orrs	r1, r2
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	6892      	ldr	r2, [r2, #8]
 8002a6e:	0212      	lsls	r2, r2, #8
 8002a70:	4311      	orrs	r1, r2
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	6992      	ldr	r2, [r2, #24]
 8002a76:	4311      	orrs	r1, r2
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	68d2      	ldr	r2, [r2, #12]
 8002a7c:	0412      	lsls	r2, r2, #16
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	ea43 0102 	orr.w	r1, r3, r2
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002a8c:	e005      	b.n	8002a9a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	cff00000 	.word	0xcff00000

08002aac <__errno>:
 8002aac:	4b01      	ldr	r3, [pc, #4]	; (8002ab4 <__errno+0x8>)
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000020 	.word	0x20000020

08002ab8 <__libc_init_array>:
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	2600      	movs	r6, #0
 8002abc:	4d0c      	ldr	r5, [pc, #48]	; (8002af0 <__libc_init_array+0x38>)
 8002abe:	4c0d      	ldr	r4, [pc, #52]	; (8002af4 <__libc_init_array+0x3c>)
 8002ac0:	1b64      	subs	r4, r4, r5
 8002ac2:	10a4      	asrs	r4, r4, #2
 8002ac4:	42a6      	cmp	r6, r4
 8002ac6:	d109      	bne.n	8002adc <__libc_init_array+0x24>
 8002ac8:	f000 fcaa 	bl	8003420 <_init>
 8002acc:	2600      	movs	r6, #0
 8002ace:	4d0a      	ldr	r5, [pc, #40]	; (8002af8 <__libc_init_array+0x40>)
 8002ad0:	4c0a      	ldr	r4, [pc, #40]	; (8002afc <__libc_init_array+0x44>)
 8002ad2:	1b64      	subs	r4, r4, r5
 8002ad4:	10a4      	asrs	r4, r4, #2
 8002ad6:	42a6      	cmp	r6, r4
 8002ad8:	d105      	bne.n	8002ae6 <__libc_init_array+0x2e>
 8002ada:	bd70      	pop	{r4, r5, r6, pc}
 8002adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae0:	4798      	blx	r3
 8002ae2:	3601      	adds	r6, #1
 8002ae4:	e7ee      	b.n	8002ac4 <__libc_init_array+0xc>
 8002ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aea:	4798      	blx	r3
 8002aec:	3601      	adds	r6, #1
 8002aee:	e7f2      	b.n	8002ad6 <__libc_init_array+0x1e>
 8002af0:	08003bb0 	.word	0x08003bb0
 8002af4:	08003bb0 	.word	0x08003bb0
 8002af8:	08003bb0 	.word	0x08003bb0
 8002afc:	08003bb4 	.word	0x08003bb4

08002b00 <memset>:
 8002b00:	4603      	mov	r3, r0
 8002b02:	4402      	add	r2, r0
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d100      	bne.n	8002b0a <memset+0xa>
 8002b08:	4770      	bx	lr
 8002b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b0e:	e7f9      	b.n	8002b04 <memset+0x4>

08002b10 <siprintf>:
 8002b10:	b40e      	push	{r1, r2, r3}
 8002b12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b16:	b500      	push	{lr}
 8002b18:	b09c      	sub	sp, #112	; 0x70
 8002b1a:	ab1d      	add	r3, sp, #116	; 0x74
 8002b1c:	9002      	str	r0, [sp, #8]
 8002b1e:	9006      	str	r0, [sp, #24]
 8002b20:	9107      	str	r1, [sp, #28]
 8002b22:	9104      	str	r1, [sp, #16]
 8002b24:	4808      	ldr	r0, [pc, #32]	; (8002b48 <siprintf+0x38>)
 8002b26:	4909      	ldr	r1, [pc, #36]	; (8002b4c <siprintf+0x3c>)
 8002b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b2c:	9105      	str	r1, [sp, #20]
 8002b2e:	6800      	ldr	r0, [r0, #0]
 8002b30:	a902      	add	r1, sp, #8
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	f000 f876 	bl	8002c24 <_svfiprintf_r>
 8002b38:	2200      	movs	r2, #0
 8002b3a:	9b02      	ldr	r3, [sp, #8]
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	b01c      	add	sp, #112	; 0x70
 8002b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b44:	b003      	add	sp, #12
 8002b46:	4770      	bx	lr
 8002b48:	20000020 	.word	0x20000020
 8002b4c:	ffff0208 	.word	0xffff0208

08002b50 <strcat>:
 8002b50:	4602      	mov	r2, r0
 8002b52:	b510      	push	{r4, lr}
 8002b54:	7814      	ldrb	r4, [r2, #0]
 8002b56:	4613      	mov	r3, r2
 8002b58:	3201      	adds	r2, #1
 8002b5a:	2c00      	cmp	r4, #0
 8002b5c:	d1fa      	bne.n	8002b54 <strcat+0x4>
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b64:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b68:	2a00      	cmp	r2, #0
 8002b6a:	d1f9      	bne.n	8002b60 <strcat+0x10>
 8002b6c:	bd10      	pop	{r4, pc}

08002b6e <__ssputs_r>:
 8002b6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b72:	688e      	ldr	r6, [r1, #8]
 8002b74:	4682      	mov	sl, r0
 8002b76:	429e      	cmp	r6, r3
 8002b78:	460c      	mov	r4, r1
 8002b7a:	4690      	mov	r8, r2
 8002b7c:	461f      	mov	r7, r3
 8002b7e:	d838      	bhi.n	8002bf2 <__ssputs_r+0x84>
 8002b80:	898a      	ldrh	r2, [r1, #12]
 8002b82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b86:	d032      	beq.n	8002bee <__ssputs_r+0x80>
 8002b88:	6825      	ldr	r5, [r4, #0]
 8002b8a:	6909      	ldr	r1, [r1, #16]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	eba5 0901 	sub.w	r9, r5, r1
 8002b92:	6965      	ldr	r5, [r4, #20]
 8002b94:	444b      	add	r3, r9
 8002b96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b9e:	106d      	asrs	r5, r5, #1
 8002ba0:	429d      	cmp	r5, r3
 8002ba2:	bf38      	it	cc
 8002ba4:	461d      	movcc	r5, r3
 8002ba6:	0553      	lsls	r3, r2, #21
 8002ba8:	d531      	bpl.n	8002c0e <__ssputs_r+0xa0>
 8002baa:	4629      	mov	r1, r5
 8002bac:	f000 fb6e 	bl	800328c <_malloc_r>
 8002bb0:	4606      	mov	r6, r0
 8002bb2:	b950      	cbnz	r0, 8002bca <__ssputs_r+0x5c>
 8002bb4:	230c      	movs	r3, #12
 8002bb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bba:	f8ca 3000 	str.w	r3, [sl]
 8002bbe:	89a3      	ldrh	r3, [r4, #12]
 8002bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc4:	81a3      	strh	r3, [r4, #12]
 8002bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bca:	464a      	mov	r2, r9
 8002bcc:	6921      	ldr	r1, [r4, #16]
 8002bce:	f000 facd 	bl	800316c <memcpy>
 8002bd2:	89a3      	ldrh	r3, [r4, #12]
 8002bd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bdc:	81a3      	strh	r3, [r4, #12]
 8002bde:	6126      	str	r6, [r4, #16]
 8002be0:	444e      	add	r6, r9
 8002be2:	6026      	str	r6, [r4, #0]
 8002be4:	463e      	mov	r6, r7
 8002be6:	6165      	str	r5, [r4, #20]
 8002be8:	eba5 0509 	sub.w	r5, r5, r9
 8002bec:	60a5      	str	r5, [r4, #8]
 8002bee:	42be      	cmp	r6, r7
 8002bf0:	d900      	bls.n	8002bf4 <__ssputs_r+0x86>
 8002bf2:	463e      	mov	r6, r7
 8002bf4:	4632      	mov	r2, r6
 8002bf6:	4641      	mov	r1, r8
 8002bf8:	6820      	ldr	r0, [r4, #0]
 8002bfa:	f000 fac5 	bl	8003188 <memmove>
 8002bfe:	68a3      	ldr	r3, [r4, #8]
 8002c00:	2000      	movs	r0, #0
 8002c02:	1b9b      	subs	r3, r3, r6
 8002c04:	60a3      	str	r3, [r4, #8]
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	4433      	add	r3, r6
 8002c0a:	6023      	str	r3, [r4, #0]
 8002c0c:	e7db      	b.n	8002bc6 <__ssputs_r+0x58>
 8002c0e:	462a      	mov	r2, r5
 8002c10:	f000 fbb0 	bl	8003374 <_realloc_r>
 8002c14:	4606      	mov	r6, r0
 8002c16:	2800      	cmp	r0, #0
 8002c18:	d1e1      	bne.n	8002bde <__ssputs_r+0x70>
 8002c1a:	4650      	mov	r0, sl
 8002c1c:	6921      	ldr	r1, [r4, #16]
 8002c1e:	f000 facd 	bl	80031bc <_free_r>
 8002c22:	e7c7      	b.n	8002bb4 <__ssputs_r+0x46>

08002c24 <_svfiprintf_r>:
 8002c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c28:	4698      	mov	r8, r3
 8002c2a:	898b      	ldrh	r3, [r1, #12]
 8002c2c:	4607      	mov	r7, r0
 8002c2e:	061b      	lsls	r3, r3, #24
 8002c30:	460d      	mov	r5, r1
 8002c32:	4614      	mov	r4, r2
 8002c34:	b09d      	sub	sp, #116	; 0x74
 8002c36:	d50e      	bpl.n	8002c56 <_svfiprintf_r+0x32>
 8002c38:	690b      	ldr	r3, [r1, #16]
 8002c3a:	b963      	cbnz	r3, 8002c56 <_svfiprintf_r+0x32>
 8002c3c:	2140      	movs	r1, #64	; 0x40
 8002c3e:	f000 fb25 	bl	800328c <_malloc_r>
 8002c42:	6028      	str	r0, [r5, #0]
 8002c44:	6128      	str	r0, [r5, #16]
 8002c46:	b920      	cbnz	r0, 8002c52 <_svfiprintf_r+0x2e>
 8002c48:	230c      	movs	r3, #12
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c50:	e0d1      	b.n	8002df6 <_svfiprintf_r+0x1d2>
 8002c52:	2340      	movs	r3, #64	; 0x40
 8002c54:	616b      	str	r3, [r5, #20]
 8002c56:	2300      	movs	r3, #0
 8002c58:	9309      	str	r3, [sp, #36]	; 0x24
 8002c5a:	2320      	movs	r3, #32
 8002c5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c60:	2330      	movs	r3, #48	; 0x30
 8002c62:	f04f 0901 	mov.w	r9, #1
 8002c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002e10 <_svfiprintf_r+0x1ec>
 8002c6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c72:	4623      	mov	r3, r4
 8002c74:	469a      	mov	sl, r3
 8002c76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c7a:	b10a      	cbz	r2, 8002c80 <_svfiprintf_r+0x5c>
 8002c7c:	2a25      	cmp	r2, #37	; 0x25
 8002c7e:	d1f9      	bne.n	8002c74 <_svfiprintf_r+0x50>
 8002c80:	ebba 0b04 	subs.w	fp, sl, r4
 8002c84:	d00b      	beq.n	8002c9e <_svfiprintf_r+0x7a>
 8002c86:	465b      	mov	r3, fp
 8002c88:	4622      	mov	r2, r4
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	4638      	mov	r0, r7
 8002c8e:	f7ff ff6e 	bl	8002b6e <__ssputs_r>
 8002c92:	3001      	adds	r0, #1
 8002c94:	f000 80aa 	beq.w	8002dec <_svfiprintf_r+0x1c8>
 8002c98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c9a:	445a      	add	r2, fp
 8002c9c:	9209      	str	r2, [sp, #36]	; 0x24
 8002c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 80a2 	beq.w	8002dec <_svfiprintf_r+0x1c8>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cb2:	f10a 0a01 	add.w	sl, sl, #1
 8002cb6:	9304      	str	r3, [sp, #16]
 8002cb8:	9307      	str	r3, [sp, #28]
 8002cba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cbe:	931a      	str	r3, [sp, #104]	; 0x68
 8002cc0:	4654      	mov	r4, sl
 8002cc2:	2205      	movs	r2, #5
 8002cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cc8:	4851      	ldr	r0, [pc, #324]	; (8002e10 <_svfiprintf_r+0x1ec>)
 8002cca:	f000 fa41 	bl	8003150 <memchr>
 8002cce:	9a04      	ldr	r2, [sp, #16]
 8002cd0:	b9d8      	cbnz	r0, 8002d0a <_svfiprintf_r+0xe6>
 8002cd2:	06d0      	lsls	r0, r2, #27
 8002cd4:	bf44      	itt	mi
 8002cd6:	2320      	movmi	r3, #32
 8002cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cdc:	0711      	lsls	r1, r2, #28
 8002cde:	bf44      	itt	mi
 8002ce0:	232b      	movmi	r3, #43	; 0x2b
 8002ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8002cea:	2b2a      	cmp	r3, #42	; 0x2a
 8002cec:	d015      	beq.n	8002d1a <_svfiprintf_r+0xf6>
 8002cee:	4654      	mov	r4, sl
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f04f 0c0a 	mov.w	ip, #10
 8002cf6:	9a07      	ldr	r2, [sp, #28]
 8002cf8:	4621      	mov	r1, r4
 8002cfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cfe:	3b30      	subs	r3, #48	; 0x30
 8002d00:	2b09      	cmp	r3, #9
 8002d02:	d94e      	bls.n	8002da2 <_svfiprintf_r+0x17e>
 8002d04:	b1b0      	cbz	r0, 8002d34 <_svfiprintf_r+0x110>
 8002d06:	9207      	str	r2, [sp, #28]
 8002d08:	e014      	b.n	8002d34 <_svfiprintf_r+0x110>
 8002d0a:	eba0 0308 	sub.w	r3, r0, r8
 8002d0e:	fa09 f303 	lsl.w	r3, r9, r3
 8002d12:	4313      	orrs	r3, r2
 8002d14:	46a2      	mov	sl, r4
 8002d16:	9304      	str	r3, [sp, #16]
 8002d18:	e7d2      	b.n	8002cc0 <_svfiprintf_r+0x9c>
 8002d1a:	9b03      	ldr	r3, [sp, #12]
 8002d1c:	1d19      	adds	r1, r3, #4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	9103      	str	r1, [sp, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bfbb      	ittet	lt
 8002d26:	425b      	neglt	r3, r3
 8002d28:	f042 0202 	orrlt.w	r2, r2, #2
 8002d2c:	9307      	strge	r3, [sp, #28]
 8002d2e:	9307      	strlt	r3, [sp, #28]
 8002d30:	bfb8      	it	lt
 8002d32:	9204      	strlt	r2, [sp, #16]
 8002d34:	7823      	ldrb	r3, [r4, #0]
 8002d36:	2b2e      	cmp	r3, #46	; 0x2e
 8002d38:	d10c      	bne.n	8002d54 <_svfiprintf_r+0x130>
 8002d3a:	7863      	ldrb	r3, [r4, #1]
 8002d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d3e:	d135      	bne.n	8002dac <_svfiprintf_r+0x188>
 8002d40:	9b03      	ldr	r3, [sp, #12]
 8002d42:	3402      	adds	r4, #2
 8002d44:	1d1a      	adds	r2, r3, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	9203      	str	r2, [sp, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	bfb8      	it	lt
 8002d4e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d52:	9305      	str	r3, [sp, #20]
 8002d54:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002e14 <_svfiprintf_r+0x1f0>
 8002d58:	2203      	movs	r2, #3
 8002d5a:	4650      	mov	r0, sl
 8002d5c:	7821      	ldrb	r1, [r4, #0]
 8002d5e:	f000 f9f7 	bl	8003150 <memchr>
 8002d62:	b140      	cbz	r0, 8002d76 <_svfiprintf_r+0x152>
 8002d64:	2340      	movs	r3, #64	; 0x40
 8002d66:	eba0 000a 	sub.w	r0, r0, sl
 8002d6a:	fa03 f000 	lsl.w	r0, r3, r0
 8002d6e:	9b04      	ldr	r3, [sp, #16]
 8002d70:	3401      	adds	r4, #1
 8002d72:	4303      	orrs	r3, r0
 8002d74:	9304      	str	r3, [sp, #16]
 8002d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d7a:	2206      	movs	r2, #6
 8002d7c:	4826      	ldr	r0, [pc, #152]	; (8002e18 <_svfiprintf_r+0x1f4>)
 8002d7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d82:	f000 f9e5 	bl	8003150 <memchr>
 8002d86:	2800      	cmp	r0, #0
 8002d88:	d038      	beq.n	8002dfc <_svfiprintf_r+0x1d8>
 8002d8a:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <_svfiprintf_r+0x1f8>)
 8002d8c:	bb1b      	cbnz	r3, 8002dd6 <_svfiprintf_r+0x1b2>
 8002d8e:	9b03      	ldr	r3, [sp, #12]
 8002d90:	3307      	adds	r3, #7
 8002d92:	f023 0307 	bic.w	r3, r3, #7
 8002d96:	3308      	adds	r3, #8
 8002d98:	9303      	str	r3, [sp, #12]
 8002d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d9c:	4433      	add	r3, r6
 8002d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8002da0:	e767      	b.n	8002c72 <_svfiprintf_r+0x4e>
 8002da2:	460c      	mov	r4, r1
 8002da4:	2001      	movs	r0, #1
 8002da6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002daa:	e7a5      	b.n	8002cf8 <_svfiprintf_r+0xd4>
 8002dac:	2300      	movs	r3, #0
 8002dae:	f04f 0c0a 	mov.w	ip, #10
 8002db2:	4619      	mov	r1, r3
 8002db4:	3401      	adds	r4, #1
 8002db6:	9305      	str	r3, [sp, #20]
 8002db8:	4620      	mov	r0, r4
 8002dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dbe:	3a30      	subs	r2, #48	; 0x30
 8002dc0:	2a09      	cmp	r2, #9
 8002dc2:	d903      	bls.n	8002dcc <_svfiprintf_r+0x1a8>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0c5      	beq.n	8002d54 <_svfiprintf_r+0x130>
 8002dc8:	9105      	str	r1, [sp, #20]
 8002dca:	e7c3      	b.n	8002d54 <_svfiprintf_r+0x130>
 8002dcc:	4604      	mov	r4, r0
 8002dce:	2301      	movs	r3, #1
 8002dd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002dd4:	e7f0      	b.n	8002db8 <_svfiprintf_r+0x194>
 8002dd6:	ab03      	add	r3, sp, #12
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	462a      	mov	r2, r5
 8002ddc:	4638      	mov	r0, r7
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <_svfiprintf_r+0x1fc>)
 8002de0:	a904      	add	r1, sp, #16
 8002de2:	f3af 8000 	nop.w
 8002de6:	1c42      	adds	r2, r0, #1
 8002de8:	4606      	mov	r6, r0
 8002dea:	d1d6      	bne.n	8002d9a <_svfiprintf_r+0x176>
 8002dec:	89ab      	ldrh	r3, [r5, #12]
 8002dee:	065b      	lsls	r3, r3, #25
 8002df0:	f53f af2c 	bmi.w	8002c4c <_svfiprintf_r+0x28>
 8002df4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002df6:	b01d      	add	sp, #116	; 0x74
 8002df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dfc:	ab03      	add	r3, sp, #12
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	462a      	mov	r2, r5
 8002e02:	4638      	mov	r0, r7
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <_svfiprintf_r+0x1fc>)
 8002e06:	a904      	add	r1, sp, #16
 8002e08:	f000 f87c 	bl	8002f04 <_printf_i>
 8002e0c:	e7eb      	b.n	8002de6 <_svfiprintf_r+0x1c2>
 8002e0e:	bf00      	nop
 8002e10:	08003b7a 	.word	0x08003b7a
 8002e14:	08003b80 	.word	0x08003b80
 8002e18:	08003b84 	.word	0x08003b84
 8002e1c:	00000000 	.word	0x00000000
 8002e20:	08002b6f 	.word	0x08002b6f

08002e24 <_printf_common>:
 8002e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e28:	4616      	mov	r6, r2
 8002e2a:	4699      	mov	r9, r3
 8002e2c:	688a      	ldr	r2, [r1, #8]
 8002e2e:	690b      	ldr	r3, [r1, #16]
 8002e30:	4607      	mov	r7, r0
 8002e32:	4293      	cmp	r3, r2
 8002e34:	bfb8      	it	lt
 8002e36:	4613      	movlt	r3, r2
 8002e38:	6033      	str	r3, [r6, #0]
 8002e3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e3e:	460c      	mov	r4, r1
 8002e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e44:	b10a      	cbz	r2, 8002e4a <_printf_common+0x26>
 8002e46:	3301      	adds	r3, #1
 8002e48:	6033      	str	r3, [r6, #0]
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	0699      	lsls	r1, r3, #26
 8002e4e:	bf42      	ittt	mi
 8002e50:	6833      	ldrmi	r3, [r6, #0]
 8002e52:	3302      	addmi	r3, #2
 8002e54:	6033      	strmi	r3, [r6, #0]
 8002e56:	6825      	ldr	r5, [r4, #0]
 8002e58:	f015 0506 	ands.w	r5, r5, #6
 8002e5c:	d106      	bne.n	8002e6c <_printf_common+0x48>
 8002e5e:	f104 0a19 	add.w	sl, r4, #25
 8002e62:	68e3      	ldr	r3, [r4, #12]
 8002e64:	6832      	ldr	r2, [r6, #0]
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	42ab      	cmp	r3, r5
 8002e6a:	dc28      	bgt.n	8002ebe <_printf_common+0x9a>
 8002e6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e70:	1e13      	subs	r3, r2, #0
 8002e72:	6822      	ldr	r2, [r4, #0]
 8002e74:	bf18      	it	ne
 8002e76:	2301      	movne	r3, #1
 8002e78:	0692      	lsls	r2, r2, #26
 8002e7a:	d42d      	bmi.n	8002ed8 <_printf_common+0xb4>
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	4638      	mov	r0, r7
 8002e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e84:	47c0      	blx	r8
 8002e86:	3001      	adds	r0, #1
 8002e88:	d020      	beq.n	8002ecc <_printf_common+0xa8>
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	68e5      	ldr	r5, [r4, #12]
 8002e8e:	f003 0306 	and.w	r3, r3, #6
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	bf18      	it	ne
 8002e96:	2500      	movne	r5, #0
 8002e98:	6832      	ldr	r2, [r6, #0]
 8002e9a:	f04f 0600 	mov.w	r6, #0
 8002e9e:	68a3      	ldr	r3, [r4, #8]
 8002ea0:	bf08      	it	eq
 8002ea2:	1aad      	subeq	r5, r5, r2
 8002ea4:	6922      	ldr	r2, [r4, #16]
 8002ea6:	bf08      	it	eq
 8002ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002eac:	4293      	cmp	r3, r2
 8002eae:	bfc4      	itt	gt
 8002eb0:	1a9b      	subgt	r3, r3, r2
 8002eb2:	18ed      	addgt	r5, r5, r3
 8002eb4:	341a      	adds	r4, #26
 8002eb6:	42b5      	cmp	r5, r6
 8002eb8:	d11a      	bne.n	8002ef0 <_printf_common+0xcc>
 8002eba:	2000      	movs	r0, #0
 8002ebc:	e008      	b.n	8002ed0 <_printf_common+0xac>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	4652      	mov	r2, sl
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	4638      	mov	r0, r7
 8002ec6:	47c0      	blx	r8
 8002ec8:	3001      	adds	r0, #1
 8002eca:	d103      	bne.n	8002ed4 <_printf_common+0xb0>
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ed4:	3501      	adds	r5, #1
 8002ed6:	e7c4      	b.n	8002e62 <_printf_common+0x3e>
 8002ed8:	2030      	movs	r0, #48	; 0x30
 8002eda:	18e1      	adds	r1, r4, r3
 8002edc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ee6:	4422      	add	r2, r4
 8002ee8:	3302      	adds	r3, #2
 8002eea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002eee:	e7c5      	b.n	8002e7c <_printf_common+0x58>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	4622      	mov	r2, r4
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	4638      	mov	r0, r7
 8002ef8:	47c0      	blx	r8
 8002efa:	3001      	adds	r0, #1
 8002efc:	d0e6      	beq.n	8002ecc <_printf_common+0xa8>
 8002efe:	3601      	adds	r6, #1
 8002f00:	e7d9      	b.n	8002eb6 <_printf_common+0x92>
	...

08002f04 <_printf_i>:
 8002f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f08:	7e0f      	ldrb	r7, [r1, #24]
 8002f0a:	4691      	mov	r9, r2
 8002f0c:	2f78      	cmp	r7, #120	; 0x78
 8002f0e:	4680      	mov	r8, r0
 8002f10:	460c      	mov	r4, r1
 8002f12:	469a      	mov	sl, r3
 8002f14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f1a:	d807      	bhi.n	8002f2c <_printf_i+0x28>
 8002f1c:	2f62      	cmp	r7, #98	; 0x62
 8002f1e:	d80a      	bhi.n	8002f36 <_printf_i+0x32>
 8002f20:	2f00      	cmp	r7, #0
 8002f22:	f000 80d9 	beq.w	80030d8 <_printf_i+0x1d4>
 8002f26:	2f58      	cmp	r7, #88	; 0x58
 8002f28:	f000 80a4 	beq.w	8003074 <_printf_i+0x170>
 8002f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f34:	e03a      	b.n	8002fac <_printf_i+0xa8>
 8002f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f3a:	2b15      	cmp	r3, #21
 8002f3c:	d8f6      	bhi.n	8002f2c <_printf_i+0x28>
 8002f3e:	a101      	add	r1, pc, #4	; (adr r1, 8002f44 <_printf_i+0x40>)
 8002f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f44:	08002f9d 	.word	0x08002f9d
 8002f48:	08002fb1 	.word	0x08002fb1
 8002f4c:	08002f2d 	.word	0x08002f2d
 8002f50:	08002f2d 	.word	0x08002f2d
 8002f54:	08002f2d 	.word	0x08002f2d
 8002f58:	08002f2d 	.word	0x08002f2d
 8002f5c:	08002fb1 	.word	0x08002fb1
 8002f60:	08002f2d 	.word	0x08002f2d
 8002f64:	08002f2d 	.word	0x08002f2d
 8002f68:	08002f2d 	.word	0x08002f2d
 8002f6c:	08002f2d 	.word	0x08002f2d
 8002f70:	080030bf 	.word	0x080030bf
 8002f74:	08002fe1 	.word	0x08002fe1
 8002f78:	080030a1 	.word	0x080030a1
 8002f7c:	08002f2d 	.word	0x08002f2d
 8002f80:	08002f2d 	.word	0x08002f2d
 8002f84:	080030e1 	.word	0x080030e1
 8002f88:	08002f2d 	.word	0x08002f2d
 8002f8c:	08002fe1 	.word	0x08002fe1
 8002f90:	08002f2d 	.word	0x08002f2d
 8002f94:	08002f2d 	.word	0x08002f2d
 8002f98:	080030a9 	.word	0x080030a9
 8002f9c:	682b      	ldr	r3, [r5, #0]
 8002f9e:	1d1a      	adds	r2, r3, #4
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	602a      	str	r2, [r5, #0]
 8002fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0a4      	b.n	80030fa <_printf_i+0x1f6>
 8002fb0:	6820      	ldr	r0, [r4, #0]
 8002fb2:	6829      	ldr	r1, [r5, #0]
 8002fb4:	0606      	lsls	r6, r0, #24
 8002fb6:	f101 0304 	add.w	r3, r1, #4
 8002fba:	d50a      	bpl.n	8002fd2 <_printf_i+0xce>
 8002fbc:	680e      	ldr	r6, [r1, #0]
 8002fbe:	602b      	str	r3, [r5, #0]
 8002fc0:	2e00      	cmp	r6, #0
 8002fc2:	da03      	bge.n	8002fcc <_printf_i+0xc8>
 8002fc4:	232d      	movs	r3, #45	; 0x2d
 8002fc6:	4276      	negs	r6, r6
 8002fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fcc:	230a      	movs	r3, #10
 8002fce:	485e      	ldr	r0, [pc, #376]	; (8003148 <_printf_i+0x244>)
 8002fd0:	e019      	b.n	8003006 <_printf_i+0x102>
 8002fd2:	680e      	ldr	r6, [r1, #0]
 8002fd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002fd8:	602b      	str	r3, [r5, #0]
 8002fda:	bf18      	it	ne
 8002fdc:	b236      	sxthne	r6, r6
 8002fde:	e7ef      	b.n	8002fc0 <_printf_i+0xbc>
 8002fe0:	682b      	ldr	r3, [r5, #0]
 8002fe2:	6820      	ldr	r0, [r4, #0]
 8002fe4:	1d19      	adds	r1, r3, #4
 8002fe6:	6029      	str	r1, [r5, #0]
 8002fe8:	0601      	lsls	r1, r0, #24
 8002fea:	d501      	bpl.n	8002ff0 <_printf_i+0xec>
 8002fec:	681e      	ldr	r6, [r3, #0]
 8002fee:	e002      	b.n	8002ff6 <_printf_i+0xf2>
 8002ff0:	0646      	lsls	r6, r0, #25
 8002ff2:	d5fb      	bpl.n	8002fec <_printf_i+0xe8>
 8002ff4:	881e      	ldrh	r6, [r3, #0]
 8002ff6:	2f6f      	cmp	r7, #111	; 0x6f
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2308      	moveq	r3, #8
 8002ffc:	230a      	movne	r3, #10
 8002ffe:	4852      	ldr	r0, [pc, #328]	; (8003148 <_printf_i+0x244>)
 8003000:	2100      	movs	r1, #0
 8003002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003006:	6865      	ldr	r5, [r4, #4]
 8003008:	2d00      	cmp	r5, #0
 800300a:	bfa8      	it	ge
 800300c:	6821      	ldrge	r1, [r4, #0]
 800300e:	60a5      	str	r5, [r4, #8]
 8003010:	bfa4      	itt	ge
 8003012:	f021 0104 	bicge.w	r1, r1, #4
 8003016:	6021      	strge	r1, [r4, #0]
 8003018:	b90e      	cbnz	r6, 800301e <_printf_i+0x11a>
 800301a:	2d00      	cmp	r5, #0
 800301c:	d04d      	beq.n	80030ba <_printf_i+0x1b6>
 800301e:	4615      	mov	r5, r2
 8003020:	fbb6 f1f3 	udiv	r1, r6, r3
 8003024:	fb03 6711 	mls	r7, r3, r1, r6
 8003028:	5dc7      	ldrb	r7, [r0, r7]
 800302a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800302e:	4637      	mov	r7, r6
 8003030:	42bb      	cmp	r3, r7
 8003032:	460e      	mov	r6, r1
 8003034:	d9f4      	bls.n	8003020 <_printf_i+0x11c>
 8003036:	2b08      	cmp	r3, #8
 8003038:	d10b      	bne.n	8003052 <_printf_i+0x14e>
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	07de      	lsls	r6, r3, #31
 800303e:	d508      	bpl.n	8003052 <_printf_i+0x14e>
 8003040:	6923      	ldr	r3, [r4, #16]
 8003042:	6861      	ldr	r1, [r4, #4]
 8003044:	4299      	cmp	r1, r3
 8003046:	bfde      	ittt	le
 8003048:	2330      	movle	r3, #48	; 0x30
 800304a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800304e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003052:	1b52      	subs	r2, r2, r5
 8003054:	6122      	str	r2, [r4, #16]
 8003056:	464b      	mov	r3, r9
 8003058:	4621      	mov	r1, r4
 800305a:	4640      	mov	r0, r8
 800305c:	f8cd a000 	str.w	sl, [sp]
 8003060:	aa03      	add	r2, sp, #12
 8003062:	f7ff fedf 	bl	8002e24 <_printf_common>
 8003066:	3001      	adds	r0, #1
 8003068:	d14c      	bne.n	8003104 <_printf_i+0x200>
 800306a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800306e:	b004      	add	sp, #16
 8003070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003074:	4834      	ldr	r0, [pc, #208]	; (8003148 <_printf_i+0x244>)
 8003076:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800307a:	6829      	ldr	r1, [r5, #0]
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003082:	6029      	str	r1, [r5, #0]
 8003084:	061d      	lsls	r5, r3, #24
 8003086:	d514      	bpl.n	80030b2 <_printf_i+0x1ae>
 8003088:	07df      	lsls	r7, r3, #31
 800308a:	bf44      	itt	mi
 800308c:	f043 0320 	orrmi.w	r3, r3, #32
 8003090:	6023      	strmi	r3, [r4, #0]
 8003092:	b91e      	cbnz	r6, 800309c <_printf_i+0x198>
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	f023 0320 	bic.w	r3, r3, #32
 800309a:	6023      	str	r3, [r4, #0]
 800309c:	2310      	movs	r3, #16
 800309e:	e7af      	b.n	8003000 <_printf_i+0xfc>
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	f043 0320 	orr.w	r3, r3, #32
 80030a6:	6023      	str	r3, [r4, #0]
 80030a8:	2378      	movs	r3, #120	; 0x78
 80030aa:	4828      	ldr	r0, [pc, #160]	; (800314c <_printf_i+0x248>)
 80030ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030b0:	e7e3      	b.n	800307a <_printf_i+0x176>
 80030b2:	0659      	lsls	r1, r3, #25
 80030b4:	bf48      	it	mi
 80030b6:	b2b6      	uxthmi	r6, r6
 80030b8:	e7e6      	b.n	8003088 <_printf_i+0x184>
 80030ba:	4615      	mov	r5, r2
 80030bc:	e7bb      	b.n	8003036 <_printf_i+0x132>
 80030be:	682b      	ldr	r3, [r5, #0]
 80030c0:	6826      	ldr	r6, [r4, #0]
 80030c2:	1d18      	adds	r0, r3, #4
 80030c4:	6961      	ldr	r1, [r4, #20]
 80030c6:	6028      	str	r0, [r5, #0]
 80030c8:	0635      	lsls	r5, r6, #24
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	d501      	bpl.n	80030d2 <_printf_i+0x1ce>
 80030ce:	6019      	str	r1, [r3, #0]
 80030d0:	e002      	b.n	80030d8 <_printf_i+0x1d4>
 80030d2:	0670      	lsls	r0, r6, #25
 80030d4:	d5fb      	bpl.n	80030ce <_printf_i+0x1ca>
 80030d6:	8019      	strh	r1, [r3, #0]
 80030d8:	2300      	movs	r3, #0
 80030da:	4615      	mov	r5, r2
 80030dc:	6123      	str	r3, [r4, #16]
 80030de:	e7ba      	b.n	8003056 <_printf_i+0x152>
 80030e0:	682b      	ldr	r3, [r5, #0]
 80030e2:	2100      	movs	r1, #0
 80030e4:	1d1a      	adds	r2, r3, #4
 80030e6:	602a      	str	r2, [r5, #0]
 80030e8:	681d      	ldr	r5, [r3, #0]
 80030ea:	6862      	ldr	r2, [r4, #4]
 80030ec:	4628      	mov	r0, r5
 80030ee:	f000 f82f 	bl	8003150 <memchr>
 80030f2:	b108      	cbz	r0, 80030f8 <_printf_i+0x1f4>
 80030f4:	1b40      	subs	r0, r0, r5
 80030f6:	6060      	str	r0, [r4, #4]
 80030f8:	6863      	ldr	r3, [r4, #4]
 80030fa:	6123      	str	r3, [r4, #16]
 80030fc:	2300      	movs	r3, #0
 80030fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003102:	e7a8      	b.n	8003056 <_printf_i+0x152>
 8003104:	462a      	mov	r2, r5
 8003106:	4649      	mov	r1, r9
 8003108:	4640      	mov	r0, r8
 800310a:	6923      	ldr	r3, [r4, #16]
 800310c:	47d0      	blx	sl
 800310e:	3001      	adds	r0, #1
 8003110:	d0ab      	beq.n	800306a <_printf_i+0x166>
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	079b      	lsls	r3, r3, #30
 8003116:	d413      	bmi.n	8003140 <_printf_i+0x23c>
 8003118:	68e0      	ldr	r0, [r4, #12]
 800311a:	9b03      	ldr	r3, [sp, #12]
 800311c:	4298      	cmp	r0, r3
 800311e:	bfb8      	it	lt
 8003120:	4618      	movlt	r0, r3
 8003122:	e7a4      	b.n	800306e <_printf_i+0x16a>
 8003124:	2301      	movs	r3, #1
 8003126:	4632      	mov	r2, r6
 8003128:	4649      	mov	r1, r9
 800312a:	4640      	mov	r0, r8
 800312c:	47d0      	blx	sl
 800312e:	3001      	adds	r0, #1
 8003130:	d09b      	beq.n	800306a <_printf_i+0x166>
 8003132:	3501      	adds	r5, #1
 8003134:	68e3      	ldr	r3, [r4, #12]
 8003136:	9903      	ldr	r1, [sp, #12]
 8003138:	1a5b      	subs	r3, r3, r1
 800313a:	42ab      	cmp	r3, r5
 800313c:	dcf2      	bgt.n	8003124 <_printf_i+0x220>
 800313e:	e7eb      	b.n	8003118 <_printf_i+0x214>
 8003140:	2500      	movs	r5, #0
 8003142:	f104 0619 	add.w	r6, r4, #25
 8003146:	e7f5      	b.n	8003134 <_printf_i+0x230>
 8003148:	08003b8b 	.word	0x08003b8b
 800314c:	08003b9c 	.word	0x08003b9c

08003150 <memchr>:
 8003150:	4603      	mov	r3, r0
 8003152:	b510      	push	{r4, lr}
 8003154:	b2c9      	uxtb	r1, r1
 8003156:	4402      	add	r2, r0
 8003158:	4293      	cmp	r3, r2
 800315a:	4618      	mov	r0, r3
 800315c:	d101      	bne.n	8003162 <memchr+0x12>
 800315e:	2000      	movs	r0, #0
 8003160:	e003      	b.n	800316a <memchr+0x1a>
 8003162:	7804      	ldrb	r4, [r0, #0]
 8003164:	3301      	adds	r3, #1
 8003166:	428c      	cmp	r4, r1
 8003168:	d1f6      	bne.n	8003158 <memchr+0x8>
 800316a:	bd10      	pop	{r4, pc}

0800316c <memcpy>:
 800316c:	440a      	add	r2, r1
 800316e:	4291      	cmp	r1, r2
 8003170:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003174:	d100      	bne.n	8003178 <memcpy+0xc>
 8003176:	4770      	bx	lr
 8003178:	b510      	push	{r4, lr}
 800317a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800317e:	4291      	cmp	r1, r2
 8003180:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003184:	d1f9      	bne.n	800317a <memcpy+0xe>
 8003186:	bd10      	pop	{r4, pc}

08003188 <memmove>:
 8003188:	4288      	cmp	r0, r1
 800318a:	b510      	push	{r4, lr}
 800318c:	eb01 0402 	add.w	r4, r1, r2
 8003190:	d902      	bls.n	8003198 <memmove+0x10>
 8003192:	4284      	cmp	r4, r0
 8003194:	4623      	mov	r3, r4
 8003196:	d807      	bhi.n	80031a8 <memmove+0x20>
 8003198:	1e43      	subs	r3, r0, #1
 800319a:	42a1      	cmp	r1, r4
 800319c:	d008      	beq.n	80031b0 <memmove+0x28>
 800319e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031a6:	e7f8      	b.n	800319a <memmove+0x12>
 80031a8:	4601      	mov	r1, r0
 80031aa:	4402      	add	r2, r0
 80031ac:	428a      	cmp	r2, r1
 80031ae:	d100      	bne.n	80031b2 <memmove+0x2a>
 80031b0:	bd10      	pop	{r4, pc}
 80031b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031ba:	e7f7      	b.n	80031ac <memmove+0x24>

080031bc <_free_r>:
 80031bc:	b538      	push	{r3, r4, r5, lr}
 80031be:	4605      	mov	r5, r0
 80031c0:	2900      	cmp	r1, #0
 80031c2:	d040      	beq.n	8003246 <_free_r+0x8a>
 80031c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031c8:	1f0c      	subs	r4, r1, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bfb8      	it	lt
 80031ce:	18e4      	addlt	r4, r4, r3
 80031d0:	f000 f910 	bl	80033f4 <__malloc_lock>
 80031d4:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <_free_r+0x8c>)
 80031d6:	6813      	ldr	r3, [r2, #0]
 80031d8:	b933      	cbnz	r3, 80031e8 <_free_r+0x2c>
 80031da:	6063      	str	r3, [r4, #4]
 80031dc:	6014      	str	r4, [r2, #0]
 80031de:	4628      	mov	r0, r5
 80031e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031e4:	f000 b90c 	b.w	8003400 <__malloc_unlock>
 80031e8:	42a3      	cmp	r3, r4
 80031ea:	d908      	bls.n	80031fe <_free_r+0x42>
 80031ec:	6820      	ldr	r0, [r4, #0]
 80031ee:	1821      	adds	r1, r4, r0
 80031f0:	428b      	cmp	r3, r1
 80031f2:	bf01      	itttt	eq
 80031f4:	6819      	ldreq	r1, [r3, #0]
 80031f6:	685b      	ldreq	r3, [r3, #4]
 80031f8:	1809      	addeq	r1, r1, r0
 80031fa:	6021      	streq	r1, [r4, #0]
 80031fc:	e7ed      	b.n	80031da <_free_r+0x1e>
 80031fe:	461a      	mov	r2, r3
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	b10b      	cbz	r3, 8003208 <_free_r+0x4c>
 8003204:	42a3      	cmp	r3, r4
 8003206:	d9fa      	bls.n	80031fe <_free_r+0x42>
 8003208:	6811      	ldr	r1, [r2, #0]
 800320a:	1850      	adds	r0, r2, r1
 800320c:	42a0      	cmp	r0, r4
 800320e:	d10b      	bne.n	8003228 <_free_r+0x6c>
 8003210:	6820      	ldr	r0, [r4, #0]
 8003212:	4401      	add	r1, r0
 8003214:	1850      	adds	r0, r2, r1
 8003216:	4283      	cmp	r3, r0
 8003218:	6011      	str	r1, [r2, #0]
 800321a:	d1e0      	bne.n	80031de <_free_r+0x22>
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4401      	add	r1, r0
 8003222:	6011      	str	r1, [r2, #0]
 8003224:	6053      	str	r3, [r2, #4]
 8003226:	e7da      	b.n	80031de <_free_r+0x22>
 8003228:	d902      	bls.n	8003230 <_free_r+0x74>
 800322a:	230c      	movs	r3, #12
 800322c:	602b      	str	r3, [r5, #0]
 800322e:	e7d6      	b.n	80031de <_free_r+0x22>
 8003230:	6820      	ldr	r0, [r4, #0]
 8003232:	1821      	adds	r1, r4, r0
 8003234:	428b      	cmp	r3, r1
 8003236:	bf01      	itttt	eq
 8003238:	6819      	ldreq	r1, [r3, #0]
 800323a:	685b      	ldreq	r3, [r3, #4]
 800323c:	1809      	addeq	r1, r1, r0
 800323e:	6021      	streq	r1, [r4, #0]
 8003240:	6063      	str	r3, [r4, #4]
 8003242:	6054      	str	r4, [r2, #4]
 8003244:	e7cb      	b.n	80031de <_free_r+0x22>
 8003246:	bd38      	pop	{r3, r4, r5, pc}
 8003248:	20000324 	.word	0x20000324

0800324c <sbrk_aligned>:
 800324c:	b570      	push	{r4, r5, r6, lr}
 800324e:	4e0e      	ldr	r6, [pc, #56]	; (8003288 <sbrk_aligned+0x3c>)
 8003250:	460c      	mov	r4, r1
 8003252:	6831      	ldr	r1, [r6, #0]
 8003254:	4605      	mov	r5, r0
 8003256:	b911      	cbnz	r1, 800325e <sbrk_aligned+0x12>
 8003258:	f000 f8bc 	bl	80033d4 <_sbrk_r>
 800325c:	6030      	str	r0, [r6, #0]
 800325e:	4621      	mov	r1, r4
 8003260:	4628      	mov	r0, r5
 8003262:	f000 f8b7 	bl	80033d4 <_sbrk_r>
 8003266:	1c43      	adds	r3, r0, #1
 8003268:	d00a      	beq.n	8003280 <sbrk_aligned+0x34>
 800326a:	1cc4      	adds	r4, r0, #3
 800326c:	f024 0403 	bic.w	r4, r4, #3
 8003270:	42a0      	cmp	r0, r4
 8003272:	d007      	beq.n	8003284 <sbrk_aligned+0x38>
 8003274:	1a21      	subs	r1, r4, r0
 8003276:	4628      	mov	r0, r5
 8003278:	f000 f8ac 	bl	80033d4 <_sbrk_r>
 800327c:	3001      	adds	r0, #1
 800327e:	d101      	bne.n	8003284 <sbrk_aligned+0x38>
 8003280:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003284:	4620      	mov	r0, r4
 8003286:	bd70      	pop	{r4, r5, r6, pc}
 8003288:	20000328 	.word	0x20000328

0800328c <_malloc_r>:
 800328c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003290:	1ccd      	adds	r5, r1, #3
 8003292:	f025 0503 	bic.w	r5, r5, #3
 8003296:	3508      	adds	r5, #8
 8003298:	2d0c      	cmp	r5, #12
 800329a:	bf38      	it	cc
 800329c:	250c      	movcc	r5, #12
 800329e:	2d00      	cmp	r5, #0
 80032a0:	4607      	mov	r7, r0
 80032a2:	db01      	blt.n	80032a8 <_malloc_r+0x1c>
 80032a4:	42a9      	cmp	r1, r5
 80032a6:	d905      	bls.n	80032b4 <_malloc_r+0x28>
 80032a8:	230c      	movs	r3, #12
 80032aa:	2600      	movs	r6, #0
 80032ac:	603b      	str	r3, [r7, #0]
 80032ae:	4630      	mov	r0, r6
 80032b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032b4:	4e2e      	ldr	r6, [pc, #184]	; (8003370 <_malloc_r+0xe4>)
 80032b6:	f000 f89d 	bl	80033f4 <__malloc_lock>
 80032ba:	6833      	ldr	r3, [r6, #0]
 80032bc:	461c      	mov	r4, r3
 80032be:	bb34      	cbnz	r4, 800330e <_malloc_r+0x82>
 80032c0:	4629      	mov	r1, r5
 80032c2:	4638      	mov	r0, r7
 80032c4:	f7ff ffc2 	bl	800324c <sbrk_aligned>
 80032c8:	1c43      	adds	r3, r0, #1
 80032ca:	4604      	mov	r4, r0
 80032cc:	d14d      	bne.n	800336a <_malloc_r+0xde>
 80032ce:	6834      	ldr	r4, [r6, #0]
 80032d0:	4626      	mov	r6, r4
 80032d2:	2e00      	cmp	r6, #0
 80032d4:	d140      	bne.n	8003358 <_malloc_r+0xcc>
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	4631      	mov	r1, r6
 80032da:	4638      	mov	r0, r7
 80032dc:	eb04 0803 	add.w	r8, r4, r3
 80032e0:	f000 f878 	bl	80033d4 <_sbrk_r>
 80032e4:	4580      	cmp	r8, r0
 80032e6:	d13a      	bne.n	800335e <_malloc_r+0xd2>
 80032e8:	6821      	ldr	r1, [r4, #0]
 80032ea:	3503      	adds	r5, #3
 80032ec:	1a6d      	subs	r5, r5, r1
 80032ee:	f025 0503 	bic.w	r5, r5, #3
 80032f2:	3508      	adds	r5, #8
 80032f4:	2d0c      	cmp	r5, #12
 80032f6:	bf38      	it	cc
 80032f8:	250c      	movcc	r5, #12
 80032fa:	4638      	mov	r0, r7
 80032fc:	4629      	mov	r1, r5
 80032fe:	f7ff ffa5 	bl	800324c <sbrk_aligned>
 8003302:	3001      	adds	r0, #1
 8003304:	d02b      	beq.n	800335e <_malloc_r+0xd2>
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	442b      	add	r3, r5
 800330a:	6023      	str	r3, [r4, #0]
 800330c:	e00e      	b.n	800332c <_malloc_r+0xa0>
 800330e:	6822      	ldr	r2, [r4, #0]
 8003310:	1b52      	subs	r2, r2, r5
 8003312:	d41e      	bmi.n	8003352 <_malloc_r+0xc6>
 8003314:	2a0b      	cmp	r2, #11
 8003316:	d916      	bls.n	8003346 <_malloc_r+0xba>
 8003318:	1961      	adds	r1, r4, r5
 800331a:	42a3      	cmp	r3, r4
 800331c:	6025      	str	r5, [r4, #0]
 800331e:	bf18      	it	ne
 8003320:	6059      	strne	r1, [r3, #4]
 8003322:	6863      	ldr	r3, [r4, #4]
 8003324:	bf08      	it	eq
 8003326:	6031      	streq	r1, [r6, #0]
 8003328:	5162      	str	r2, [r4, r5]
 800332a:	604b      	str	r3, [r1, #4]
 800332c:	4638      	mov	r0, r7
 800332e:	f104 060b 	add.w	r6, r4, #11
 8003332:	f000 f865 	bl	8003400 <__malloc_unlock>
 8003336:	f026 0607 	bic.w	r6, r6, #7
 800333a:	1d23      	adds	r3, r4, #4
 800333c:	1af2      	subs	r2, r6, r3
 800333e:	d0b6      	beq.n	80032ae <_malloc_r+0x22>
 8003340:	1b9b      	subs	r3, r3, r6
 8003342:	50a3      	str	r3, [r4, r2]
 8003344:	e7b3      	b.n	80032ae <_malloc_r+0x22>
 8003346:	6862      	ldr	r2, [r4, #4]
 8003348:	42a3      	cmp	r3, r4
 800334a:	bf0c      	ite	eq
 800334c:	6032      	streq	r2, [r6, #0]
 800334e:	605a      	strne	r2, [r3, #4]
 8003350:	e7ec      	b.n	800332c <_malloc_r+0xa0>
 8003352:	4623      	mov	r3, r4
 8003354:	6864      	ldr	r4, [r4, #4]
 8003356:	e7b2      	b.n	80032be <_malloc_r+0x32>
 8003358:	4634      	mov	r4, r6
 800335a:	6876      	ldr	r6, [r6, #4]
 800335c:	e7b9      	b.n	80032d2 <_malloc_r+0x46>
 800335e:	230c      	movs	r3, #12
 8003360:	4638      	mov	r0, r7
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	f000 f84c 	bl	8003400 <__malloc_unlock>
 8003368:	e7a1      	b.n	80032ae <_malloc_r+0x22>
 800336a:	6025      	str	r5, [r4, #0]
 800336c:	e7de      	b.n	800332c <_malloc_r+0xa0>
 800336e:	bf00      	nop
 8003370:	20000324 	.word	0x20000324

08003374 <_realloc_r>:
 8003374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003378:	4680      	mov	r8, r0
 800337a:	4614      	mov	r4, r2
 800337c:	460e      	mov	r6, r1
 800337e:	b921      	cbnz	r1, 800338a <_realloc_r+0x16>
 8003380:	4611      	mov	r1, r2
 8003382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003386:	f7ff bf81 	b.w	800328c <_malloc_r>
 800338a:	b92a      	cbnz	r2, 8003398 <_realloc_r+0x24>
 800338c:	f7ff ff16 	bl	80031bc <_free_r>
 8003390:	4625      	mov	r5, r4
 8003392:	4628      	mov	r0, r5
 8003394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003398:	f000 f838 	bl	800340c <_malloc_usable_size_r>
 800339c:	4284      	cmp	r4, r0
 800339e:	4607      	mov	r7, r0
 80033a0:	d802      	bhi.n	80033a8 <_realloc_r+0x34>
 80033a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80033a6:	d812      	bhi.n	80033ce <_realloc_r+0x5a>
 80033a8:	4621      	mov	r1, r4
 80033aa:	4640      	mov	r0, r8
 80033ac:	f7ff ff6e 	bl	800328c <_malloc_r>
 80033b0:	4605      	mov	r5, r0
 80033b2:	2800      	cmp	r0, #0
 80033b4:	d0ed      	beq.n	8003392 <_realloc_r+0x1e>
 80033b6:	42bc      	cmp	r4, r7
 80033b8:	4622      	mov	r2, r4
 80033ba:	4631      	mov	r1, r6
 80033bc:	bf28      	it	cs
 80033be:	463a      	movcs	r2, r7
 80033c0:	f7ff fed4 	bl	800316c <memcpy>
 80033c4:	4631      	mov	r1, r6
 80033c6:	4640      	mov	r0, r8
 80033c8:	f7ff fef8 	bl	80031bc <_free_r>
 80033cc:	e7e1      	b.n	8003392 <_realloc_r+0x1e>
 80033ce:	4635      	mov	r5, r6
 80033d0:	e7df      	b.n	8003392 <_realloc_r+0x1e>
	...

080033d4 <_sbrk_r>:
 80033d4:	b538      	push	{r3, r4, r5, lr}
 80033d6:	2300      	movs	r3, #0
 80033d8:	4d05      	ldr	r5, [pc, #20]	; (80033f0 <_sbrk_r+0x1c>)
 80033da:	4604      	mov	r4, r0
 80033dc:	4608      	mov	r0, r1
 80033de:	602b      	str	r3, [r5, #0]
 80033e0:	f7fe f9b0 	bl	8001744 <_sbrk>
 80033e4:	1c43      	adds	r3, r0, #1
 80033e6:	d102      	bne.n	80033ee <_sbrk_r+0x1a>
 80033e8:	682b      	ldr	r3, [r5, #0]
 80033ea:	b103      	cbz	r3, 80033ee <_sbrk_r+0x1a>
 80033ec:	6023      	str	r3, [r4, #0]
 80033ee:	bd38      	pop	{r3, r4, r5, pc}
 80033f0:	2000032c 	.word	0x2000032c

080033f4 <__malloc_lock>:
 80033f4:	4801      	ldr	r0, [pc, #4]	; (80033fc <__malloc_lock+0x8>)
 80033f6:	f000 b811 	b.w	800341c <__retarget_lock_acquire_recursive>
 80033fa:	bf00      	nop
 80033fc:	20000330 	.word	0x20000330

08003400 <__malloc_unlock>:
 8003400:	4801      	ldr	r0, [pc, #4]	; (8003408 <__malloc_unlock+0x8>)
 8003402:	f000 b80c 	b.w	800341e <__retarget_lock_release_recursive>
 8003406:	bf00      	nop
 8003408:	20000330 	.word	0x20000330

0800340c <_malloc_usable_size_r>:
 800340c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003410:	1f18      	subs	r0, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	bfbc      	itt	lt
 8003416:	580b      	ldrlt	r3, [r1, r0]
 8003418:	18c0      	addlt	r0, r0, r3
 800341a:	4770      	bx	lr

0800341c <__retarget_lock_acquire_recursive>:
 800341c:	4770      	bx	lr

0800341e <__retarget_lock_release_recursive>:
 800341e:	4770      	bx	lr

08003420 <_init>:
 8003420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003422:	bf00      	nop
 8003424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003426:	bc08      	pop	{r3}
 8003428:	469e      	mov	lr, r3
 800342a:	4770      	bx	lr

0800342c <_fini>:
 800342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342e:	bf00      	nop
 8003430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003432:	bc08      	pop	{r3}
 8003434:	469e      	mov	lr, r3
 8003436:	4770      	bx	lr
