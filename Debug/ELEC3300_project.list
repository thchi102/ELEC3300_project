
ELEC3300_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f90  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f8  08008174  08008174  00018174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a6c  08008a6c  00020138  2**0
                  CONTENTS
  4 .ARM          00000000  08008a6c  08008a6c  00020138  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a6c  08008a6c  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a6c  08008a6c  00018a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a70  08008a70  00018a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08008a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000138  08008bac  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08008bac  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001479a  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030bc  00000000  00000000  000348fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  000379b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001360  00000000  00000000  00038e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d21d  00000000  00000000  0003a1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182d8  00000000  00000000  000573f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6db7  00000000  00000000  0006f6cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116484  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006018  00000000  00000000  001164d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000138 	.word	0x20000138
 8000200:	00000000 	.word	0x00000000
 8000204:	0800815c 	.word	0x0800815c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000013c 	.word	0x2000013c
 8000220:	0800815c 	.word	0x0800815c

08000224 <__aeabi_fmul>:
 8000224:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000228:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800022c:	bf1e      	ittt	ne
 800022e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000232:	ea92 0f0c 	teqne	r2, ip
 8000236:	ea93 0f0c 	teqne	r3, ip
 800023a:	d06f      	beq.n	800031c <__aeabi_fmul+0xf8>
 800023c:	441a      	add	r2, r3
 800023e:	ea80 0c01 	eor.w	ip, r0, r1
 8000242:	0240      	lsls	r0, r0, #9
 8000244:	bf18      	it	ne
 8000246:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024a:	d01e      	beq.n	800028a <__aeabi_fmul+0x66>
 800024c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000250:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000254:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000258:	fba0 3101 	umull	r3, r1, r0, r1
 800025c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000264:	bf3e      	ittt	cc
 8000266:	0049      	lslcc	r1, r1, #1
 8000268:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800026c:	005b      	lslcc	r3, r3, #1
 800026e:	ea40 0001 	orr.w	r0, r0, r1
 8000272:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000276:	2afd      	cmp	r2, #253	; 0xfd
 8000278:	d81d      	bhi.n	80002b6 <__aeabi_fmul+0x92>
 800027a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	4770      	bx	lr
 800028a:	f090 0f00 	teq	r0, #0
 800028e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000292:	bf08      	it	eq
 8000294:	0249      	lsleq	r1, r1, #9
 8000296:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800029e:	3a7f      	subs	r2, #127	; 0x7f
 80002a0:	bfc2      	ittt	gt
 80002a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002aa:	4770      	bxgt	lr
 80002ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b0:	f04f 0300 	mov.w	r3, #0
 80002b4:	3a01      	subs	r2, #1
 80002b6:	dc5d      	bgt.n	8000374 <__aeabi_fmul+0x150>
 80002b8:	f112 0f19 	cmn.w	r2, #25
 80002bc:	bfdc      	itt	le
 80002be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002c2:	4770      	bxle	lr
 80002c4:	f1c2 0200 	rsb	r2, r2, #0
 80002c8:	0041      	lsls	r1, r0, #1
 80002ca:	fa21 f102 	lsr.w	r1, r1, r2
 80002ce:	f1c2 0220 	rsb	r2, r2, #32
 80002d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80002d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80002da:	f140 0000 	adc.w	r0, r0, #0
 80002de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e2:	bf08      	it	eq
 80002e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002e8:	4770      	bx	lr
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002f2:	bf02      	ittt	eq
 80002f4:	0040      	lsleq	r0, r0, #1
 80002f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002fa:	3a01      	subeq	r2, #1
 80002fc:	d0f9      	beq.n	80002f2 <__aeabi_fmul+0xce>
 80002fe:	ea40 000c 	orr.w	r0, r0, ip
 8000302:	f093 0f00 	teq	r3, #0
 8000306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800030a:	bf02      	ittt	eq
 800030c:	0049      	lsleq	r1, r1, #1
 800030e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000312:	3b01      	subeq	r3, #1
 8000314:	d0f9      	beq.n	800030a <__aeabi_fmul+0xe6>
 8000316:	ea41 010c 	orr.w	r1, r1, ip
 800031a:	e78f      	b.n	800023c <__aeabi_fmul+0x18>
 800031c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000320:	ea92 0f0c 	teq	r2, ip
 8000324:	bf18      	it	ne
 8000326:	ea93 0f0c 	teqne	r3, ip
 800032a:	d00a      	beq.n	8000342 <__aeabi_fmul+0x11e>
 800032c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000330:	bf18      	it	ne
 8000332:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000336:	d1d8      	bne.n	80002ea <__aeabi_fmul+0xc6>
 8000338:	ea80 0001 	eor.w	r0, r0, r1
 800033c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f090 0f00 	teq	r0, #0
 8000346:	bf17      	itett	ne
 8000348:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800034c:	4608      	moveq	r0, r1
 800034e:	f091 0f00 	teqne	r1, #0
 8000352:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000356:	d014      	beq.n	8000382 <__aeabi_fmul+0x15e>
 8000358:	ea92 0f0c 	teq	r2, ip
 800035c:	d101      	bne.n	8000362 <__aeabi_fmul+0x13e>
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	d10f      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000362:	ea93 0f0c 	teq	r3, ip
 8000366:	d103      	bne.n	8000370 <__aeabi_fmul+0x14c>
 8000368:	024b      	lsls	r3, r1, #9
 800036a:	bf18      	it	ne
 800036c:	4608      	movne	r0, r1
 800036e:	d108      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000370:	ea80 0001 	eor.w	r0, r0, r1
 8000374:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000378:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800037c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000380:	4770      	bx	lr
 8000382:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000386:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800038a:	4770      	bx	lr

0800038c <__aeabi_frsub>:
 800038c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000390:	e002      	b.n	8000398 <__addsf3>
 8000392:	bf00      	nop

08000394 <__aeabi_fsub>:
 8000394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000398 <__addsf3>:
 8000398:	0042      	lsls	r2, r0, #1
 800039a:	bf1f      	itttt	ne
 800039c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a0:	ea92 0f03 	teqne	r2, r3
 80003a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ac:	d06a      	beq.n	8000484 <__addsf3+0xec>
 80003ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003b6:	bfc1      	itttt	gt
 80003b8:	18d2      	addgt	r2, r2, r3
 80003ba:	4041      	eorgt	r1, r0
 80003bc:	4048      	eorgt	r0, r1
 80003be:	4041      	eorgt	r1, r0
 80003c0:	bfb8      	it	lt
 80003c2:	425b      	neglt	r3, r3
 80003c4:	2b19      	cmp	r3, #25
 80003c6:	bf88      	it	hi
 80003c8:	4770      	bxhi	lr
 80003ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003d6:	bf18      	it	ne
 80003d8:	4240      	negne	r0, r0
 80003da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003e6:	bf18      	it	ne
 80003e8:	4249      	negne	r1, r1
 80003ea:	ea92 0f03 	teq	r2, r3
 80003ee:	d03f      	beq.n	8000470 <__addsf3+0xd8>
 80003f0:	f1a2 0201 	sub.w	r2, r2, #1
 80003f4:	fa41 fc03 	asr.w	ip, r1, r3
 80003f8:	eb10 000c 	adds.w	r0, r0, ip
 80003fc:	f1c3 0320 	rsb	r3, r3, #32
 8000400:	fa01 f103 	lsl.w	r1, r1, r3
 8000404:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000408:	d502      	bpl.n	8000410 <__addsf3+0x78>
 800040a:	4249      	negs	r1, r1
 800040c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000410:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000414:	d313      	bcc.n	800043e <__addsf3+0xa6>
 8000416:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041a:	d306      	bcc.n	800042a <__addsf3+0x92>
 800041c:	0840      	lsrs	r0, r0, #1
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	f102 0201 	add.w	r2, r2, #1
 8000426:	2afe      	cmp	r2, #254	; 0xfe
 8000428:	d251      	bcs.n	80004ce <__addsf3+0x136>
 800042a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800042e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000432:	bf08      	it	eq
 8000434:	f020 0001 	biceq.w	r0, r0, #1
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	4770      	bx	lr
 800043e:	0049      	lsls	r1, r1, #1
 8000440:	eb40 0000 	adc.w	r0, r0, r0
 8000444:	3a01      	subs	r2, #1
 8000446:	bf28      	it	cs
 8000448:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800044c:	d2ed      	bcs.n	800042a <__addsf3+0x92>
 800044e:	fab0 fc80 	clz	ip, r0
 8000452:	f1ac 0c08 	sub.w	ip, ip, #8
 8000456:	ebb2 020c 	subs.w	r2, r2, ip
 800045a:	fa00 f00c 	lsl.w	r0, r0, ip
 800045e:	bfaa      	itet	ge
 8000460:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000464:	4252      	neglt	r2, r2
 8000466:	4318      	orrge	r0, r3
 8000468:	bfbc      	itt	lt
 800046a:	40d0      	lsrlt	r0, r2
 800046c:	4318      	orrlt	r0, r3
 800046e:	4770      	bx	lr
 8000470:	f092 0f00 	teq	r2, #0
 8000474:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000478:	bf06      	itte	eq
 800047a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800047e:	3201      	addeq	r2, #1
 8000480:	3b01      	subne	r3, #1
 8000482:	e7b5      	b.n	80003f0 <__addsf3+0x58>
 8000484:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000488:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800048c:	bf18      	it	ne
 800048e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000492:	d021      	beq.n	80004d8 <__addsf3+0x140>
 8000494:	ea92 0f03 	teq	r2, r3
 8000498:	d004      	beq.n	80004a4 <__addsf3+0x10c>
 800049a:	f092 0f00 	teq	r2, #0
 800049e:	bf08      	it	eq
 80004a0:	4608      	moveq	r0, r1
 80004a2:	4770      	bx	lr
 80004a4:	ea90 0f01 	teq	r0, r1
 80004a8:	bf1c      	itt	ne
 80004aa:	2000      	movne	r0, #0
 80004ac:	4770      	bxne	lr
 80004ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b2:	d104      	bne.n	80004be <__addsf3+0x126>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	bf28      	it	cs
 80004b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c2:	bf3c      	itt	cc
 80004c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bxcc	lr
 80004ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d6:	4770      	bx	lr
 80004d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004dc:	bf16      	itet	ne
 80004de:	4608      	movne	r0, r1
 80004e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e4:	4601      	movne	r1, r0
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	bf06      	itte	eq
 80004ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004ee:	ea90 0f01 	teqeq	r0, r1
 80004f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_ui2f>:
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	e004      	b.n	8000508 <__aeabi_i2f+0x8>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2f>:
 8000500:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	ea5f 0c00 	movs.w	ip, r0
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000514:	4601      	mov	r1, r0
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	e01c      	b.n	8000556 <__aeabi_l2f+0x2a>

0800051c <__aeabi_ul2f>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e00a      	b.n	8000540 <__aeabi_l2f+0x14>
 800052a:	bf00      	nop

0800052c <__aeabi_l2f>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000538:	d502      	bpl.n	8000540 <__aeabi_l2f+0x14>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	ea5f 0c01 	movs.w	ip, r1
 8000544:	bf02      	ittt	eq
 8000546:	4684      	moveq	ip, r0
 8000548:	4601      	moveq	r1, r0
 800054a:	2000      	moveq	r0, #0
 800054c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000550:	bf08      	it	eq
 8000552:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000556:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055a:	fabc f28c 	clz	r2, ip
 800055e:	3a08      	subs	r2, #8
 8000560:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000564:	db10      	blt.n	8000588 <__aeabi_l2f+0x5c>
 8000566:	fa01 fc02 	lsl.w	ip, r1, r2
 800056a:	4463      	add	r3, ip
 800056c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000570:	f1c2 0220 	rsb	r2, r2, #32
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	fa20 f202 	lsr.w	r2, r0, r2
 800057c:	eb43 0002 	adc.w	r0, r3, r2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f102 0220 	add.w	r2, r2, #32
 800058c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000590:	f1c2 0220 	rsb	r2, r2, #32
 8000594:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000598:	fa21 f202 	lsr.w	r2, r1, r2
 800059c:	eb43 0002 	adc.w	r0, r3, r2
 80005a0:	bf08      	it	eq
 80005a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_f2iz>:
 80005a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005b0:	d30f      	bcc.n	80005d2 <__aeabi_f2iz+0x2a>
 80005b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ba:	d90d      	bls.n	80005d8 <__aeabi_f2iz+0x30>
 80005bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005c8:	fa23 f002 	lsr.w	r0, r3, r2
 80005cc:	bf18      	it	ne
 80005ce:	4240      	negne	r0, r0
 80005d0:	4770      	bx	lr
 80005d2:	f04f 0000 	mov.w	r0, #0
 80005d6:	4770      	bx	lr
 80005d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005dc:	d101      	bne.n	80005e2 <__aeabi_f2iz+0x3a>
 80005de:	0242      	lsls	r2, r0, #9
 80005e0:	d105      	bne.n	80005ee <__aeabi_f2iz+0x46>
 80005e2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80005e6:	bf08      	it	eq
 80005e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80005ec:	4770      	bx	lr
 80005ee:	f04f 0000 	mov.w	r0, #0
 80005f2:	4770      	bx	lr

080005f4 <XPT2046_DelayUS>:
  * @brief  用于 XPT2046 的简单微秒级延时函数
  * @param  nCount ：延时计数值，单位为微妙
  * @retval 无
  */
static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	e00a      	b.n	8000618 <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;     //设置值为12，大约延1微秒
 8000602:	230c      	movs	r3, #12
 8000604:	72fb      	strb	r3, [r7, #11]

		while ( uc -- );     //延1微秒
 8000606:	bf00      	nop
 8000608:	7afb      	ldrb	r3, [r7, #11]
 800060a:	1e5a      	subs	r2, r3, #1
 800060c:	72fa      	strb	r2, [r7, #11]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1fa      	bne.n	8000608 <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3301      	adds	r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d3f0      	bcc.n	8000602 <XPT2046_DelayUS+0xe>

	}

}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <XPT2046_WriteCMD>:
  *     @arg 0x90 :通道Y+的选择控制字
  *     @arg 0xd0 :通道X+的选择控制字
  * @retval 无
  */
static void XPT2046_WriteCMD ( uint8_t ucCmd )
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	HAL_GPIO_WritePin(XPT2046_SPI_MOSI_PORT,XPT2046_SPI_MOSI_PIN,GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2104      	movs	r1, #4
 800063a:	481d      	ldr	r0, [pc, #116]	; (80006b0 <XPT2046_WriteCMD+0x84>)
 800063c:	f003 ff3d 	bl	80044ba <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(XPT2046_SPI_CLK_PORT,XPT2046_SPI_CLK_PIN,GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2101      	movs	r1, #1
 8000644:	481a      	ldr	r0, [pc, #104]	; (80006b0 <XPT2046_WriteCMD+0x84>)
 8000646:	f003 ff38 	bl	80044ba <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ )
 800064a:	2300      	movs	r3, #0
 800064c:	73fb      	strb	r3, [r7, #15]
 800064e:	e027      	b.n	80006a0 <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? HAL_GPIO_WritePin(XPT2046_SPI_MOSI_PORT,XPT2046_SPI_MOSI_PIN,GPIO_PIN_SET) : HAL_GPIO_WritePin(XPT2046_SPI_MOSI_PORT,XPT2046_SPI_MOSI_PIN,GPIO_PIN_RESET);
 8000650:	79fa      	ldrb	r2, [r7, #7]
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	f1c3 0307 	rsb	r3, r3, #7
 8000658:	fa42 f303 	asr.w	r3, r2, r3
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d005      	beq.n	8000670 <XPT2046_WriteCMD+0x44>
 8000664:	2201      	movs	r2, #1
 8000666:	2104      	movs	r1, #4
 8000668:	4811      	ldr	r0, [pc, #68]	; (80006b0 <XPT2046_WriteCMD+0x84>)
 800066a:	f003 ff26 	bl	80044ba <HAL_GPIO_WritePin>
 800066e:	e004      	b.n	800067a <XPT2046_WriteCMD+0x4e>
 8000670:	2200      	movs	r2, #0
 8000672:	2104      	movs	r1, #4
 8000674:	480e      	ldr	r0, [pc, #56]	; (80006b0 <XPT2046_WriteCMD+0x84>)
 8000676:	f003 ff20 	bl	80044ba <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 800067a:	2005      	movs	r0, #5
 800067c:	f7ff ffba 	bl	80005f4 <XPT2046_DelayUS>

	  HAL_GPIO_WritePin(XPT2046_SPI_CLK_PORT,XPT2046_SPI_CLK_PIN,GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	2101      	movs	r1, #1
 8000684:	480a      	ldr	r0, [pc, #40]	; (80006b0 <XPT2046_WriteCMD+0x84>)
 8000686:	f003 ff18 	bl	80044ba <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 800068a:	2005      	movs	r0, #5
 800068c:	f7ff ffb2 	bl	80005f4 <XPT2046_DelayUS>

	  HAL_GPIO_WritePin(XPT2046_SPI_CLK_PORT,XPT2046_SPI_CLK_PIN,GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	4806      	ldr	r0, [pc, #24]	; (80006b0 <XPT2046_WriteCMD+0x84>)
 8000696:	f003 ff10 	bl	80044ba <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ )
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	3301      	adds	r3, #1
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2b07      	cmp	r3, #7
 80006a4:	d9d4      	bls.n	8000650 <XPT2046_WriteCMD+0x24>
	}

}
 80006a6:	bf00      	nop
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40011800 	.word	0x40011800

080006b4 <XPT2046_ReadCMD>:
  * @brief  XPT2046 的读取命令
  * @param  无
  * @retval 读取到的数据
  */
static uint16_t XPT2046_ReadCMD ( void )
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 80006ba:	2300      	movs	r3, #0
 80006bc:	80bb      	strh	r3, [r7, #4]



	HAL_GPIO_WritePin(XPT2046_SPI_MOSI_PORT,XPT2046_SPI_MOSI_PIN,GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2104      	movs	r1, #4
 80006c2:	4819      	ldr	r0, [pc, #100]	; (8000728 <XPT2046_ReadCMD+0x74>)
 80006c4:	f003 fef9 	bl	80044ba <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(XPT2046_SPI_CLK_PORT,XPT2046_SPI_CLK_PIN,GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2101      	movs	r1, #1
 80006cc:	4816      	ldr	r0, [pc, #88]	; (8000728 <XPT2046_ReadCMD+0x74>)
 80006ce:	f003 fef4 	bl	80044ba <HAL_GPIO_WritePin>

	for ( i=0;i<12;i++ )
 80006d2:	2300      	movs	r3, #0
 80006d4:	71fb      	strb	r3, [r7, #7]
 80006d6:	e01e      	b.n	8000716 <XPT2046_ReadCMD+0x62>
	{
		HAL_GPIO_WritePin(XPT2046_SPI_CLK_PORT,XPT2046_SPI_CLK_PIN,GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2101      	movs	r1, #1
 80006dc:	4812      	ldr	r0, [pc, #72]	; (8000728 <XPT2046_ReadCMD+0x74>)
 80006de:	f003 feec 	bl	80044ba <HAL_GPIO_WritePin>

		usTemp = HAL_GPIO_ReadPin(XPT2046_SPI_MISO_PORT,XPT2046_SPI_MISO_PIN);
 80006e2:	2108      	movs	r1, #8
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <XPT2046_ReadCMD+0x74>)
 80006e6:	f003 fed1 	bl	800448c <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << ( 11 - i );
 80006ee:	887a      	ldrh	r2, [r7, #2]
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	f1c3 030b 	rsb	r3, r3, #11
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	b21a      	sxth	r2, r3
 80006fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000700:	4313      	orrs	r3, r2
 8000702:	b21b      	sxth	r3, r3
 8000704:	80bb      	strh	r3, [r7, #4]

		HAL_GPIO_WritePin(XPT2046_SPI_CLK_PORT,XPT2046_SPI_CLK_PIN,GPIO_PIN_SET);
 8000706:	2201      	movs	r2, #1
 8000708:	2101      	movs	r1, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <XPT2046_ReadCMD+0x74>)
 800070c:	f003 fed5 	bl	80044ba <HAL_GPIO_WritePin>
	for ( i=0;i<12;i++ )
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	3301      	adds	r3, #1
 8000714:	71fb      	strb	r3, [r7, #7]
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b0b      	cmp	r3, #11
 800071a:	d9dd      	bls.n	80006d8 <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 800071c:	88bb      	ldrh	r3, [r7, #4]

}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40011800 	.word	0x40011800

0800072c <XPT2046_ReadAdc>:
  *     @arg 0x90 :通道Y+的选择控制字
  *     @arg 0xd0 :通道X+的选择控制字
  * @retval 该通道的ADC采样结果
  */
static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff77 	bl	800062c <XPT2046_WriteCMD>

  return 	XPT2046_ReadCMD ();
 800073e:	f7ff ffb9 	bl	80006b4 <XPT2046_ReadCMD>
 8000742:	4603      	mov	r3, r0

}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <XPT2046_ReadAdc_XY>:
  * @param  sX_Ad ：存放X通道AD值的地址
  * @param  sY_Ad ：存放Y通道AD值的地址
  * @retval 无
  */
static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc ( XPT2046_CHANNEL_X );
 8000756:	2090      	movs	r0, #144	; 0x90
 8000758:	f7ff ffe8 	bl	800072c <XPT2046_ReadAdc>
 800075c:	4603      	mov	r3, r0
 800075e:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 );
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff ff47 	bl	80005f4 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( XPT2046_CHANNEL_Y );
 8000766:	20d0      	movs	r0, #208	; 0xd0
 8000768:	f7ff ffe0 	bl	800072c <XPT2046_ReadAdc>
 800076c:	4603      	mov	r3, r0
 800076e:	81bb      	strh	r3, [r7, #12]


	* sX_Ad = sX_Ad_Temp;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	89fa      	ldrh	r2, [r7, #14]
 8000774:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	89ba      	ldrh	r2, [r7, #12]
 800077a:	801a      	strh	r2, [r3, #0]


}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     //注意：画板应用实例专用,不是很精准，但是简单，速度比较快
static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b092      	sub	sp, #72	; 0x48
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 800078c:	2300      	movs	r3, #0
 800078e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };  //坐标X和Y进行多次采样
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	2228      	movs	r2, #40	; 0x28
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f006 fd42 	bl	8007224 <memset>


	/* 循环采样10次 */
	do
	{
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );
 80007a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80007a4:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80007a8:	4611      	mov	r1, r2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffce 	bl	800074c <XPT2046_ReadAdc_XY>

		sBufferArray [ 0 ] [ ucCount ] = sAD_X;
 80007b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007b4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	3348      	adds	r3, #72	; 0x48
 80007bc:	443b      	add	r3, r7
 80007be:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 80007c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007c6:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80007ca:	330a      	adds	r3, #10
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	3348      	adds	r3, #72	; 0x48
 80007d0:	443b      	add	r3, r7
 80007d2:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount ++;
 80007d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007da:	3301      	adds	r3, #1
 80007dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	}	while ( ( HAL_GPIO_ReadPin(XPT2046_PENIRQ_GPIO_PORT,XPT2046_PENIRQ_GPIO_PIN) == XPT2046_PENIRQ_ActiveLevel ) && ( ucCount < 10 ) );//用户点击触摸屏时即TP_INT_IN信号为低 并且 ucCount<10
 80007e0:	2110      	movs	r1, #16
 80007e2:	4871      	ldr	r0, [pc, #452]	; (80009a8 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80007e4:	f003 fe52 	bl	800448c <HAL_GPIO_ReadPin>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d103      	bne.n	80007f6 <XPT2046_ReadAdc_Smooth_XY+0x72>
 80007ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007f2:	2b09      	cmp	r3, #9
 80007f4:	d9d4      	bls.n	80007a0 <XPT2046_ReadAdc_Smooth_XY+0x1c>


	/*如果触笔弹起*/
	if ( HAL_GPIO_ReadPin(XPT2046_PENIRQ_GPIO_PORT,XPT2046_PENIRQ_GPIO_PIN) != XPT2046_PENIRQ_ActiveLevel )
 80007f6:	2110      	movs	r1, #16
 80007f8:	486b      	ldr	r0, [pc, #428]	; (80009a8 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80007fa:	f003 fe47 	bl	800448c <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d002      	beq.n	800080a <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;			//中断标志复位
 8000804:	4b69      	ldr	r3, [pc, #420]	; (80009ac <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]


	/*如果成功采样10个样本*/
	if ( ucCount ==10 )
 800080a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800080e:	2b0a      	cmp	r3, #10
 8000810:	f040 80c4 	bne.w	800099c <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 8000814:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000818:	643b      	str	r3, [r7, #64]	; 0x40
 800081a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800081c:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];
 800081e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
 8000824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000826:	637b      	str	r3, [r7, #52]	; 0x34

		for ( i = 1; i < 10; i ++ )
 8000828:	2301      	movs	r3, #1
 800082a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800082e:	e02b      	b.n	8000888 <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray[ 0 ] [ i ] < lX_Min )
 8000830:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	3348      	adds	r3, #72	; 0x48
 8000838:	443b      	add	r3, r7
 800083a:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800083e:	461a      	mov	r2, r3
 8000840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000842:	4293      	cmp	r3, r2
 8000844:	dd08      	ble.n	8000858 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 8000846:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	3348      	adds	r3, #72	; 0x48
 800084e:	443b      	add	r3, r7
 8000850:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8000854:	643b      	str	r3, [r7, #64]	; 0x40
 8000856:	e012      	b.n	800087e <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 8000858:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	3348      	adds	r3, #72	; 0x48
 8000860:	443b      	add	r3, r7
 8000862:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8000866:	461a      	mov	r2, r3
 8000868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800086a:	4293      	cmp	r3, r2
 800086c:	da07      	bge.n	800087e <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 800086e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	3348      	adds	r3, #72	; 0x48
 8000876:	443b      	add	r3, r7
 8000878:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800087c:	63fb      	str	r3, [r7, #60]	; 0x3c
		for ( i = 1; i < 10; i ++ )
 800087e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000882:	3301      	adds	r3, #1
 8000884:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000888:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800088c:	2b09      	cmp	r3, #9
 800088e:	d9cf      	bls.n	8000830 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for ( i = 1; i < 10; i ++ )
 8000890:	2301      	movs	r3, #1
 8000892:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000896:	e02f      	b.n	80008f8 <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 8000898:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800089c:	330a      	adds	r3, #10
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	3348      	adds	r3, #72	; 0x48
 80008a2:	443b      	add	r3, r7
 80008a4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80008a8:	461a      	mov	r2, r3
 80008aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008ac:	4293      	cmp	r3, r2
 80008ae:	dd09      	ble.n	80008c4 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 80008b0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80008b4:	330a      	adds	r3, #10
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	3348      	adds	r3, #72	; 0x48
 80008ba:	443b      	add	r3, r7
 80008bc:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80008c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80008c2:	e014      	b.n	80008ee <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 80008c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80008c8:	330a      	adds	r3, #10
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	3348      	adds	r3, #72	; 0x48
 80008ce:	443b      	add	r3, r7
 80008d0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80008d4:	461a      	mov	r2, r3
 80008d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d8:	4293      	cmp	r3, r2
 80008da:	da08      	bge.n	80008ee <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 80008dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80008e0:	330a      	adds	r3, #10
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	3348      	adds	r3, #72	; 0x48
 80008e6:	443b      	add	r3, r7
 80008e8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
		for ( i = 1; i < 10; i ++ )
 80008ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80008f2:	3301      	adds	r3, #1
 80008f4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80008f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80008fc:	2b09      	cmp	r3, #9
 80008fe:	d9cb      	bls.n	8000898 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}


		/*去除最小值和最大值之后求平均值*/
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] +
 8000900:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000904:	461a      	mov	r2, r3
 8000906:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800090a:	4413      	add	r3, r2
 800090c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000910:	4413      	add	r3, r2
 8000912:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000916:	4413      	add	r3, r2
 8000918:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800091c:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 800091e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] +
 8000922:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8000924:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000928:	4413      	add	r3, r2
 800092a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800092e:	4413      	add	r3, r2
 8000930:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000934:	4413      	add	r3, r2
 8000936:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800093a:	441a      	add	r2, r3
 800093c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800093e:	1ad2      	subs	r2, r2, r3
 8000940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] +
 8000946:	b21a      	sxth	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] +
 800094c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000950:	461a      	mov	r2, r3
 8000952:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000956:	4413      	add	r3, r2
 8000958:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800095c:	4413      	add	r3, r2
 800095e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8000962:	4413      	add	r3, r2
 8000964:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8000968:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3;
 800096a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] +
 800096e:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3;
 8000970:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8000974:	4413      	add	r3, r2
 8000976:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800097a:	4413      	add	r3, r2
 800097c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8000980:	4413      	add	r3, r2
 8000982:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8000986:	441a      	add	r2, r3
 8000988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800098a:	1ad2      	subs	r2, r2, r3
 800098c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] +
 8000992:	b21a      	sxth	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	805a      	strh	r2, [r3, #2]


		return 1;
 8000998:	2301      	movs	r3, #1
 800099a:	e000      	b.n	800099e <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}
	return 0;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3748      	adds	r7, #72	; 0x48
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40011800 	.word	0x40011800
 80009ac:	20000154 	.word	0x20000154

080009b0 <XPT2046_Get_TouchedPoint>:
	*   该返回值为以下值之一：
  *     @arg 1 :获取成功
  *     @arg 0 :获取失败
  */
uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 80009b0:	b5b0      	push	{r4, r5, r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;           //若正常，则返回0
 80009ba:	2301      	movs	r3, #1
 80009bc:	75fb      	strb	r3, [r7, #23]

	strType_XPT2046_Coordinate strScreenCoordinate;


  if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fede 	bl	8000784 <XPT2046_ReadAdc_Smooth_XY>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d064      	beq.n	8000a98 <XPT2046_Get_TouchedPoint+0xe8>
  {
		pDisplayCoordinate ->x = ( ( pTouchPara[6].dX_X * strScreenCoordinate.x ) + ( pTouchPara[6].dX_Y * strScreenCoordinate.y ) + pTouchPara[6].dX );
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	3390      	adds	r3, #144	; 0x90
 80009d2:	681c      	ldr	r4, [r3, #0]
 80009d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fd91 	bl	8000500 <__aeabi_i2f>
 80009de:	4603      	mov	r3, r0
 80009e0:	4619      	mov	r1, r3
 80009e2:	4620      	mov	r0, r4
 80009e4:	f7ff fc1e 	bl	8000224 <__aeabi_fmul>
 80009e8:	4603      	mov	r3, r0
 80009ea:	461d      	mov	r5, r3
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	3390      	adds	r3, #144	; 0x90
 80009f0:	685c      	ldr	r4, [r3, #4]
 80009f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fd82 	bl	8000500 <__aeabi_i2f>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4619      	mov	r1, r3
 8000a00:	4620      	mov	r0, r4
 8000a02:	f7ff fc0f 	bl	8000224 <__aeabi_fmul>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4628      	mov	r0, r5
 8000a0c:	f7ff fcc4 	bl	8000398 <__addsf3>
 8000a10:	4603      	mov	r3, r0
 8000a12:	461a      	mov	r2, r3
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	3390      	adds	r3, #144	; 0x90
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4610      	mov	r0, r2
 8000a1e:	f7ff fcbb 	bl	8000398 <__addsf3>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fdbf 	bl	80005a8 <__aeabi_f2iz>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b21a      	sxth	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara[6].dY_X * strScreenCoordinate.x ) + ( pTouchPara[6].dY_Y * strScreenCoordinate.y ) + pTouchPara[6].dY );
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	3390      	adds	r3, #144	; 0x90
 8000a36:	68dc      	ldr	r4, [r3, #12]
 8000a38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fd5f 	bl	8000500 <__aeabi_i2f>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4619      	mov	r1, r3
 8000a46:	4620      	mov	r0, r4
 8000a48:	f7ff fbec 	bl	8000224 <__aeabi_fmul>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	461d      	mov	r5, r3
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	3390      	adds	r3, #144	; 0x90
 8000a54:	691c      	ldr	r4, [r3, #16]
 8000a56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fd50 	bl	8000500 <__aeabi_i2f>
 8000a60:	4603      	mov	r3, r0
 8000a62:	4619      	mov	r1, r3
 8000a64:	4620      	mov	r0, r4
 8000a66:	f7ff fbdd 	bl	8000224 <__aeabi_fmul>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4628      	mov	r0, r5
 8000a70:	f7ff fc92 	bl	8000398 <__addsf3>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	3390      	adds	r3, #144	; 0x90
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4610      	mov	r0, r2
 8000a82:	f7ff fc89 	bl	8000398 <__addsf3>
 8000a86:	4603      	mov	r3, r0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fd8d 	bl	80005a8 <__aeabi_f2iz>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b21a      	sxth	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	805a      	strh	r2, [r3, #2]
 8000a96:	e001      	b.n	8000a9c <XPT2046_Get_TouchedPoint+0xec>

  }

	else ucRet = 0;            //如果获取的触点信息有误，则返回0
 8000a98:	2300      	movs	r3, #0
 8000a9a:	75fb      	strb	r3, [r7, #23]

  return ucRet;
 8000a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000aa8 <XPT2046_TouchDetect>:
	*   该返回值为以下值之一：
  *     @arg TOUCH_PRESSED :触摸按下
  *     @arg TOUCH_NOT_PRESSED :无触摸
  */
uint8_t XPT2046_TouchDetect(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	static enumTouchState touch_state = XPT2046_STATE_RELEASE;
	static uint32_t i;
	uint8_t detectResult = TOUCH_NOT_PRESSED;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	71fb      	strb	r3, [r7, #7]

	switch(touch_state)
 8000ab2:	4b32      	ldr	r3, [pc, #200]	; (8000b7c <XPT2046_TouchDetect+0xd4>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d041      	beq.n	8000b3e <XPT2046_TouchDetect+0x96>
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	dc52      	bgt.n	8000b64 <XPT2046_TouchDetect+0xbc>
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d002      	beq.n	8000ac8 <XPT2046_TouchDetect+0x20>
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d013      	beq.n	8000aee <XPT2046_TouchDetect+0x46>
 8000ac6:	e04d      	b.n	8000b64 <XPT2046_TouchDetect+0xbc>
	{
		case XPT2046_STATE_RELEASE:
			if(HAL_GPIO_ReadPin(XPT2046_PENIRQ_GPIO_PORT,XPT2046_PENIRQ_GPIO_PIN) == XPT2046_PENIRQ_ActiveLevel) //第一次出现触摸信号
 8000ac8:	2110      	movs	r1, #16
 8000aca:	482d      	ldr	r0, [pc, #180]	; (8000b80 <XPT2046_TouchDetect+0xd8>)
 8000acc:	f003 fcde 	bl	800448c <HAL_GPIO_ReadPin>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d105      	bne.n	8000ae2 <XPT2046_TouchDetect+0x3a>
			{
				touch_state = XPT2046_STATE_WAITING;
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <XPT2046_TouchDetect+0xd4>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	701a      	strb	r2, [r3, #0]
				detectResult =TOUCH_NOT_PRESSED;
 8000adc:	2300      	movs	r3, #0
 8000ade:	71fb      	strb	r3, [r7, #7]
			else	//无触摸
			{
				touch_state = XPT2046_STATE_RELEASE;
				detectResult =TOUCH_NOT_PRESSED;
			}
			break;
 8000ae0:	e046      	b.n	8000b70 <XPT2046_TouchDetect+0xc8>
				touch_state = XPT2046_STATE_RELEASE;
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <XPT2046_TouchDetect+0xd4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
				detectResult =TOUCH_NOT_PRESSED;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	71fb      	strb	r3, [r7, #7]
			break;
 8000aec:	e040      	b.n	8000b70 <XPT2046_TouchDetect+0xc8>

		case XPT2046_STATE_WAITING:
				if(HAL_GPIO_ReadPin(XPT2046_PENIRQ_GPIO_PORT,XPT2046_PENIRQ_GPIO_PIN) == XPT2046_PENIRQ_ActiveLevel)
 8000aee:	2110      	movs	r1, #16
 8000af0:	4823      	ldr	r0, [pc, #140]	; (8000b80 <XPT2046_TouchDetect+0xd8>)
 8000af2:	f003 fccb 	bl	800448c <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d117      	bne.n	8000b2c <XPT2046_TouchDetect+0x84>
				{
					 i++;
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <XPT2046_TouchDetect+0xdc>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3301      	adds	r3, #1
 8000b02:	4a20      	ldr	r2, [pc, #128]	; (8000b84 <XPT2046_TouchDetect+0xdc>)
 8000b04:	6013      	str	r3, [r2, #0]
					//等待时间大于阈值则认为触摸被按下
					//消抖时间 = DURIATION_TIME * 本函数被调用的时间间隔
					//如在定时器中调用，每10ms调用一次，则消抖时间为：DURIATION_TIME*10ms
					if(i > DURIATION_TIME)
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <XPT2046_TouchDetect+0xdc>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d908      	bls.n	8000b20 <XPT2046_TouchDetect+0x78>
					{
						i=0;
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <XPT2046_TouchDetect+0xdc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
						touch_state = XPT2046_STATE_PRESSED;
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <XPT2046_TouchDetect+0xd4>)
 8000b16:	2202      	movs	r2, #2
 8000b18:	701a      	strb	r2, [r3, #0]
						detectResult = TOUCH_PRESSED;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	71fb      	strb	r3, [r7, #7]
				    i = 0;
            touch_state = XPT2046_STATE_RELEASE;
						detectResult = TOUCH_NOT_PRESSED;
				}

			break;
 8000b1e:	e027      	b.n	8000b70 <XPT2046_TouchDetect+0xc8>
						touch_state = XPT2046_STATE_WAITING;
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <XPT2046_TouchDetect+0xd4>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
						detectResult =	 TOUCH_NOT_PRESSED;
 8000b26:	2300      	movs	r3, #0
 8000b28:	71fb      	strb	r3, [r7, #7]
			break;
 8000b2a:	e021      	b.n	8000b70 <XPT2046_TouchDetect+0xc8>
				    i = 0;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <XPT2046_TouchDetect+0xdc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
            touch_state = XPT2046_STATE_RELEASE;
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <XPT2046_TouchDetect+0xd4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
						detectResult = TOUCH_NOT_PRESSED;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	71fb      	strb	r3, [r7, #7]
			break;
 8000b3c:	e018      	b.n	8000b70 <XPT2046_TouchDetect+0xc8>

		case XPT2046_STATE_PRESSED:
				if(HAL_GPIO_ReadPin(XPT2046_PENIRQ_GPIO_PORT,XPT2046_PENIRQ_GPIO_PIN) == XPT2046_PENIRQ_ActiveLevel)		//触摸持续按下
 8000b3e:	2110      	movs	r1, #16
 8000b40:	480f      	ldr	r0, [pc, #60]	; (8000b80 <XPT2046_TouchDetect+0xd8>)
 8000b42:	f003 fca3 	bl	800448c <HAL_GPIO_ReadPin>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d105      	bne.n	8000b58 <XPT2046_TouchDetect+0xb0>
				{
					touch_state = XPT2046_STATE_PRESSED;
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <XPT2046_TouchDetect+0xd4>)
 8000b4e:	2202      	movs	r2, #2
 8000b50:	701a      	strb	r2, [r3, #0]
					detectResult = TOUCH_PRESSED;
 8000b52:	2301      	movs	r3, #1
 8000b54:	71fb      	strb	r3, [r7, #7]
				else	//触摸释放
				{
					touch_state = XPT2046_STATE_RELEASE;
					detectResult = TOUCH_NOT_PRESSED;
				}
			break;
 8000b56:	e00b      	b.n	8000b70 <XPT2046_TouchDetect+0xc8>
					touch_state = XPT2046_STATE_RELEASE;
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <XPT2046_TouchDetect+0xd4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
					detectResult = TOUCH_NOT_PRESSED;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	71fb      	strb	r3, [r7, #7]
			break;
 8000b62:	e005      	b.n	8000b70 <XPT2046_TouchDetect+0xc8>

		default:
				touch_state = XPT2046_STATE_RELEASE;
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <XPT2046_TouchDetect+0xd4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
				detectResult = TOUCH_NOT_PRESSED;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	71fb      	strb	r3, [r7, #7]
				break;
 8000b6e:	bf00      	nop

	}

	return detectResult;
 8000b70:	79fb      	ldrb	r3, [r7, #7]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000155 	.word	0x20000155
 8000b80:	40011800 	.word	0x40011800
 8000b84:	20000158 	.word	0x20000158

08000b88 <XPT2046_TouchDown>:
  * @param  touch包含触摸坐标的结构体
  * @note  请在本函数中编写自己的触摸按下处理应用
  * @retval 无
  */
void XPT2046_TouchDown(strType_XPT2046_Coordinate * touch, char* stage[10], int* x, int* y)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
 8000b94:	603b      	str	r3, [r7, #0]
	//若为负值表示之前已处理过
	if(touch->pre_x == -1 && touch->pre_x == -1)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ba0:	d104      	bne.n	8000bac <XPT2046_TouchDown+0x24>
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
//  Draw_Trail(touch->pre_x,touch->pre_y,touch->x,touch->y,&brush);

	/***在上面编写自己的触摸按下处理应用***/


}
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <XPT2046_TouchUp>:
  * @param  touch包含触摸坐标的结构体
  * @note  请在本函数中编写自己的触摸释放处理应用
  * @retval 无
  */
void XPT2046_TouchUp(strType_XPT2046_Coordinate * touch, char* stage[10], int* x, int* y)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	603b      	str	r3, [r7, #0]
	//若为负值表示之前已处理过
	if(touch->pre_x == -1 && touch->pre_x == -1)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bcc:	d105      	bne.n	8000bda <XPT2046_TouchUp+0x26>
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bd8:	d00c      	beq.n	8000bf4 <XPT2046_TouchUp+0x40>
		return;
	*x = touch->x;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000be0:	461a      	mov	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	601a      	str	r2, [r3, #0]
	*y = touch->y;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bec:	461a      	mov	r2, r3
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	e000      	b.n	8000bf6 <XPT2046_TouchUp+0x42>
		return;
 8000bf4:	bf00      	nop
	/***在此处编写自己的触摸释放处理应用***/
	/*处理触摸画板的选择按钮*/
//  Touch_Button_Up(touch->pre_x,touch->pre_y);

	/***在上面编写自己的触摸释放处理应用***/
}
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
	...

08000c00 <XPT2046_TouchEvenHandler>:
	*						可在XPT2046_TouchDown及XPT2046_TouchUp函数中编写自己的触摸应用
	* @param   none
	* @retval  none
	*/
void XPT2046_TouchEvenHandler(char* stage[10], int* x, int* y)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
	  static strType_XPT2046_Coordinate cinfo={-1,-1,-1,-1};

		if(XPT2046_TouchDetect() == TOUCH_PRESSED)
 8000c0c:	f7ff ff4c 	bl	8000aa8 <XPT2046_TouchDetect>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d115      	bne.n	8000c42 <XPT2046_TouchEvenHandler+0x42>
		{


			//获取触摸坐标
			XPT2046_Get_TouchedPoint(&cinfo,strXPT2046_TouchPara);
 8000c16:	4918      	ldr	r1, [pc, #96]	; (8000c78 <XPT2046_TouchEvenHandler+0x78>)
 8000c18:	4818      	ldr	r0, [pc, #96]	; (8000c7c <XPT2046_TouchEvenHandler+0x7c>)
 8000c1a:	f7ff fec9 	bl	80009b0 <XPT2046_Get_TouchedPoint>

			//输出调试信息到串口
			XPT2046_DEBUG("x=%d,y=%d",cinfo.x,cinfo.y);

			//调用触摸被按下时的处理函数，可在该函数编写自己的触摸按下处理过程
			XPT2046_TouchDown(&cinfo, &stage, x, y);
 8000c1e:	f107 010c 	add.w	r1, r7, #12
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68ba      	ldr	r2, [r7, #8]
 8000c26:	4815      	ldr	r0, [pc, #84]	; (8000c7c <XPT2046_TouchEvenHandler+0x7c>)
 8000c28:	f7ff ffae 	bl	8000b88 <XPT2046_TouchDown>

			/*更新触摸信息到pre xy*/
			cinfo.pre_x = cinfo.x; cinfo.pre_y = cinfo.y;
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <XPT2046_TouchEvenHandler+0x7c>)
 8000c2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <XPT2046_TouchEvenHandler+0x7c>)
 8000c34:	809a      	strh	r2, [r3, #4]
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <XPT2046_TouchEvenHandler+0x7c>)
 8000c38:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <XPT2046_TouchEvenHandler+0x7c>)
 8000c3e:	80da      	strh	r2, [r3, #6]
			cinfo.y = -1;
			cinfo.pre_x = -1;
			cinfo.pre_y = -1;
		}

}
 8000c40:	e015      	b.n	8000c6e <XPT2046_TouchEvenHandler+0x6e>
			XPT2046_TouchUp(&cinfo, stage, x, y);
 8000c42:	68f9      	ldr	r1, [r7, #12]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <XPT2046_TouchEvenHandler+0x7c>)
 8000c4a:	f7ff ffb3 	bl	8000bb4 <XPT2046_TouchUp>
			cinfo.x = -1;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <XPT2046_TouchEvenHandler+0x7c>)
 8000c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c54:	801a      	strh	r2, [r3, #0]
			cinfo.y = -1;
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <XPT2046_TouchEvenHandler+0x7c>)
 8000c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c5c:	805a      	strh	r2, [r3, #2]
			cinfo.pre_x = -1;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <XPT2046_TouchEvenHandler+0x7c>)
 8000c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c64:	809a      	strh	r2, [r3, #4]
			cinfo.pre_y = -1;
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <XPT2046_TouchEvenHandler+0x7c>)
 8000c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c6c:	80da      	strh	r2, [r3, #6]
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	200000c0 	.word	0x200000c0

08000c80 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	e002      	b.n	8000c90 <Delay+0x10>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1f9      	bne.n	8000c8a <Delay+0xa>
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f000 f829 	bl	8000d00 <LCD_BackLed_Control>
	LCD_Rst();
 8000cae:	f000 f80f 	bl	8000cd0 <LCD_Rst>
	LCD_REG_Config();
 8000cb2:	f000 f85f 	bl	8000d74 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000cc0:	22f0      	movs	r2, #240	; 0xf0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 f9e6 	bl	8001096 <LCD_Clear>
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <LCD_Rst+0x28>)
 8000cda:	f003 fbee 	bl	80044ba <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000cde:	4807      	ldr	r0, [pc, #28]	; (8000cfc <LCD_Rst+0x2c>)
 8000ce0:	f7ff ffce 	bl	8000c80 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <LCD_Rst+0x28>)
 8000cea:	f003 fbe6 	bl	80044ba <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000cee:	4803      	ldr	r0, [pc, #12]	; (8000cfc <LCD_Rst+0x2c>)
 8000cf0:	f7ff ffc6 	bl	8000c80 <Delay>
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40011800 	.word	0x40011800
 8000cfc:	0002bffc 	.word	0x0002bffc

08000d00 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d006      	beq.n	8000d1e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d16:	4807      	ldr	r0, [pc, #28]	; (8000d34 <LCD_BackLed_Control+0x34>)
 8000d18:	f003 fbcf 	bl	80044ba <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000d1c:	e005      	b.n	8000d2a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d24:	4803      	ldr	r0, [pc, #12]	; (8000d34 <LCD_BackLed_Control+0x34>)
 8000d26:	f003 fbc8 	bl	80044ba <HAL_GPIO_WritePin>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40011400 	.word	0x40011400

08000d38 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d42:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	8013      	strh	r3, [r2, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <LCD_Write_Data+0x1c>)
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	8013      	strh	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	60020000 	.word	0x60020000

08000d74 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000d78:	20cf      	movs	r0, #207	; 0xcf
 8000d7a:	f7ff ffdd 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f7ff ffe8 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000d84:	2081      	movs	r0, #129	; 0x81
 8000d86:	f7ff ffe5 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000d8a:	2030      	movs	r0, #48	; 0x30
 8000d8c:	f7ff ffe2 	bl	8000d54 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000d90:	20ed      	movs	r0, #237	; 0xed
 8000d92:	f7ff ffd1 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000d96:	2064      	movs	r0, #100	; 0x64
 8000d98:	f7ff ffdc 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f7ff ffd9 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000da2:	2012      	movs	r0, #18
 8000da4:	f7ff ffd6 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000da8:	2081      	movs	r0, #129	; 0x81
 8000daa:	f7ff ffd3 	bl	8000d54 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000dae:	20e8      	movs	r0, #232	; 0xe8
 8000db0:	f7ff ffc2 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000db4:	2085      	movs	r0, #133	; 0x85
 8000db6:	f7ff ffcd 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000dba:	2010      	movs	r0, #16
 8000dbc:	f7ff ffca 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000dc0:	2078      	movs	r0, #120	; 0x78
 8000dc2:	f7ff ffc7 	bl	8000d54 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000dc6:	20cb      	movs	r0, #203	; 0xcb
 8000dc8:	f7ff ffb6 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000dcc:	2039      	movs	r0, #57	; 0x39
 8000dce:	f7ff ffc1 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000dd2:	202c      	movs	r0, #44	; 0x2c
 8000dd4:	f7ff ffbe 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f7ff ffbb 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000dde:	2034      	movs	r0, #52	; 0x34
 8000de0:	f7ff ffb8 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000de4:	2002      	movs	r0, #2
 8000de6:	f7ff ffb5 	bl	8000d54 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000dea:	20f7      	movs	r0, #247	; 0xf7
 8000dec:	f7ff ffa4 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000df0:	2020      	movs	r0, #32
 8000df2:	f7ff ffaf 	bl	8000d54 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000df6:	20ea      	movs	r0, #234	; 0xea
 8000df8:	f7ff ff9e 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff ffa9 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff ffa6 	bl	8000d54 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000e08:	20b1      	movs	r0, #177	; 0xb1
 8000e0a:	f7ff ff95 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff ffa0 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000e14:	201b      	movs	r0, #27
 8000e16:	f7ff ff9d 	bl	8000d54 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000e1a:	20b6      	movs	r0, #182	; 0xb6
 8000e1c:	f7ff ff8c 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000e20:	200a      	movs	r0, #10
 8000e22:	f7ff ff97 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000e26:	20a2      	movs	r0, #162	; 0xa2
 8000e28:	f7ff ff94 	bl	8000d54 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000e2c:	20c0      	movs	r0, #192	; 0xc0
 8000e2e:	f7ff ff83 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000e32:	2035      	movs	r0, #53	; 0x35
 8000e34:	f7ff ff8e 	bl	8000d54 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000e38:	20c1      	movs	r0, #193	; 0xc1
 8000e3a:	f7ff ff7d 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000e3e:	2011      	movs	r0, #17
 8000e40:	f7ff ff88 	bl	8000d54 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000e44:	20c5      	movs	r0, #197	; 0xc5
 8000e46:	f7ff ff77 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000e4a:	2045      	movs	r0, #69	; 0x45
 8000e4c:	f7ff ff82 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000e50:	2045      	movs	r0, #69	; 0x45
 8000e52:	f7ff ff7f 	bl	8000d54 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000e56:	20c7      	movs	r0, #199	; 0xc7
 8000e58:	f7ff ff6e 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000e5c:	20a2      	movs	r0, #162	; 0xa2
 8000e5e:	f7ff ff79 	bl	8000d54 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000e62:	20f2      	movs	r0, #242	; 0xf2
 8000e64:	f7ff ff68 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f7ff ff73 	bl	8000d54 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000e6e:	2026      	movs	r0, #38	; 0x26
 8000e70:	f7ff ff62 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000e74:	2001      	movs	r0, #1
 8000e76:	f7ff ff6d 	bl	8000d54 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000e7a:	20e0      	movs	r0, #224	; 0xe0
 8000e7c:	f7ff ff5c 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000e80:	200f      	movs	r0, #15
 8000e82:	f7ff ff67 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000e86:	2026      	movs	r0, #38	; 0x26
 8000e88:	f7ff ff64 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000e8c:	2024      	movs	r0, #36	; 0x24
 8000e8e:	f7ff ff61 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000e92:	200b      	movs	r0, #11
 8000e94:	f7ff ff5e 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000e98:	200e      	movs	r0, #14
 8000e9a:	f7ff ff5b 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000e9e:	2009      	movs	r0, #9
 8000ea0:	f7ff ff58 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000ea4:	2054      	movs	r0, #84	; 0x54
 8000ea6:	f7ff ff55 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000eaa:	20a8      	movs	r0, #168	; 0xa8
 8000eac:	f7ff ff52 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000eb0:	2046      	movs	r0, #70	; 0x46
 8000eb2:	f7ff ff4f 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000eb6:	200c      	movs	r0, #12
 8000eb8:	f7ff ff4c 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000ebc:	2017      	movs	r0, #23
 8000ebe:	f7ff ff49 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000ec2:	2009      	movs	r0, #9
 8000ec4:	f7ff ff46 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000ec8:	200f      	movs	r0, #15
 8000eca:	f7ff ff43 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000ece:	2007      	movs	r0, #7
 8000ed0:	f7ff ff40 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f7ff ff3d 	bl	8000d54 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000eda:	20e1      	movs	r0, #225	; 0xe1
 8000edc:	f7ff ff2c 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff ff37 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000ee6:	2019      	movs	r0, #25
 8000ee8:	f7ff ff34 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000eec:	201b      	movs	r0, #27
 8000eee:	f7ff ff31 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f7ff ff2e 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000ef8:	2010      	movs	r0, #16
 8000efa:	f7ff ff2b 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000efe:	2007      	movs	r0, #7
 8000f00:	f7ff ff28 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000f04:	202a      	movs	r0, #42	; 0x2a
 8000f06:	f7ff ff25 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000f0a:	2047      	movs	r0, #71	; 0x47
 8000f0c:	f7ff ff22 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000f10:	2039      	movs	r0, #57	; 0x39
 8000f12:	f7ff ff1f 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000f16:	2003      	movs	r0, #3
 8000f18:	f7ff ff1c 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000f1c:	2006      	movs	r0, #6
 8000f1e:	f7ff ff19 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000f22:	2006      	movs	r0, #6
 8000f24:	f7ff ff16 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000f28:	2030      	movs	r0, #48	; 0x30
 8000f2a:	f7ff ff13 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000f2e:	2038      	movs	r0, #56	; 0x38
 8000f30:	f7ff ff10 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000f34:	200f      	movs	r0, #15
 8000f36:	f7ff ff0d 	bl	8000d54 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000f3a:	2036      	movs	r0, #54	; 0x36
 8000f3c:	f7ff fefc 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000f40:	20c8      	movs	r0, #200	; 0xc8
 8000f42:	f7ff ff07 	bl	8000d54 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000f46:	202a      	movs	r0, #42	; 0x2a
 8000f48:	f7ff fef6 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff ff01 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff fefe 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff fefb 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000f5e:	20ef      	movs	r0, #239	; 0xef
 8000f60:	f7ff fef8 	bl	8000d54 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000f64:	202b      	movs	r0, #43	; 0x2b
 8000f66:	f7ff fee7 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff fef2 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff feef 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff feec 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000f7c:	203f      	movs	r0, #63	; 0x3f
 8000f7e:	f7ff fee9 	bl	8000d54 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000f82:	203a      	movs	r0, #58	; 0x3a
 8000f84:	f7ff fed8 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000f88:	2055      	movs	r0, #85	; 0x55
 8000f8a:	f7ff fee3 	bl	8000d54 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000f8e:	2011      	movs	r0, #17
 8000f90:	f7ff fed2 	bl	8000d38 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <LCD_REG_Config+0x230>)
 8000f96:	f7ff fe73 	bl	8000c80 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000f9a:	2029      	movs	r0, #41	; 0x29
 8000f9c:	f7ff fecc 	bl	8000d38 <LCD_Write_Cmd>
	
	
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	0002bffc 	.word	0x0002bffc

08000fa8 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4604      	mov	r4, r0
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	80fb      	strh	r3, [r7, #6]
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80bb      	strh	r3, [r7, #4]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	807b      	strh	r3, [r7, #2]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000fc6:	202a      	movs	r0, #42	; 0x2a
 8000fc8:	f7ff feb6 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff febe 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff feb8 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000fe4:	88fa      	ldrh	r2, [r7, #6]
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	4413      	add	r3, r2
 8000fea:	3b01      	subs	r3, #1
 8000fec:	121b      	asrs	r3, r3, #8
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff feaf 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000ff6:	88fa      	ldrh	r2, [r7, #6]
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	3b01      	subs	r3, #1
 8001000:	b29b      	uxth	r3, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	b29b      	uxth	r3, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fea4 	bl	8000d54 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 800100c:	202b      	movs	r0, #43	; 0x2b
 800100e:	f7ff fe93 	bl	8000d38 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	b29b      	uxth	r3, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe9b 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 800101e:	88bb      	ldrh	r3, [r7, #4]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	b29b      	uxth	r3, r3
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fe95 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800102a:	88ba      	ldrh	r2, [r7, #4]
 800102c:	883b      	ldrh	r3, [r7, #0]
 800102e:	4413      	add	r3, r2
 8001030:	3b01      	subs	r3, #1
 8001032:	121b      	asrs	r3, r3, #8
 8001034:	b29b      	uxth	r3, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fe8c 	bl	8000d54 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 800103c:	88ba      	ldrh	r2, [r7, #4]
 800103e:	883b      	ldrh	r3, [r7, #0]
 8001040:	4413      	add	r3, r2
 8001042:	b29b      	uxth	r3, r3
 8001044:	3b01      	subs	r3, #1
 8001046:	b29b      	uxth	r3, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	b29b      	uxth	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fe81 	bl	8000d54 <LCD_Write_Data>
	
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}

0800105a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800106a:	202c      	movs	r0, #44	; 0x2c
 800106c:	f7ff fe64 	bl	8000d38 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	e006      	b.n	8001084 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fe6b 	bl	8000d54 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3301      	adds	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	d3f4      	bcc.n	8001076 <LCD_FillColor+0x1c>
		
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001096:	b590      	push	{r4, r7, lr}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	4604      	mov	r4, r0
 800109e:	4608      	mov	r0, r1
 80010a0:	4611      	mov	r1, r2
 80010a2:	461a      	mov	r2, r3
 80010a4:	4623      	mov	r3, r4
 80010a6:	80fb      	strh	r3, [r7, #6]
 80010a8:	4603      	mov	r3, r0
 80010aa:	80bb      	strh	r3, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]
 80010b0:	4613      	mov	r3, r2
 80010b2:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80010b4:	883b      	ldrh	r3, [r7, #0]
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	88b9      	ldrh	r1, [r7, #4]
 80010ba:	88f8      	ldrh	r0, [r7, #6]
 80010bc:	f7ff ff74 	bl	8000fa8 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 80010c0:	887b      	ldrh	r3, [r7, #2]
 80010c2:	883a      	ldrh	r2, [r7, #0]
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	461a      	mov	r2, r3
 80010ca:	8b3b      	ldrh	r3, [r7, #24]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4610      	mov	r0, r2
 80010d0:	f7ff ffc3 	bl	800105a <LCD_FillColor>
	
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd90      	pop	{r4, r7, pc}

080010dc <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar, uint16_t textcolor, uint16_t bgcolor )
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4604      	mov	r4, r0
 80010e4:	4608      	mov	r0, r1
 80010e6:	4611      	mov	r1, r2
 80010e8:	461a      	mov	r2, r3
 80010ea:	4623      	mov	r3, r4
 80010ec:	80fb      	strh	r3, [r7, #6]
 80010ee:	4603      	mov	r3, r0
 80010f0:	80bb      	strh	r3, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	70fb      	strb	r3, [r7, #3]
 80010f6:	4613      	mov	r3, r2
 80010f8:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	3b20      	subs	r3, #32
 80010fe:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001100:	88b9      	ldrh	r1, [r7, #4]
 8001102:	88f8      	ldrh	r0, [r7, #6]
 8001104:	2310      	movs	r3, #16
 8001106:	2208      	movs	r2, #8
 8001108:	f7ff ff4e 	bl	8000fa8 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 800110c:	202c      	movs	r0, #44	; 0x2c
 800110e:	f7ff fe13 	bl	8000d38 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001112:	2300      	movs	r3, #0
 8001114:	73bb      	strb	r3, [r7, #14]
 8001116:	e024      	b.n	8001162 <LCD_DrawChar+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001118:	7b3a      	ldrb	r2, [r7, #12]
 800111a:	7bbb      	ldrb	r3, [r7, #14]
 800111c:	4915      	ldr	r1, [pc, #84]	; (8001174 <LCD_DrawChar+0x98>)
 800111e:	0112      	lsls	r2, r2, #4
 8001120:	440a      	add	r2, r1
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001128:	2300      	movs	r3, #0
 800112a:	737b      	strb	r3, [r7, #13]
 800112c:	e013      	b.n	8001156 <LCD_DrawChar+0x7a>
		{
			if ( ucTemp & 0x01 )
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <LCD_DrawChar+0x66>
				LCD_Write_Data ( textcolor );
 8001138:	883b      	ldrh	r3, [r7, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fe0a 	bl	8000d54 <LCD_Write_Data>
 8001140:	e003      	b.n	800114a <LCD_DrawChar+0x6e>
			
			else
				LCD_Write_Data (  bgcolor );
 8001142:	8c3b      	ldrh	r3, [r7, #32]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fe05 	bl	8000d54 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	085b      	lsrs	r3, r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001150:	7b7b      	ldrb	r3, [r7, #13]
 8001152:	3301      	adds	r3, #1
 8001154:	737b      	strb	r3, [r7, #13]
 8001156:	7b7b      	ldrb	r3, [r7, #13]
 8001158:	2b07      	cmp	r3, #7
 800115a:	d9e8      	bls.n	800112e <LCD_DrawChar+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800115c:	7bbb      	ldrb	r3, [r7, #14]
 800115e:	3301      	adds	r3, #1
 8001160:	73bb      	strb	r3, [r7, #14]
 8001162:	7bbb      	ldrb	r3, [r7, #14]
 8001164:	2b0f      	cmp	r3, #15
 8001166:	d9d7      	bls.n	8001118 <LCD_DrawChar+0x3c>
			
		}
		
	}
	
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bd90      	pop	{r4, r7, pc}
 8001172:	bf00      	nop
 8001174:	0800839c 	.word	0x0800839c

08001178 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t textcolor, uint16_t bgcolor)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b087      	sub	sp, #28
 800117c:	af02      	add	r7, sp, #8
 800117e:	60ba      	str	r2, [r7, #8]
 8001180:	461a      	mov	r2, r3
 8001182:	4603      	mov	r3, r0
 8001184:	81fb      	strh	r3, [r7, #14]
 8001186:	460b      	mov	r3, r1
 8001188:	81bb      	strh	r3, [r7, #12]
 800118a:	4613      	mov	r3, r2
 800118c:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800118e:	e01f      	b.n	80011d0 <LCD_DrawString+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001190:	89fb      	ldrh	r3, [r7, #14]
 8001192:	2be8      	cmp	r3, #232	; 0xe8
 8001194:	d904      	bls.n	80011a0 <LCD_DrawString+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001196:	2300      	movs	r3, #0
 8001198:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 800119a:	89bb      	ldrh	r3, [r7, #12]
 800119c:	3310      	adds	r3, #16
 800119e:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80011a0:	89bb      	ldrh	r3, [r7, #12]
 80011a2:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80011a6:	d903      	bls.n	80011b0 <LCD_DrawString+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80011a8:	2300      	movs	r3, #0
 80011aa:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar ( usC, usP, * pStr, textcolor, bgcolor );
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	781a      	ldrb	r2, [r3, #0]
 80011b4:	88fc      	ldrh	r4, [r7, #6]
 80011b6:	89b9      	ldrh	r1, [r7, #12]
 80011b8:	89f8      	ldrh	r0, [r7, #14]
 80011ba:	8c3b      	ldrh	r3, [r7, #32]
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	4623      	mov	r3, r4
 80011c0:	f7ff ff8c 	bl	80010dc <LCD_DrawChar>
		
		pStr ++;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3301      	adds	r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 80011ca:	89fb      	ldrh	r3, [r7, #14]
 80011cc:	3308      	adds	r3, #8
 80011ce:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1db      	bne.n	8001190 <LCD_DrawString+0x18>
		
	}
	
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd90      	pop	{r4, r7, pc}
	...

080011e4 <PrintDevice_light>:
	LCD_DrawString(152, 260, "button4", WHITE, BLACK);
}

// print light mode device menu function
void PrintDevice_light(uint8_t user, uint8_t button1, uint8_t button2)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
 80011ee:	460b      	mov	r3, r1
 80011f0:	71bb      	strb	r3, [r7, #6]
 80011f2:	4613      	mov	r3, r2
 80011f4:	717b      	strb	r3, [r7, #5]
	LCD_Clear(0,0,240,320,WHITE);
 80011f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001200:	22f0      	movs	r2, #240	; 0xf0
 8001202:	2100      	movs	r1, #0
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff ff46 	bl	8001096 <LCD_Clear>
	LCD_DrawString(75, 0, "Device Mode", BLACK, WHITE);
 800120a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2300      	movs	r3, #0
 8001212:	4a44      	ldr	r2, [pc, #272]	; (8001324 <PrintDevice_light+0x140>)
 8001214:	2100      	movs	r1, #0
 8001216:	204b      	movs	r0, #75	; 0x4b
 8001218:	f7ff ffae 	bl	8001178 <LCD_DrawString>

	if(user == JONATHAN)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d109      	bne.n	8001236 <PrintDevice_light+0x52>
	{
		LCD_DrawString(50, 20, "Welcome! Jonathan!", BLACK, WHITE);
 8001222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2300      	movs	r3, #0
 800122a:	4a3f      	ldr	r2, [pc, #252]	; (8001328 <PrintDevice_light+0x144>)
 800122c:	2114      	movs	r1, #20
 800122e:	2032      	movs	r0, #50	; 0x32
 8001230:	f7ff ffa2 	bl	8001178 <LCD_DrawString>
 8001234:	e015      	b.n	8001262 <PrintDevice_light+0x7e>
	}
	else if(user == CHRIS)
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d109      	bne.n	8001250 <PrintDevice_light+0x6c>
	{
		LCD_DrawString(60, 20, "Welcome! Chris!", BLACK, WHITE);
 800123c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2300      	movs	r3, #0
 8001244:	4a39      	ldr	r2, [pc, #228]	; (800132c <PrintDevice_light+0x148>)
 8001246:	2114      	movs	r1, #20
 8001248:	203c      	movs	r0, #60	; 0x3c
 800124a:	f7ff ff95 	bl	8001178 <LCD_DrawString>
 800124e:	e008      	b.n	8001262 <PrintDevice_light+0x7e>
	}
	else
	{
		LCD_DrawString(60, 20, "Device Locked", BLACK, WHITE);
 8001250:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2300      	movs	r3, #0
 8001258:	4a35      	ldr	r2, [pc, #212]	; (8001330 <PrintDevice_light+0x14c>)
 800125a:	2114      	movs	r1, #20
 800125c:	203c      	movs	r0, #60	; 0x3c
 800125e:	f7ff ff8b 	bl	8001178 <LCD_DrawString>
	}

	if(button1)
 8001262:	79bb      	ldrb	r3, [r7, #6]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d015      	beq.n	8001294 <PrintDevice_light+0xb0>
	{
		LCD_DrawString(50, 45, "ON", BLACK, WHITE);
 8001268:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2300      	movs	r3, #0
 8001270:	4a30      	ldr	r2, [pc, #192]	; (8001334 <PrintDevice_light+0x150>)
 8001272:	212d      	movs	r1, #45	; 0x2d
 8001274:	2032      	movs	r0, #50	; 0x32
 8001276:	f7ff ff7f 	bl	8001178 <LCD_DrawString>
		LCD_OpenWindow(15, 60, 100, 250);
 800127a:	23fa      	movs	r3, #250	; 0xfa
 800127c:	2264      	movs	r2, #100	; 0x64
 800127e:	213c      	movs	r1, #60	; 0x3c
 8001280:	200f      	movs	r0, #15
 8001282:	f7ff fe91 	bl	8000fa8 <LCD_OpenWindow>
		LCD_FillColor(100*250, GREEN);
 8001286:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800128a:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800128e:	f7ff fee4 	bl	800105a <LCD_FillColor>
 8001292:	e014      	b.n	80012be <PrintDevice_light+0xda>
	}
	else
	{
		LCD_DrawString(50, 45, "OFF", BLACK, WHITE);
 8001294:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2300      	movs	r3, #0
 800129c:	4a26      	ldr	r2, [pc, #152]	; (8001338 <PrintDevice_light+0x154>)
 800129e:	212d      	movs	r1, #45	; 0x2d
 80012a0:	2032      	movs	r0, #50	; 0x32
 80012a2:	f7ff ff69 	bl	8001178 <LCD_DrawString>
		LCD_OpenWindow(15, 60, 100, 250);
 80012a6:	23fa      	movs	r3, #250	; 0xfa
 80012a8:	2264      	movs	r2, #100	; 0x64
 80012aa:	213c      	movs	r1, #60	; 0x3c
 80012ac:	200f      	movs	r0, #15
 80012ae:	f7ff fe7b 	bl	8000fa8 <LCD_OpenWindow>
		LCD_FillColor(100*250, RED);
 80012b2:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80012b6:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80012ba:	f7ff fece 	bl	800105a <LCD_FillColor>
	}
	if(button2)
 80012be:	797b      	ldrb	r3, [r7, #5]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d015      	beq.n	80012f0 <PrintDevice_light+0x10c>
	{
		LCD_DrawString(165, 45, "ON", BLACK, WHITE);
 80012c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2300      	movs	r3, #0
 80012cc:	4a19      	ldr	r2, [pc, #100]	; (8001334 <PrintDevice_light+0x150>)
 80012ce:	212d      	movs	r1, #45	; 0x2d
 80012d0:	20a5      	movs	r0, #165	; 0xa5
 80012d2:	f7ff ff51 	bl	8001178 <LCD_DrawString>
		LCD_OpenWindow(125, 60, 100, 250);
 80012d6:	23fa      	movs	r3, #250	; 0xfa
 80012d8:	2264      	movs	r2, #100	; 0x64
 80012da:	213c      	movs	r1, #60	; 0x3c
 80012dc:	207d      	movs	r0, #125	; 0x7d
 80012de:	f7ff fe63 	bl	8000fa8 <LCD_OpenWindow>
		LCD_FillColor(100*250, GREEN);
 80012e2:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80012e6:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80012ea:	f7ff feb6 	bl	800105a <LCD_FillColor>
	{
		LCD_DrawString(165, 45, "OFF", BLACK, WHITE);
		LCD_OpenWindow(125, 60, 100, 250);
		LCD_FillColor(100*250, RED);
	}
}
 80012ee:	e014      	b.n	800131a <PrintDevice_light+0x136>
		LCD_DrawString(165, 45, "OFF", BLACK, WHITE);
 80012f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2300      	movs	r3, #0
 80012f8:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <PrintDevice_light+0x154>)
 80012fa:	212d      	movs	r1, #45	; 0x2d
 80012fc:	20a5      	movs	r0, #165	; 0xa5
 80012fe:	f7ff ff3b 	bl	8001178 <LCD_DrawString>
		LCD_OpenWindow(125, 60, 100, 250);
 8001302:	23fa      	movs	r3, #250	; 0xfa
 8001304:	2264      	movs	r2, #100	; 0x64
 8001306:	213c      	movs	r1, #60	; 0x3c
 8001308:	207d      	movs	r0, #125	; 0x7d
 800130a:	f7ff fe4d 	bl	8000fa8 <LCD_OpenWindow>
		LCD_FillColor(100*250, RED);
 800130e:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001312:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001316:	f7ff fea0 	bl	800105a <LCD_FillColor>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	0800819c 	.word	0x0800819c
 8001328:	080081a8 	.word	0x080081a8
 800132c:	080081bc 	.word	0x080081bc
 8001330:	080081cc 	.word	0x080081cc
 8001334:	080081dc 	.word	0x080081dc
 8001338:	080081e0 	.word	0x080081e0

0800133c <PrintDevice_dark>:

//print dark mode device menu function
void PrintDevice_dark(uint8_t user, uint8_t button1, uint8_t button2)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af02      	add	r7, sp, #8
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
 8001346:	460b      	mov	r3, r1
 8001348:	71bb      	strb	r3, [r7, #6]
 800134a:	4613      	mov	r3, r2
 800134c:	717b      	strb	r3, [r7, #5]
	LCD_Clear(0,0,240,320,BLACK);
 800134e:	2300      	movs	r3, #0
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001356:	22f0      	movs	r2, #240	; 0xf0
 8001358:	2100      	movs	r1, #0
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fe9b 	bl	8001096 <LCD_Clear>
	LCD_DrawString(75, 0, "Device Mode", WHITE, BLACK);
 8001360:	2300      	movs	r3, #0
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001368:	4a43      	ldr	r2, [pc, #268]	; (8001478 <PrintDevice_dark+0x13c>)
 800136a:	2100      	movs	r1, #0
 800136c:	204b      	movs	r0, #75	; 0x4b
 800136e:	f7ff ff03 	bl	8001178 <LCD_DrawString>

	if(user == JONATHAN)
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d109      	bne.n	800138c <PrintDevice_dark+0x50>
	{
		LCD_DrawString(50, 20, "Welcome! Jonathan!", WHITE, BLACK);
 8001378:	2300      	movs	r3, #0
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001380:	4a3e      	ldr	r2, [pc, #248]	; (800147c <PrintDevice_dark+0x140>)
 8001382:	2114      	movs	r1, #20
 8001384:	2032      	movs	r0, #50	; 0x32
 8001386:	f7ff fef7 	bl	8001178 <LCD_DrawString>
 800138a:	e015      	b.n	80013b8 <PrintDevice_dark+0x7c>
	}
	else if(user == CHRIS)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d109      	bne.n	80013a6 <PrintDevice_dark+0x6a>
	{
		LCD_DrawString(60, 20, "Welcome! Chris!", WHITE, BLACK);
 8001392:	2300      	movs	r3, #0
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800139a:	4a39      	ldr	r2, [pc, #228]	; (8001480 <PrintDevice_dark+0x144>)
 800139c:	2114      	movs	r1, #20
 800139e:	203c      	movs	r0, #60	; 0x3c
 80013a0:	f7ff feea 	bl	8001178 <LCD_DrawString>
 80013a4:	e008      	b.n	80013b8 <PrintDevice_dark+0x7c>
	}
	else
	{
		LCD_DrawString(60, 20, "Device Locked", WHITE, BLACK);
 80013a6:	2300      	movs	r3, #0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ae:	4a35      	ldr	r2, [pc, #212]	; (8001484 <PrintDevice_dark+0x148>)
 80013b0:	2114      	movs	r1, #20
 80013b2:	203c      	movs	r0, #60	; 0x3c
 80013b4:	f7ff fee0 	bl	8001178 <LCD_DrawString>
	}

	if(button1)
 80013b8:	79bb      	ldrb	r3, [r7, #6]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d015      	beq.n	80013ea <PrintDevice_dark+0xae>
	{
		LCD_DrawString(50, 45, "ON", WHITE, BLACK);
 80013be:	2300      	movs	r3, #0
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c6:	4a30      	ldr	r2, [pc, #192]	; (8001488 <PrintDevice_dark+0x14c>)
 80013c8:	212d      	movs	r1, #45	; 0x2d
 80013ca:	2032      	movs	r0, #50	; 0x32
 80013cc:	f7ff fed4 	bl	8001178 <LCD_DrawString>
		LCD_OpenWindow(15, 60, 100, 250);
 80013d0:	23fa      	movs	r3, #250	; 0xfa
 80013d2:	2264      	movs	r2, #100	; 0x64
 80013d4:	213c      	movs	r1, #60	; 0x3c
 80013d6:	200f      	movs	r0, #15
 80013d8:	f7ff fde6 	bl	8000fa8 <LCD_OpenWindow>
		LCD_FillColor(100*250, GREEN);
 80013dc:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80013e0:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80013e4:	f7ff fe39 	bl	800105a <LCD_FillColor>
 80013e8:	e014      	b.n	8001414 <PrintDevice_dark+0xd8>
	}
	else
	{
		LCD_DrawString(50, 45, "OFF", WHITE, BLACK);
 80013ea:	2300      	movs	r3, #0
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013f2:	4a26      	ldr	r2, [pc, #152]	; (800148c <PrintDevice_dark+0x150>)
 80013f4:	212d      	movs	r1, #45	; 0x2d
 80013f6:	2032      	movs	r0, #50	; 0x32
 80013f8:	f7ff febe 	bl	8001178 <LCD_DrawString>
		LCD_OpenWindow(15, 60, 100, 250);
 80013fc:	23fa      	movs	r3, #250	; 0xfa
 80013fe:	2264      	movs	r2, #100	; 0x64
 8001400:	213c      	movs	r1, #60	; 0x3c
 8001402:	200f      	movs	r0, #15
 8001404:	f7ff fdd0 	bl	8000fa8 <LCD_OpenWindow>
		LCD_FillColor(100*250, RED);
 8001408:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800140c:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001410:	f7ff fe23 	bl	800105a <LCD_FillColor>
	}
	if(button2)
 8001414:	797b      	ldrb	r3, [r7, #5]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d015      	beq.n	8001446 <PrintDevice_dark+0x10a>
	{
		LCD_DrawString(165, 45, "ON", WHITE, BLACK);
 800141a:	2300      	movs	r3, #0
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001422:	4a19      	ldr	r2, [pc, #100]	; (8001488 <PrintDevice_dark+0x14c>)
 8001424:	212d      	movs	r1, #45	; 0x2d
 8001426:	20a5      	movs	r0, #165	; 0xa5
 8001428:	f7ff fea6 	bl	8001178 <LCD_DrawString>
		LCD_OpenWindow(125, 60, 100, 250);
 800142c:	23fa      	movs	r3, #250	; 0xfa
 800142e:	2264      	movs	r2, #100	; 0x64
 8001430:	213c      	movs	r1, #60	; 0x3c
 8001432:	207d      	movs	r0, #125	; 0x7d
 8001434:	f7ff fdb8 	bl	8000fa8 <LCD_OpenWindow>
		LCD_FillColor(100*250, GREEN);
 8001438:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800143c:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001440:	f7ff fe0b 	bl	800105a <LCD_FillColor>
	{
		LCD_DrawString(165, 45, "OFF", WHITE, BLACK);
		LCD_OpenWindow(125, 60, 100, 250);
		LCD_FillColor(100*250, RED);
	}
}
 8001444:	e014      	b.n	8001470 <PrintDevice_dark+0x134>
		LCD_DrawString(165, 45, "OFF", WHITE, BLACK);
 8001446:	2300      	movs	r3, #0
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <PrintDevice_dark+0x150>)
 8001450:	212d      	movs	r1, #45	; 0x2d
 8001452:	20a5      	movs	r0, #165	; 0xa5
 8001454:	f7ff fe90 	bl	8001178 <LCD_DrawString>
		LCD_OpenWindow(125, 60, 100, 250);
 8001458:	23fa      	movs	r3, #250	; 0xfa
 800145a:	2264      	movs	r2, #100	; 0x64
 800145c:	213c      	movs	r1, #60	; 0x3c
 800145e:	207d      	movs	r0, #125	; 0x7d
 8001460:	f7ff fda2 	bl	8000fa8 <LCD_OpenWindow>
		LCD_FillColor(100*250, RED);
 8001464:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001468:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800146c:	f7ff fdf5 	bl	800105a <LCD_FillColor>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	0800819c 	.word	0x0800819c
 800147c:	080081a8 	.word	0x080081a8
 8001480:	080081bc 	.word	0x080081bc
 8001484:	080081cc 	.word	0x080081cc
 8001488:	080081dc 	.word	0x080081dc
 800148c:	080081e0 	.word	0x080081e0

08001490 <Find_Data>:

//IR receiver data decryption
void Find_Data(uint32_t *code)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	*code = *code & 0x0000ff00;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	601a      	str	r2, [r3, #0]
	*code = *code >> 8;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	0a1a      	lsrs	r2, r3, #8
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <Update_Button1>:

//toggle device button one display function
void Update_Button1()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	if(button1)
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <Update_Button1+0x1c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <Update_Button1+0x12>
	{
		Button1_Off();
 80014c4:	f000 f8a0 	bl	8001608 <Button1_Off>
	}
	else
	{
		Button1_On();
	}
}
 80014c8:	e001      	b.n	80014ce <Update_Button1+0x16>
		Button1_On();
 80014ca:	f000 f815 	bl	80014f8 <Button1_On>
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000388 	.word	0x20000388

080014d8 <Update_Button2>:

//toggle device button two display function
void Update_Button2()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	if(button2)
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <Update_Button2+0x1c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <Update_Button2+0x12>
	{
		Button2_Off();
 80014e4:	f000 f8d4 	bl	8001690 <Button2_Off>
	}
	else
	{
		Button2_On();
	}
}
 80014e8:	e001      	b.n	80014ee <Update_Button2+0x16>
		Button2_On();
 80014ea:	f000 f849 	bl	8001580 <Button2_On>
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000389 	.word	0x20000389

080014f8 <Button1_On>:

//turn on button one function
void Button1_On()
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af02      	add	r7, sp, #8
	button1 = 1;
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <Button1_On+0x78>)
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
	LCD_Clear(50, 45, 25, 15, WHITE);
 8001504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	230f      	movs	r3, #15
 800150c:	2219      	movs	r2, #25
 800150e:	212d      	movs	r1, #45	; 0x2d
 8001510:	2032      	movs	r0, #50	; 0x32
 8001512:	f7ff fdc0 	bl	8001096 <LCD_Clear>
	if(light_dark_mode == DARK)
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <Button1_On+0x7c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d109      	bne.n	8001532 <Button1_On+0x3a>
		LCD_DrawString(50, 45, "ON  ", WHITE, BLACK);
 800151e:	2300      	movs	r3, #0
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001526:	4a14      	ldr	r2, [pc, #80]	; (8001578 <Button1_On+0x80>)
 8001528:	212d      	movs	r1, #45	; 0x2d
 800152a:	2032      	movs	r0, #50	; 0x32
 800152c:	f7ff fe24 	bl	8001178 <LCD_DrawString>
 8001530:	e008      	b.n	8001544 <Button1_On+0x4c>
	else
		LCD_DrawString(50, 45, "ON  ", BLACK, WHITE);
 8001532:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2300      	movs	r3, #0
 800153a:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <Button1_On+0x80>)
 800153c:	212d      	movs	r1, #45	; 0x2d
 800153e:	2032      	movs	r0, #50	; 0x32
 8001540:	f7ff fe1a 	bl	8001178 <LCD_DrawString>
	LCD_OpenWindow(15, 60, 100, 250);
 8001544:	23fa      	movs	r3, #250	; 0xfa
 8001546:	2264      	movs	r2, #100	; 0x64
 8001548:	213c      	movs	r1, #60	; 0x3c
 800154a:	200f      	movs	r0, #15
 800154c:	f7ff fd2c 	bl	8000fa8 <LCD_OpenWindow>
	LCD_FillColor(100*250, GREEN);
 8001550:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001554:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001558:	f7ff fd7f 	bl	800105a <LCD_FillColor>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <Button1_On+0x84>)
 8001564:	f002 ffa9 	bl	80044ba <HAL_GPIO_WritePin>
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000388 	.word	0x20000388
 8001574:	2000038a 	.word	0x2000038a
 8001578:	080081e4 	.word	0x080081e4
 800157c:	40011000 	.word	0x40011000

08001580 <Button2_On>:

//turn on button two function
void Button2_On()
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af02      	add	r7, sp, #8
	button2 = 1;
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <Button2_On+0x78>)
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
	LCD_Clear(165, 45,25, 15, WHITE);
 800158c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	230f      	movs	r3, #15
 8001594:	2219      	movs	r2, #25
 8001596:	212d      	movs	r1, #45	; 0x2d
 8001598:	20a5      	movs	r0, #165	; 0xa5
 800159a:	f7ff fd7c 	bl	8001096 <LCD_Clear>
	if(light_dark_mode == DARK)
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <Button2_On+0x7c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d109      	bne.n	80015ba <Button2_On+0x3a>
		LCD_DrawString(165, 45, "ON  ", WHITE, BLACK);
 80015a6:	2300      	movs	r3, #0
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ae:	4a14      	ldr	r2, [pc, #80]	; (8001600 <Button2_On+0x80>)
 80015b0:	212d      	movs	r1, #45	; 0x2d
 80015b2:	20a5      	movs	r0, #165	; 0xa5
 80015b4:	f7ff fde0 	bl	8001178 <LCD_DrawString>
 80015b8:	e008      	b.n	80015cc <Button2_On+0x4c>
	else
		LCD_DrawString(165, 45, "ON  ", BLACK, WHITE);
 80015ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <Button2_On+0x80>)
 80015c4:	212d      	movs	r1, #45	; 0x2d
 80015c6:	20a5      	movs	r0, #165	; 0xa5
 80015c8:	f7ff fdd6 	bl	8001178 <LCD_DrawString>
	LCD_OpenWindow(125, 60, 100, 250);
 80015cc:	23fa      	movs	r3, #250	; 0xfa
 80015ce:	2264      	movs	r2, #100	; 0x64
 80015d0:	213c      	movs	r1, #60	; 0x3c
 80015d2:	207d      	movs	r0, #125	; 0x7d
 80015d4:	f7ff fce8 	bl	8000fa8 <LCD_OpenWindow>
	LCD_FillColor(100*250, GREEN);
 80015d8:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80015dc:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80015e0:	f7ff fd3b 	bl	800105a <LCD_FillColor>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <Button2_On+0x84>)
 80015ec:	f002 ff65 	bl	80044ba <HAL_GPIO_WritePin>
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000389 	.word	0x20000389
 80015fc:	2000038a 	.word	0x2000038a
 8001600:	080081e4 	.word	0x080081e4
 8001604:	40011000 	.word	0x40011000

08001608 <Button1_Off>:

//turn off button one function
void Button1_Off()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af02      	add	r7, sp, #8
	button1 = 0;
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <Button1_Off+0x78>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
	LCD_Clear(50, 45, 25, 15, WHITE);
 8001614:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	230f      	movs	r3, #15
 800161c:	2219      	movs	r2, #25
 800161e:	212d      	movs	r1, #45	; 0x2d
 8001620:	2032      	movs	r0, #50	; 0x32
 8001622:	f7ff fd38 	bl	8001096 <LCD_Clear>
	if(light_dark_mode == DARK)
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <Button1_Off+0x7c>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d109      	bne.n	8001642 <Button1_Off+0x3a>
		LCD_DrawString(50, 45, "OFF ", WHITE, BLACK);
 800162e:	2300      	movs	r3, #0
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001636:	4a14      	ldr	r2, [pc, #80]	; (8001688 <Button1_Off+0x80>)
 8001638:	212d      	movs	r1, #45	; 0x2d
 800163a:	2032      	movs	r0, #50	; 0x32
 800163c:	f7ff fd9c 	bl	8001178 <LCD_DrawString>
 8001640:	e008      	b.n	8001654 <Button1_Off+0x4c>
	else
		LCD_DrawString(50, 45, "OFF ", BLACK, WHITE);
 8001642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2300      	movs	r3, #0
 800164a:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <Button1_Off+0x80>)
 800164c:	212d      	movs	r1, #45	; 0x2d
 800164e:	2032      	movs	r0, #50	; 0x32
 8001650:	f7ff fd92 	bl	8001178 <LCD_DrawString>
	LCD_OpenWindow(15, 60, 100, 250);
 8001654:	23fa      	movs	r3, #250	; 0xfa
 8001656:	2264      	movs	r2, #100	; 0x64
 8001658:	213c      	movs	r1, #60	; 0x3c
 800165a:	200f      	movs	r0, #15
 800165c:	f7ff fca4 	bl	8000fa8 <LCD_OpenWindow>
	LCD_FillColor(100*250, RED);
 8001660:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001664:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001668:	f7ff fcf7 	bl	800105a <LCD_FillColor>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001672:	4806      	ldr	r0, [pc, #24]	; (800168c <Button1_Off+0x84>)
 8001674:	f002 ff21 	bl	80044ba <HAL_GPIO_WritePin>
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000388 	.word	0x20000388
 8001684:	2000038a 	.word	0x2000038a
 8001688:	080081ec 	.word	0x080081ec
 800168c:	40011000 	.word	0x40011000

08001690 <Button2_Off>:

//turn off button two function
void Button2_Off()
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af02      	add	r7, sp, #8
	button2 = 0;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <Button2_Off+0x78>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
	LCD_Clear(165, 45,25, 15, WHITE);
 800169c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	230f      	movs	r3, #15
 80016a4:	2219      	movs	r2, #25
 80016a6:	212d      	movs	r1, #45	; 0x2d
 80016a8:	20a5      	movs	r0, #165	; 0xa5
 80016aa:	f7ff fcf4 	bl	8001096 <LCD_Clear>
	if(light_dark_mode == DARK)
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <Button2_Off+0x7c>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d109      	bne.n	80016ca <Button2_Off+0x3a>
		LCD_DrawString(165, 45, "OFF ", WHITE, BLACK);
 80016b6:	2300      	movs	r3, #0
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016be:	4a14      	ldr	r2, [pc, #80]	; (8001710 <Button2_Off+0x80>)
 80016c0:	212d      	movs	r1, #45	; 0x2d
 80016c2:	20a5      	movs	r0, #165	; 0xa5
 80016c4:	f7ff fd58 	bl	8001178 <LCD_DrawString>
 80016c8:	e008      	b.n	80016dc <Button2_Off+0x4c>
	else
		LCD_DrawString(165, 45, "OFF ", BLACK, WHITE);
 80016ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2300      	movs	r3, #0
 80016d2:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <Button2_Off+0x80>)
 80016d4:	212d      	movs	r1, #45	; 0x2d
 80016d6:	20a5      	movs	r0, #165	; 0xa5
 80016d8:	f7ff fd4e 	bl	8001178 <LCD_DrawString>
	LCD_OpenWindow(125, 60, 100, 250);
 80016dc:	23fa      	movs	r3, #250	; 0xfa
 80016de:	2264      	movs	r2, #100	; 0x64
 80016e0:	213c      	movs	r1, #60	; 0x3c
 80016e2:	207d      	movs	r0, #125	; 0x7d
 80016e4:	f7ff fc60 	bl	8000fa8 <LCD_OpenWindow>
	LCD_FillColor(100*250, RED);
 80016e8:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80016ec:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80016f0:	f7ff fcb3 	bl	800105a <LCD_FillColor>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fa:	4806      	ldr	r0, [pc, #24]	; (8001714 <Button2_Off+0x84>)
 80016fc:	f002 fedd 	bl	80044ba <HAL_GPIO_WritePin>
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000389 	.word	0x20000389
 800170c:	2000038a 	.word	0x2000038a
 8001710:	080081ec 	.word	0x080081ec
 8001714:	40011000 	.word	0x40011000

08001718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171e:	f001 fe47 	bl	80033b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001722:	f000 fa0f 	bl	8001b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001726:	f000 fc0d 	bl	8001f44 <MX_GPIO_Init>
  MX_FSMC_Init();
 800172a:	f000 fcf7 	bl	800211c <MX_FSMC_Init>
  MX_I2C1_Init();
 800172e:	f000 faa7 	bl	8001c80 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001732:	f000 fb09 	bl	8001d48 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001736:	f000 fb57 	bl	8001de8 <MX_TIM2_Init>
  MX_SPI1_Init();
 800173a:	f000 facf 	bl	8001cdc <MX_SPI1_Init>
  MX_TIM5_Init();
 800173e:	f000 fbad 	bl	8001e9c <MX_TIM5_Init>
  MX_ADC1_Init();
 8001742:	f000 fa5f 	bl	8001c04 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8001746:	f7ff faac 	bl	8000ca2 <LCD_INIT>
  HAL_TIM_Base_Start(&htim1);
 800174a:	4875      	ldr	r0, [pc, #468]	; (8001920 <main+0x208>)
 800174c:	f004 fa4c 	bl	8005be8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8001750:	4874      	ldr	r0, [pc, #464]	; (8001924 <main+0x20c>)
 8001752:	f004 fa49 	bl	8005be8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8001756:	4874      	ldr	r0, [pc, #464]	; (8001928 <main+0x210>)
 8001758:	f004 fa46 	bl	8005be8 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800175c:	4b70      	ldr	r3, [pc, #448]	; (8001920 <main+0x208>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
  GPIO_PinState prevButtonState = GPIO_PIN_RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4);
 8001768:	210c      	movs	r1, #12
 800176a:	486f      	ldr	r0, [pc, #444]	; (8001928 <main+0x210>)
 800176c:	f004 fb32 	bl	8005dd4 <HAL_TIM_IC_Start_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001776:	486d      	ldr	r0, [pc, #436]	; (800192c <main+0x214>)
 8001778:	f002 fe9f 	bl	80044ba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800177c:	2200      	movs	r2, #0
 800177e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001782:	486a      	ldr	r0, [pc, #424]	; (800192c <main+0x214>)
 8001784:	f002 fe99 	bl	80044ba <HAL_GPIO_WritePin>
  PN532_SPI_Init(&pn532);
 8001788:	4869      	ldr	r0, [pc, #420]	; (8001930 <main+0x218>)
 800178a:	f001 facb 	bl	8002d24 <PN532_SPI_Init>
  PN532_SamConfiguration(&pn532);
 800178e:	4868      	ldr	r0, [pc, #416]	; (8001930 <main+0x218>)
 8001790:	f001 f8fa 	bl	8002988 <PN532_SamConfiguration>
  HAL_ADC_Start(&hadc1);
 8001794:	4867      	ldr	r0, [pc, #412]	; (8001934 <main+0x21c>)
 8001796:	f001 ff7b 	bl	8003690 <HAL_ADC_Start>
  TIM_SET_CAPTUREPOLARITY(&htim5,TIM_CHANNEL_4,TIM_ICPOLARITY_FALLING);
 800179a:	4b63      	ldr	r3, [pc, #396]	; (8001928 <main+0x210>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6a1a      	ldr	r2, [r3, #32]
 80017a0:	4b61      	ldr	r3, [pc, #388]	; (8001928 <main+0x210>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017a8:	621a      	str	r2, [r3, #32]
  TIM2->ARR = 1893;
 80017aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017ae:	f240 7265 	movw	r2, #1893	; 0x765
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->CCR2 = TIM2->ARR/2;
 80017b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017be:	085b      	lsrs	r3, r3, #1
 80017c0:	6393      	str	r3, [r2, #56]	; 0x38
  char stage[10] = "menu";
 80017c2:	4a5d      	ldr	r2, [pc, #372]	; (8001938 <main+0x220>)
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ca:	6018      	str	r0, [r3, #0]
 80017cc:	3304      	adds	r3, #4
 80017ce:	7019      	strb	r1, [r3, #0]
 80017d0:	f107 0309 	add.w	r3, r7, #9
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	711a      	strb	r2, [r3, #4]
  if(DEVICE)
	  PrintDevice_light(0,0,0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2000      	movs	r0, #0
 80017e0:	f7ff fd00 	bl	80011e4 <PrintDevice_light>
			x=0;y=0;
	  }

	  if(DEVICE)
	  {
		  if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 80017e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017e8:	4852      	ldr	r0, [pc, #328]	; (8001934 <main+0x21c>)
 80017ea:	f001 ffff 	bl	80037ec <HAL_ADC_PollForConversion>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d130      	bne.n	8001856 <main+0x13e>
		  {
			  int ADCValue1 = HAL_ADC_GetValue(&hadc1);
 80017f4:	484f      	ldr	r0, [pc, #316]	; (8001934 <main+0x21c>)
 80017f6:	f002 f8ff 	bl	80039f8 <HAL_ADC_GetValue>
 80017fa:	4603      	mov	r3, r0
 80017fc:	613b      	str	r3, [r7, #16]
			  if(ADCValue1 < 3750)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	f640 62a5 	movw	r2, #3749	; 0xea5
 8001804:	4293      	cmp	r3, r2
 8001806:	dc13      	bgt.n	8001830 <main+0x118>
			  {
				  if(!open)
 8001808:	4b4c      	ldr	r3, [pc, #304]	; (800193c <main+0x224>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d108      	bne.n	8001822 <main+0x10a>
					  PrintDevice_light(user, button1, button2);
 8001810:	4b4b      	ldr	r3, [pc, #300]	; (8001940 <main+0x228>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4a4b      	ldr	r2, [pc, #300]	; (8001944 <main+0x22c>)
 8001816:	7811      	ldrb	r1, [r2, #0]
 8001818:	4a4b      	ldr	r2, [pc, #300]	; (8001948 <main+0x230>)
 800181a:	7812      	ldrb	r2, [r2, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fce1 	bl	80011e4 <PrintDevice_light>
				  open = 1;
 8001822:	4b46      	ldr	r3, [pc, #280]	; (800193c <main+0x224>)
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
				  light_dark_mode = LIGHT;
 8001828:	4b48      	ldr	r3, [pc, #288]	; (800194c <main+0x234>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
 800182e:	e012      	b.n	8001856 <main+0x13e>
			  }
			  else
			  {
				  if(open)
 8001830:	4b42      	ldr	r3, [pc, #264]	; (800193c <main+0x224>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <main+0x132>
					  PrintDevice_dark(user, button1, button2);
 8001838:	4b41      	ldr	r3, [pc, #260]	; (8001940 <main+0x228>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4a41      	ldr	r2, [pc, #260]	; (8001944 <main+0x22c>)
 800183e:	7811      	ldrb	r1, [r2, #0]
 8001840:	4a41      	ldr	r2, [pc, #260]	; (8001948 <main+0x230>)
 8001842:	7812      	ldrb	r2, [r2, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fd79 	bl	800133c <PrintDevice_dark>
				  open = 0;
 800184a:	4b3c      	ldr	r3, [pc, #240]	; (800193c <main+0x224>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
				  light_dark_mode = DARK;
 8001850:	4b3e      	ldr	r3, [pc, #248]	; (800194c <main+0x234>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  if(user_change == 1)
 8001856:	4b3e      	ldr	r3, [pc, #248]	; (8001950 <main+0x238>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b01      	cmp	r3, #1
 800185c:	f040 808c 	bne.w	8001978 <main+0x260>
		  {
			  if(light_dark_mode == LIGHT)
 8001860:	4b3a      	ldr	r3, [pc, #232]	; (800194c <main+0x234>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d109      	bne.n	800187c <main+0x164>
				  LCD_Clear(50, 20, 160, 20, WHITE);
 8001868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2314      	movs	r3, #20
 8001870:	22a0      	movs	r2, #160	; 0xa0
 8001872:	2114      	movs	r1, #20
 8001874:	2032      	movs	r0, #50	; 0x32
 8001876:	f7ff fc0e 	bl	8001096 <LCD_Clear>
 800187a:	e007      	b.n	800188c <main+0x174>
			  else
				  LCD_Clear(50, 20, 160, 20, BLACK);
 800187c:	2300      	movs	r3, #0
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2314      	movs	r3, #20
 8001882:	22a0      	movs	r2, #160	; 0xa0
 8001884:	2114      	movs	r1, #20
 8001886:	2032      	movs	r0, #50	; 0x32
 8001888:	f7ff fc05 	bl	8001096 <LCD_Clear>
			  if(user == CHRIS)
 800188c:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <main+0x228>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d117      	bne.n	80018c4 <main+0x1ac>
			  {
				  if(light_dark_mode == LIGHT)
 8001894:	4b2d      	ldr	r3, [pc, #180]	; (800194c <main+0x234>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d109      	bne.n	80018b0 <main+0x198>
					  LCD_DrawString(60, 20, "Welcome! Chris!", BLACK, WHITE);
 800189c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2300      	movs	r3, #0
 80018a4:	4a2b      	ldr	r2, [pc, #172]	; (8001954 <main+0x23c>)
 80018a6:	2114      	movs	r1, #20
 80018a8:	203c      	movs	r0, #60	; 0x3c
 80018aa:	f7ff fc65 	bl	8001178 <LCD_DrawString>
 80018ae:	e060      	b.n	8001972 <main+0x25a>
				  else
					  LCD_DrawString(60, 20, "Welcome! Chris!", WHITE, BLACK);
 80018b0:	2300      	movs	r3, #0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b8:	4a26      	ldr	r2, [pc, #152]	; (8001954 <main+0x23c>)
 80018ba:	2114      	movs	r1, #20
 80018bc:	203c      	movs	r0, #60	; 0x3c
 80018be:	f7ff fc5b 	bl	8001178 <LCD_DrawString>
 80018c2:	e056      	b.n	8001972 <main+0x25a>
			  }
			  else if(user == JONATHAN)
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <main+0x228>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d117      	bne.n	80018fc <main+0x1e4>
			  {
				  if(light_dark_mode == LIGHT)
 80018cc:	4b1f      	ldr	r3, [pc, #124]	; (800194c <main+0x234>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d109      	bne.n	80018e8 <main+0x1d0>
					  LCD_DrawString(60, 20, "Welcome! Jonathan!", BLACK, WHITE);
 80018d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2300      	movs	r3, #0
 80018dc:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <main+0x240>)
 80018de:	2114      	movs	r1, #20
 80018e0:	203c      	movs	r0, #60	; 0x3c
 80018e2:	f7ff fc49 	bl	8001178 <LCD_DrawString>
 80018e6:	e044      	b.n	8001972 <main+0x25a>
				  else
					  LCD_DrawString(60, 20, "Welcome! Jonathan!", WHITE, BLACK);
 80018e8:	2300      	movs	r3, #0
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f0:	4a19      	ldr	r2, [pc, #100]	; (8001958 <main+0x240>)
 80018f2:	2114      	movs	r1, #20
 80018f4:	203c      	movs	r0, #60	; 0x3c
 80018f6:	f7ff fc3f 	bl	8001178 <LCD_DrawString>
 80018fa:	e03a      	b.n	8001972 <main+0x25a>
			  }
			  else if(user == NOUSER)
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <main+0x228>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d136      	bne.n	8001972 <main+0x25a>
			  {
				  if(light_dark_mode == LIGHT)
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <main+0x234>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d129      	bne.n	8001960 <main+0x248>
					  LCD_DrawString(60, 20, "Device locked", BLACK, WHITE);
 800190c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	4a11      	ldr	r2, [pc, #68]	; (800195c <main+0x244>)
 8001916:	2114      	movs	r1, #20
 8001918:	203c      	movs	r0, #60	; 0x3c
 800191a:	f7ff fc2d 	bl	8001178 <LCD_DrawString>
 800191e:	e028      	b.n	8001972 <main+0x25a>
 8001920:	20000238 	.word	0x20000238
 8001924:	20000280 	.word	0x20000280
 8001928:	200002c8 	.word	0x200002c8
 800192c:	40011000 	.word	0x40011000
 8001930:	20000440 	.word	0x20000440
 8001934:	2000015c 	.word	0x2000015c
 8001938:	08008204 	.word	0x08008204
 800193c:	20000458 	.word	0x20000458
 8001940:	20000459 	.word	0x20000459
 8001944:	20000388 	.word	0x20000388
 8001948:	20000389 	.word	0x20000389
 800194c:	2000038a 	.word	0x2000038a
 8001950:	2000045a 	.word	0x2000045a
 8001954:	080081bc 	.word	0x080081bc
 8001958:	080081a8 	.word	0x080081a8
 800195c:	080081f4 	.word	0x080081f4
				  else
					  LCD_DrawString(60, 20, "Device locked", WHITE, BLACK);
 8001960:	2300      	movs	r3, #0
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001968:	4a6c      	ldr	r2, [pc, #432]	; (8001b1c <main+0x404>)
 800196a:	2114      	movs	r1, #20
 800196c:	203c      	movs	r0, #60	; 0x3c
 800196e:	f7ff fc03 	bl	8001178 <LCD_DrawString>
			  }
			  user_change = 0;
 8001972:	4b6b      	ldr	r3, [pc, #428]	; (8001b20 <main+0x408>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
		  }
		  if(user == NOUSER)
 8001978:	4b6a      	ldr	r3, [pc, #424]	; (8001b24 <main+0x40c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d112      	bne.n	80019a6 <main+0x28e>
		  {
			  memset(uid, 0, sizeof(uid));
 8001980:	220a      	movs	r2, #10
 8001982:	2100      	movs	r1, #0
 8001984:	4868      	ldr	r0, [pc, #416]	; (8001b28 <main+0x410>)
 8001986:	f005 fc4d 	bl	8007224 <memset>
			  uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 800198a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198e:	2200      	movs	r2, #0
 8001990:	4965      	ldr	r1, [pc, #404]	; (8001b28 <main+0x410>)
 8001992:	4866      	ldr	r0, [pc, #408]	; (8001b2c <main+0x414>)
 8001994:	f001 f81a 	bl	80029cc <PN532_ReadPassiveTarget>
 8001998:	4603      	mov	r3, r0
 800199a:	4a65      	ldr	r2, [pc, #404]	; (8001b30 <main+0x418>)
 800199c:	6013      	str	r3, [r2, #0]
			  HAL_Delay(1000);
 800199e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019a2:	f001 fd67 	bl	8003474 <HAL_Delay>
		  }
		  XPT2046_TouchEvenHandler(&stage, &x, &y);
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	4a62      	ldr	r2, [pc, #392]	; (8001b34 <main+0x41c>)
 80019aa:	4963      	ldr	r1, [pc, #396]	; (8001b38 <main+0x420>)
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f927 	bl	8000c00 <XPT2046_TouchEvenHandler>
		  if(uid[0] == 19 && uid[1] == 2 && uid[2] == 48 && uid[3] == 37)
 80019b2:	4b5d      	ldr	r3, [pc, #372]	; (8001b28 <main+0x410>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b13      	cmp	r3, #19
 80019b8:	d116      	bne.n	80019e8 <main+0x2d0>
 80019ba:	4b5b      	ldr	r3, [pc, #364]	; (8001b28 <main+0x410>)
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d112      	bne.n	80019e8 <main+0x2d0>
 80019c2:	4b59      	ldr	r3, [pc, #356]	; (8001b28 <main+0x410>)
 80019c4:	789b      	ldrb	r3, [r3, #2]
 80019c6:	2b30      	cmp	r3, #48	; 0x30
 80019c8:	d10e      	bne.n	80019e8 <main+0x2d0>
 80019ca:	4b57      	ldr	r3, [pc, #348]	; (8001b28 <main+0x410>)
 80019cc:	78db      	ldrb	r3, [r3, #3]
 80019ce:	2b25      	cmp	r3, #37	; 0x25
 80019d0:	d10a      	bne.n	80019e8 <main+0x2d0>
		  {
			  user = JONATHAN;
 80019d2:	4b54      	ldr	r3, [pc, #336]	; (8001b24 <main+0x40c>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
			  user_change = 1;
 80019d8:	4b51      	ldr	r3, [pc, #324]	; (8001b20 <main+0x408>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
			  memset(uid, 0, sizeof(uid));
 80019de:	220a      	movs	r2, #10
 80019e0:	2100      	movs	r1, #0
 80019e2:	4851      	ldr	r0, [pc, #324]	; (8001b28 <main+0x410>)
 80019e4:	f005 fc1e 	bl	8007224 <memset>
		  }
		  if(uid[0] == 67 && uid[1] == 79 && uid[2] == 229 && uid[3] == 247)
 80019e8:	4b4f      	ldr	r3, [pc, #316]	; (8001b28 <main+0x410>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b43      	cmp	r3, #67	; 0x43
 80019ee:	d116      	bne.n	8001a1e <main+0x306>
 80019f0:	4b4d      	ldr	r3, [pc, #308]	; (8001b28 <main+0x410>)
 80019f2:	785b      	ldrb	r3, [r3, #1]
 80019f4:	2b4f      	cmp	r3, #79	; 0x4f
 80019f6:	d112      	bne.n	8001a1e <main+0x306>
 80019f8:	4b4b      	ldr	r3, [pc, #300]	; (8001b28 <main+0x410>)
 80019fa:	789b      	ldrb	r3, [r3, #2]
 80019fc:	2be5      	cmp	r3, #229	; 0xe5
 80019fe:	d10e      	bne.n	8001a1e <main+0x306>
 8001a00:	4b49      	ldr	r3, [pc, #292]	; (8001b28 <main+0x410>)
 8001a02:	78db      	ldrb	r3, [r3, #3]
 8001a04:	2bf7      	cmp	r3, #247	; 0xf7
 8001a06:	d10a      	bne.n	8001a1e <main+0x306>
		  {
			  user = CHRIS;
 8001a08:	4b46      	ldr	r3, [pc, #280]	; (8001b24 <main+0x40c>)
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	701a      	strb	r2, [r3, #0]
			  user_change = 1;
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <main+0x408>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
			  memset(uid, 0, sizeof(uid));
 8001a14:	220a      	movs	r2, #10
 8001a16:	2100      	movs	r1, #0
 8001a18:	4843      	ldr	r0, [pc, #268]	; (8001b28 <main+0x410>)
 8001a1a:	f005 fc03 	bl	8007224 <memset>
		  }
		  if(user == NOUSER)
 8001a1e:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <main+0x40c>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d077      	beq.n	8001b16 <main+0x3fe>
			  continue;

		  if((x>10&&x<105)&&(y>115&&y<300))
 8001a26:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <main+0x420>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b0a      	cmp	r3, #10
 8001a2c:	dd0e      	ble.n	8001a4c <main+0x334>
 8001a2e:	4b42      	ldr	r3, [pc, #264]	; (8001b38 <main+0x420>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b68      	cmp	r3, #104	; 0x68
 8001a34:	dc0a      	bgt.n	8001a4c <main+0x334>
 8001a36:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <main+0x41c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b73      	cmp	r3, #115	; 0x73
 8001a3c:	dd06      	ble.n	8001a4c <main+0x334>
 8001a3e:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <main+0x41c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a46:	da01      	bge.n	8001a4c <main+0x334>
		  {
			  Update_Button1();
 8001a48:	f7ff fd36 	bl	80014b8 <Update_Button1>
		  }
		  if((x>125&&x<230)&&(y>115&&y<300))
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <main+0x420>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b7d      	cmp	r3, #125	; 0x7d
 8001a52:	dd0e      	ble.n	8001a72 <main+0x35a>
 8001a54:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <main+0x420>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2be5      	cmp	r3, #229	; 0xe5
 8001a5a:	dc0a      	bgt.n	8001a72 <main+0x35a>
 8001a5c:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <main+0x41c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b73      	cmp	r3, #115	; 0x73
 8001a62:	dd06      	ble.n	8001a72 <main+0x35a>
 8001a64:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <main+0x41c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a6c:	da01      	bge.n	8001a72 <main+0x35a>
		  {
			  Update_Button2();
 8001a6e:	f7ff fd33 	bl	80014d8 <Update_Button2>
		  }
			if(receive_Flag)
 8001a72:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <main+0x424>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d046      	beq.n	8001b08 <main+0x3f0>
				{
					Find_Data(&receive_Code);
 8001a7a:	4831      	ldr	r0, [pc, #196]	; (8001b40 <main+0x428>)
 8001a7c:	f7ff fd08 	bl	8001490 <Find_Data>
					switch(receive_Code)
 8001a80:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <main+0x428>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d80f      	bhi.n	8001aa8 <main+0x390>
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d03a      	beq.n	8001b02 <main+0x3ea>
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d837      	bhi.n	8001b02 <main+0x3ea>
 8001a92:	a201      	add	r2, pc, #4	; (adr r2, 8001a98 <main+0x380>)
 8001a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a98:	08001aaf 	.word	0x08001aaf
 8001a9c:	08001abb 	.word	0x08001abb
 8001aa0:	08001ac7 	.word	0x08001ac7
 8001aa4:	08001ad7 	.word	0x08001ad7
 8001aa8:	2b69      	cmp	r3, #105	; 0x69
 8001aaa:	d01c      	beq.n	8001ae6 <main+0x3ce>
 8001aac:	e029      	b.n	8001b02 <main+0x3ea>
					{
						case BUTTON1:
							Update_Button1();
 8001aae:	f7ff fd03 	bl	80014b8 <Update_Button1>
							receive_Flag = 0;
 8001ab2:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <main+0x424>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
							break;
 8001ab8:	e023      	b.n	8001b02 <main+0x3ea>
						case BUTTON2:
							Update_Button2();
 8001aba:	f7ff fd0d 	bl	80014d8 <Update_Button2>
							receive_Flag = 0;
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <main+0x424>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
							break;
 8001ac4:	e01d      	b.n	8001b02 <main+0x3ea>
						case BUTTON3:
							Button1_Off();
 8001ac6:	f7ff fd9f 	bl	8001608 <Button1_Off>
							Button2_Off();
 8001aca:	f7ff fde1 	bl	8001690 <Button2_Off>
							receive_Flag = 0;
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <main+0x424>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
							break;
 8001ad4:	e015      	b.n	8001b02 <main+0x3ea>
						case BUTTON4:
							Button1_On();
 8001ad6:	f7ff fd0f 	bl	80014f8 <Button1_On>
							Button2_On();
 8001ada:	f7ff fd51 	bl	8001580 <Button2_On>
							receive_Flag = 0;
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <main+0x424>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
							break;
 8001ae4:	e00d      	b.n	8001b02 <main+0x3ea>
						case POWER:
							if(user != 0)
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <main+0x40c>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <main+0x3dc>
							{
								user = NOUSER;
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <main+0x40c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
							}
							receive_Flag = 0;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <main+0x424>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
							user_change = 1;
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <main+0x408>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
							break;
 8001b00:	bf00      	nop
					}
					receive_Flag = 0;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <main+0x424>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
				}
			x=0;y=0;
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <main+0x420>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <main+0x41c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e666      	b.n	80017e4 <main+0xcc>
			  continue;
 8001b16:	bf00      	nop
	  if(REMOTE)
 8001b18:	e664      	b.n	80017e4 <main+0xcc>
 8001b1a:	bf00      	nop
 8001b1c:	080081f4 	.word	0x080081f4
 8001b20:	2000045a 	.word	0x2000045a
 8001b24:	20000459 	.word	0x20000459
 8001b28:	20000430 	.word	0x20000430
 8001b2c:	20000440 	.word	0x20000440
 8001b30:	2000043c 	.word	0x2000043c
 8001b34:	2000042c 	.word	0x2000042c
 8001b38:	20000428 	.word	0x20000428
 8001b3c:	2000037d 	.word	0x2000037d
 8001b40:	20000358 	.word	0x20000358

08001b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b096      	sub	sp, #88	; 0x58
 8001b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b4e:	2228      	movs	r2, #40	; 0x28
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f005 fb66 	bl	8007224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	611a      	str	r2, [r3, #16]
 8001b76:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001b78:	2309      	movs	r3, #9
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b86:	2301      	movs	r3, #1
 8001b88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b96:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b98:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b9c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f002 fe08 	bl	80047b8 <HAL_RCC_OscConfig>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001bae:	f000 fbef 	bl	8002390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb2:	230f      	movs	r3, #15
 8001bb4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	2102      	movs	r1, #2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 f874 	bl	8004cbc <HAL_RCC_ClockConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bda:	f000 fbd9 	bl	8002390 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bde:	2302      	movs	r3, #2
 8001be0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001be6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 f9f4 	bl	8004fd8 <HAL_RCCEx_PeriphCLKConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001bf6:	f000 fbcb 	bl	8002390 <Error_Handler>
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3758      	adds	r7, #88	; 0x58
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <MX_ADC1_Init+0x74>)
 8001c16:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <MX_ADC1_Init+0x78>)
 8001c18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <MX_ADC1_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <MX_ADC1_Init+0x74>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_ADC1_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <MX_ADC1_Init+0x74>)
 8001c2e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <MX_ADC1_Init+0x74>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_ADC1_Init+0x74>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c40:	480d      	ldr	r0, [pc, #52]	; (8001c78 <MX_ADC1_Init+0x74>)
 8001c42:	f001 fc3b 	bl	80034bc <HAL_ADC_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001c4c:	f000 fba0 	bl	8002390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c50:	2304      	movs	r3, #4
 8001c52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_ADC1_Init+0x74>)
 8001c62:	f001 fed5 	bl	8003a10 <HAL_ADC_ConfigChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001c6c:	f000 fb90 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	2000015c 	.word	0x2000015c
 8001c7c:	40012400 	.word	0x40012400

08001c80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001c86:	4a13      	ldr	r2, [pc, #76]	; (8001cd4 <MX_I2C1_Init+0x54>)
 8001c88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001c8c:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <MX_I2C1_Init+0x58>)
 8001c8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001c9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ca2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cbc:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001cbe:	f002 fc37 	bl	8004530 <HAL_I2C_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cc8:	f000 fb62 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	2000018c 	.word	0x2000018c
 8001cd4:	40005400 	.word	0x40005400
 8001cd8:	00061a80 	.word	0x00061a80

08001cdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001ce2:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <MX_SPI1_Init+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ce6:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001ce8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d10:	2230      	movs	r2, #48	; 0x30
 8001d12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d28:	220a      	movs	r2, #10
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d2c:	4804      	ldr	r0, [pc, #16]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d2e:	f003 fae1 	bl	80052f4 <HAL_SPI_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d38:	f000 fb2a 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	200001e0 	.word	0x200001e0
 8001d44:	40013000 	.word	0x40013000

08001d48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4e:	f107 0308 	add.w	r3, r7, #8
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d64:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001d66:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <MX_TIM1_Init+0x9c>)
 8001d68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001d6c:	2247      	movs	r2, #71	; 0x47
 8001d6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7e:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d90:	4813      	ldr	r0, [pc, #76]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001d92:	f003 feda 	bl	8005b4a <HAL_TIM_Base_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d9c:	f000 faf8 	bl	8002390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	4619      	mov	r1, r3
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001dae:	f004 fb91 	bl	80064d4 <HAL_TIM_ConfigClockSource>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001db8:	f000 faea 	bl	8002390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001dca:	f005 f8ad 	bl	8006f28 <HAL_TIMEx_MasterConfigSynchronization>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001dd4:	f000 fadc 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000238 	.word	0x20000238
 8001de4:	40012c00 	.word	0x40012c00

08001de8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dee:	f107 0320 	add.w	r3, r7, #32
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	611a      	str	r2, [r3, #16]
 8001e06:	615a      	str	r2, [r3, #20]
 8001e08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e0a:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <MX_TIM2_Init+0xb0>)
 8001e0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <MX_TIM2_Init+0xb0>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <MX_TIM2_Init+0xb0>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1895;
 8001e1e:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <MX_TIM2_Init+0xb0>)
 8001e20:	f240 7267 	movw	r2, #1895	; 0x767
 8001e24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <MX_TIM2_Init+0xb0>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <MX_TIM2_Init+0xb0>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e32:	4819      	ldr	r0, [pc, #100]	; (8001e98 <MX_TIM2_Init+0xb0>)
 8001e34:	f003 ff30 	bl	8005c98 <HAL_TIM_PWM_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001e3e:	f000 faa7 	bl	8002390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e4a:	f107 0320 	add.w	r3, r7, #32
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4811      	ldr	r0, [pc, #68]	; (8001e98 <MX_TIM2_Init+0xb0>)
 8001e52:	f005 f869 	bl	8006f28 <HAL_TIMEx_MasterConfigSynchronization>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001e5c:	f000 fa98 	bl	8002390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e60:	2360      	movs	r3, #96	; 0x60
 8001e62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 947;
 8001e64:	f240 33b3 	movw	r3, #947	; 0x3b3
 8001e68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	2208      	movs	r2, #8
 8001e76:	4619      	mov	r1, r3
 8001e78:	4807      	ldr	r0, [pc, #28]	; (8001e98 <MX_TIM2_Init+0xb0>)
 8001e7a:	f004 fa69 	bl	8006350 <HAL_TIM_PWM_ConfigChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001e84:	f000 fa84 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e88:	4803      	ldr	r0, [pc, #12]	; (8001e98 <MX_TIM2_Init+0xb0>)
 8001e8a:	f001 f8fb 	bl	8003084 <HAL_TIM_MspPostInit>

}
 8001e8e:	bf00      	nop
 8001e90:	3728      	adds	r7, #40	; 0x28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000280 	.word	0x20000280

08001e9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea2:	f107 0310 	add.w	r3, r7, #16
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001eac:	463b      	mov	r3, r7
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <MX_TIM5_Init+0xa0>)
 8001eba:	4a21      	ldr	r2, [pc, #132]	; (8001f40 <MX_TIM5_Init+0xa4>)
 8001ebc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71;
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <MX_TIM5_Init+0xa0>)
 8001ec0:	2247      	movs	r2, #71	; 0x47
 8001ec2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <MX_TIM5_Init+0xa0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <MX_TIM5_Init+0xa0>)
 8001ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <MX_TIM5_Init+0xa0>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed8:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <MX_TIM5_Init+0xa0>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001ede:	4817      	ldr	r0, [pc, #92]	; (8001f3c <MX_TIM5_Init+0xa0>)
 8001ee0:	f003 ff29 	bl	8005d36 <HAL_TIM_IC_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001eea:	f000 fa51 	bl	8002390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ef6:	f107 0310 	add.w	r3, r7, #16
 8001efa:	4619      	mov	r1, r3
 8001efc:	480f      	ldr	r0, [pc, #60]	; (8001f3c <MX_TIM5_Init+0xa0>)
 8001efe:	f005 f813 	bl	8006f28 <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001f08:	f000 fa42 	bl	8002390 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f10:	2301      	movs	r3, #1
 8001f12:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	220c      	movs	r2, #12
 8001f20:	4619      	mov	r1, r3
 8001f22:	4806      	ldr	r0, [pc, #24]	; (8001f3c <MX_TIM5_Init+0xa0>)
 8001f24:	f004 f978 	bl	8006218 <HAL_TIM_IC_ConfigChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8001f2e:	f000 fa2f 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200002c8 	.word	0x200002c8
 8001f40:	40000c00 	.word	0x40000c00

08001f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4a:	f107 0318 	add.w	r3, r7, #24
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f58:	4b69      	ldr	r3, [pc, #420]	; (8002100 <MX_GPIO_Init+0x1bc>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a68      	ldr	r2, [pc, #416]	; (8002100 <MX_GPIO_Init+0x1bc>)
 8001f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b66      	ldr	r3, [pc, #408]	; (8002100 <MX_GPIO_Init+0x1bc>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f70:	4b63      	ldr	r3, [pc, #396]	; (8002100 <MX_GPIO_Init+0x1bc>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4a62      	ldr	r2, [pc, #392]	; (8002100 <MX_GPIO_Init+0x1bc>)
 8001f76:	f043 0310 	orr.w	r3, r3, #16
 8001f7a:	6193      	str	r3, [r2, #24]
 8001f7c:	4b60      	ldr	r3, [pc, #384]	; (8002100 <MX_GPIO_Init+0x1bc>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f88:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <MX_GPIO_Init+0x1bc>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a5c      	ldr	r2, [pc, #368]	; (8002100 <MX_GPIO_Init+0x1bc>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b5a      	ldr	r3, [pc, #360]	; (8002100 <MX_GPIO_Init+0x1bc>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa0:	4b57      	ldr	r3, [pc, #348]	; (8002100 <MX_GPIO_Init+0x1bc>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	4a56      	ldr	r2, [pc, #344]	; (8002100 <MX_GPIO_Init+0x1bc>)
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	6193      	str	r3, [r2, #24]
 8001fac:	4b54      	ldr	r3, [pc, #336]	; (8002100 <MX_GPIO_Init+0x1bc>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb8:	4b51      	ldr	r3, [pc, #324]	; (8002100 <MX_GPIO_Init+0x1bc>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4a50      	ldr	r2, [pc, #320]	; (8002100 <MX_GPIO_Init+0x1bc>)
 8001fbe:	f043 0320 	orr.w	r3, r3, #32
 8001fc2:	6193      	str	r3, [r2, #24]
 8001fc4:	4b4e      	ldr	r3, [pc, #312]	; (8002100 <MX_GPIO_Init+0x1bc>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0320 	and.w	r3, r3, #32
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_Touch_Din_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2106      	movs	r1, #6
 8001fd4:	484b      	ldr	r0, [pc, #300]	; (8002104 <MX_GPIO_Init+0x1c0>)
 8001fd6:	f002 fa70 	bl	80044ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN532_SS_GPIO_Port, PN532_SS_Pin, GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2101      	movs	r1, #1
 8001fde:	484a      	ldr	r0, [pc, #296]	; (8002108 <MX_GPIO_Init+0x1c4>)
 8001fe0:	f002 fa6b 	bl	80044ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fea:	4847      	ldr	r0, [pc, #284]	; (8002108 <MX_GPIO_Init+0x1c4>)
 8001fec:	f002 fa65 	bl	80044ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCS_BL_Pin|LCD_Touch_Select_Pin, GPIO_PIN_RESET);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001ff6:	4845      	ldr	r0, [pc, #276]	; (800210c <MX_GPIO_Init+0x1c8>)
 8001ff8:	f002 fa5f 	bl	80044ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002002:	4843      	ldr	r0, [pc, #268]	; (8002110 <MX_GPIO_Init+0x1cc>)
 8002004:	f002 fa59 	bl	80044ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Touch_CLK_GPIO_Port, LCD_Touch_CLK_Pin, GPIO_PIN_SET);
 8002008:	2201      	movs	r2, #1
 800200a:	2101      	movs	r1, #1
 800200c:	483d      	ldr	r0, [pc, #244]	; (8002104 <MX_GPIO_Init+0x1c0>)
 800200e:	f002 fa54 	bl	80044ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_Touch_Din_Pin LCD_Touch_CLK_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_Touch_Din_Pin|LCD_Touch_CLK_Pin|LCD_RST_Pin;
 8002012:	2307      	movs	r3, #7
 8002014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002016:	2301      	movs	r3, #1
 8002018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	4619      	mov	r1, r3
 8002028:	4836      	ldr	r0, [pc, #216]	; (8002104 <MX_GPIO_Init+0x1c0>)
 800202a:	f002 f89b 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Touch_Dout_Pin LCD_Touch_IRQ_Pin */
  GPIO_InitStruct.Pin = LCD_Touch_Dout_Pin|LCD_Touch_IRQ_Pin;
 800202e:	2318      	movs	r3, #24
 8002030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002036:	2301      	movs	r3, #1
 8002038:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800203a:	f107 0318 	add.w	r3, r7, #24
 800203e:	4619      	mov	r1, r3
 8002040:	4830      	ldr	r0, [pc, #192]	; (8002104 <MX_GPIO_Init+0x1c0>)
 8002042:	f002 f88f 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002046:	2301      	movs	r3, #1
 8002048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800204e:	2301      	movs	r3, #1
 8002050:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0318 	add.w	r3, r7, #24
 8002056:	4619      	mov	r1, r3
 8002058:	482e      	ldr	r0, [pc, #184]	; (8002114 <MX_GPIO_Init+0x1d0>)
 800205a:	f002 f883 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PN532_SS_Pin PN532_RST_Pin */
  GPIO_InitStruct.Pin = PN532_SS_Pin|PN532_RST_Pin;
 800205e:	f240 4301 	movw	r3, #1025	; 0x401
 8002062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002064:	2301      	movs	r3, #1
 8002066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002068:	2301      	movs	r3, #1
 800206a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2302      	movs	r3, #2
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	f107 0318 	add.w	r3, r7, #24
 8002074:	4619      	mov	r1, r3
 8002076:	4824      	ldr	r0, [pc, #144]	; (8002108 <MX_GPIO_Init+0x1c4>)
 8002078:	f002 f874 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PN532_IRQ_Pin */
  GPIO_InitStruct.Pin = PN532_IRQ_Pin;
 800207c:	2302      	movs	r3, #2
 800207e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN532_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 0318 	add.w	r3, r7, #24
 800208c:	4619      	mov	r1, r3
 800208e:	481e      	ldr	r0, [pc, #120]	; (8002108 <MX_GPIO_Init+0x1c4>)
 8002090:	f002 f868 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCS_BL_Pin LCD_Touch_Select_Pin */
  GPIO_InitStruct.Pin = LCS_BL_Pin|LCD_Touch_Select_Pin;
 8002094:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209a:	2301      	movs	r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a6:	f107 0318 	add.w	r3, r7, #24
 80020aa:	4619      	mov	r1, r3
 80020ac:	4817      	ldr	r0, [pc, #92]	; (800210c <MX_GPIO_Init+0x1c8>)
 80020ae:	f002 f859 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b8:	2301      	movs	r3, #1
 80020ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020bc:	2301      	movs	r3, #1
 80020be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c4:	f107 0318 	add.w	r3, r7, #24
 80020c8:	4619      	mov	r1, r3
 80020ca:	4811      	ldr	r0, [pc, #68]	; (8002110 <MX_GPIO_Init+0x1cc>)
 80020cc:	f002 f84a 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020d0:	2320      	movs	r3, #32
 80020d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020d4:	4b10      	ldr	r3, [pc, #64]	; (8002118 <MX_GPIO_Init+0x1d4>)
 80020d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020dc:	f107 0318 	add.w	r3, r7, #24
 80020e0:	4619      	mov	r1, r3
 80020e2:	4809      	ldr	r0, [pc, #36]	; (8002108 <MX_GPIO_Init+0x1c4>)
 80020e4:	f002 f83e 	bl	8004164 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2100      	movs	r1, #0
 80020ec:	2017      	movs	r0, #23
 80020ee:	f001 fefa 	bl	8003ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020f2:	2017      	movs	r0, #23
 80020f4:	f001 ff13 	bl	8003f1e <HAL_NVIC_EnableIRQ>

}
 80020f8:	bf00      	nop
 80020fa:	3728      	adds	r7, #40	; 0x28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	40011800 	.word	0x40011800
 8002108:	40010c00 	.word	0x40010c00
 800210c:	40011400 	.word	0x40011400
 8002110:	40011000 	.word	0x40011000
 8002114:	40010800 	.word	0x40010800
 8002118:	10210000 	.word	0x10210000

0800211c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
 8002130:	615a      	str	r2, [r3, #20]
 8002132:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002134:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <MX_FSMC_Init+0xbc>)
 8002136:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800213a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800213c:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <MX_FSMC_Init+0xbc>)
 800213e:	4a27      	ldr	r2, [pc, #156]	; (80021dc <MX_FSMC_Init+0xc0>)
 8002140:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002142:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <MX_FSMC_Init+0xbc>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <MX_FSMC_Init+0xbc>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800214e:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <MX_FSMC_Init+0xbc>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002154:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <MX_FSMC_Init+0xbc>)
 8002156:	2210      	movs	r2, #16
 8002158:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800215a:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <MX_FSMC_Init+0xbc>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <MX_FSMC_Init+0xbc>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002166:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <MX_FSMC_Init+0xbc>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <MX_FSMC_Init+0xbc>)
 800216e:	2200      	movs	r2, #0
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002172:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <MX_FSMC_Init+0xbc>)
 8002174:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002178:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800217a:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <MX_FSMC_Init+0xbc>)
 800217c:	2200      	movs	r2, #0
 800217e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002180:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <MX_FSMC_Init+0xbc>)
 8002182:	2200      	movs	r2, #0
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002186:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <MX_FSMC_Init+0xbc>)
 8002188:	2200      	movs	r2, #0
 800218a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <MX_FSMC_Init+0xbc>)
 800218e:	2200      	movs	r2, #0
 8002190:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002192:	230f      	movs	r3, #15
 8002194:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002196:	230f      	movs	r3, #15
 8002198:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800219a:	23ff      	movs	r3, #255	; 0xff
 800219c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800219e:	230f      	movs	r3, #15
 80021a0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80021a2:	2310      	movs	r3, #16
 80021a4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80021a6:	2311      	movs	r3, #17
 80021a8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	2200      	movs	r2, #0
 80021b2:	4619      	mov	r1, r3
 80021b4:	4808      	ldr	r0, [pc, #32]	; (80021d8 <MX_FSMC_Init+0xbc>)
 80021b6:	f003 fc7b 	bl	8005ab0 <HAL_SRAM_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80021c0:	f000 f8e6 	bl	8002390 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_FSMC_Init+0xc4>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <MX_FSMC_Init+0xc4>)
 80021ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ce:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80021d0:	bf00      	nop
 80021d2:	3720      	adds	r7, #32
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000310 	.word	0x20000310
 80021dc:	a0000104 	.word	0xa0000104
 80021e0:	40010000 	.word	0x40010000

080021e4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	if(tim_mode_raise_or_falling == 0)
 80021ec:	4b5d      	ldr	r3, [pc, #372]	; (8002364 <HAL_TIM_IC_CaptureCallback+0x180>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d122      	bne.n	800223a <HAL_TIM_IC_CaptureCallback+0x56>
  {
    pwm_low_level_time = HAL_TIM_ReadCapturedValue(&htim5,TIM_CHANNEL_4) + 1;
 80021f4:	210c      	movs	r1, #12
 80021f6:	485c      	ldr	r0, [pc, #368]	; (8002368 <HAL_TIM_IC_CaptureCallback+0x184>)
 80021f8:	f004 fa34 	bl	8006664 <HAL_TIM_ReadCapturedValue>
 80021fc:	4603      	mov	r3, r0
 80021fe:	3301      	adds	r3, #1
 8002200:	4a5a      	ldr	r2, [pc, #360]	; (800236c <HAL_TIM_IC_CaptureCallback+0x188>)
 8002202:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COUNTER(&htim5,0);
 8002204:	4b58      	ldr	r3, [pc, #352]	; (8002368 <HAL_TIM_IC_CaptureCallback+0x184>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2200      	movs	r2, #0
 800220a:	625a      	str	r2, [r3, #36]	; 0x24
    TIM_RESET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_4);
 800220c:	4b56      	ldr	r3, [pc, #344]	; (8002368 <HAL_TIM_IC_CaptureCallback+0x184>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6a1a      	ldr	r2, [r3, #32]
 8002212:	4b55      	ldr	r3, [pc, #340]	; (8002368 <HAL_TIM_IC_CaptureCallback+0x184>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800221a:	621a      	str	r2, [r3, #32]
    TIM_SET_CAPTUREPOLARITY(&htim5,TIM_CHANNEL_4,TIM_ICPOLARITY_FALLING);
 800221c:	4b52      	ldr	r3, [pc, #328]	; (8002368 <HAL_TIM_IC_CaptureCallback+0x184>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6a1a      	ldr	r2, [r3, #32]
 8002222:	4b51      	ldr	r3, [pc, #324]	; (8002368 <HAL_TIM_IC_CaptureCallback+0x184>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800222a:	621a      	str	r2, [r3, #32]
    tim_mode_raise_or_falling = 1;
 800222c:	4b4d      	ldr	r3, [pc, #308]	; (8002364 <HAL_TIM_IC_CaptureCallback+0x180>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]
		ok2 = 0;
 8002232:	4b4f      	ldr	r3, [pc, #316]	; (8002370 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	e023      	b.n	8002282 <HAL_TIM_IC_CaptureCallback+0x9e>
  }
  else if(tim_mode_raise_or_falling == 1)
 800223a:	4b4a      	ldr	r3, [pc, #296]	; (8002364 <HAL_TIM_IC_CaptureCallback+0x180>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d11f      	bne.n	8002282 <HAL_TIM_IC_CaptureCallback+0x9e>
  {
    pwm_high_level_time = HAL_TIM_ReadCapturedValue(&htim5,TIM_CHANNEL_4) + 1;
 8002242:	210c      	movs	r1, #12
 8002244:	4848      	ldr	r0, [pc, #288]	; (8002368 <HAL_TIM_IC_CaptureCallback+0x184>)
 8002246:	f004 fa0d 	bl	8006664 <HAL_TIM_ReadCapturedValue>
 800224a:	4603      	mov	r3, r0
 800224c:	3301      	adds	r3, #1
 800224e:	4a49      	ldr	r2, [pc, #292]	; (8002374 <HAL_TIM_IC_CaptureCallback+0x190>)
 8002250:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COUNTER(&htim5,0);
 8002252:	4b45      	ldr	r3, [pc, #276]	; (8002368 <HAL_TIM_IC_CaptureCallback+0x184>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2200      	movs	r2, #0
 8002258:	625a      	str	r2, [r3, #36]	; 0x24
    TIM_RESET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_4);
 800225a:	4b43      	ldr	r3, [pc, #268]	; (8002368 <HAL_TIM_IC_CaptureCallback+0x184>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6a1a      	ldr	r2, [r3, #32]
 8002260:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_TIM_IC_CaptureCallback+0x184>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002268:	621a      	str	r2, [r3, #32]
    TIM_SET_CAPTUREPOLARITY(&htim5,TIM_CHANNEL_4,TIM_ICPOLARITY_RISING);
 800226a:	4b3f      	ldr	r3, [pc, #252]	; (8002368 <HAL_TIM_IC_CaptureCallback+0x184>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4b3e      	ldr	r3, [pc, #248]	; (8002368 <HAL_TIM_IC_CaptureCallback+0x184>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a12      	ldr	r2, [r2, #32]
 8002274:	621a      	str	r2, [r3, #32]
    tim_mode_raise_or_falling = 0;
 8002276:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <HAL_TIM_IC_CaptureCallback+0x180>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
		ok2 = 1;
 800227c:	4b3c      	ldr	r3, [pc, #240]	; (8002370 <HAL_TIM_IC_CaptureCallback+0x18c>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]
  }
	uint8_t Data=0;
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]
	if(pwm_high_level_time >= 5000){
 8002286:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <HAL_TIM_IC_CaptureCallback+0x190>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f241 3287 	movw	r2, #4999	; 0x1387
 800228e:	4293      	cmp	r3, r2
 8002290:	d906      	bls.n	80022a0 <HAL_TIM_IC_CaptureCallback+0xbc>
		Index=0;ok = 0;
 8002292:	4b39      	ldr	r3, [pc, #228]	; (8002378 <HAL_TIM_IC_CaptureCallback+0x194>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	4b38      	ldr	r3, [pc, #224]	; (800237c <HAL_TIM_IC_CaptureCallback+0x198>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e02a      	b.n	80022f6 <HAL_TIM_IC_CaptureCallback+0x112>
	}
	else if(pwm_high_level_time >= 3500 && pwm_high_level_time < 5000){
 80022a0:	4b34      	ldr	r3, [pc, #208]	; (8002374 <HAL_TIM_IC_CaptureCallback+0x190>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f640 52ab 	movw	r2, #3499	; 0xdab
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d90c      	bls.n	80022c6 <HAL_TIM_IC_CaptureCallback+0xe2>
 80022ac:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_TIM_IC_CaptureCallback+0x190>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f241 3287 	movw	r2, #4999	; 0x1387
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d806      	bhi.n	80022c6 <HAL_TIM_IC_CaptureCallback+0xe2>
		Index=0;ok = 1;
 80022b8:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <HAL_TIM_IC_CaptureCallback+0x194>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	4b2f      	ldr	r3, [pc, #188]	; (800237c <HAL_TIM_IC_CaptureCallback+0x198>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	e017      	b.n	80022f6 <HAL_TIM_IC_CaptureCallback+0x112>
	}
	else if(pwm_high_level_time >= 1000 && pwm_high_level_time < 2000){
 80022c6:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_TIM_IC_CaptureCallback+0x190>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ce:	d307      	bcc.n	80022e0 <HAL_TIM_IC_CaptureCallback+0xfc>
 80022d0:	4b28      	ldr	r3, [pc, #160]	; (8002374 <HAL_TIM_IC_CaptureCallback+0x190>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80022d8:	d202      	bcs.n	80022e0 <HAL_TIM_IC_CaptureCallback+0xfc>
		Data=1;		//收到数据1
 80022da:	2301      	movs	r3, #1
 80022dc:	73fb      	strb	r3, [r7, #15]
 80022de:	e00a      	b.n	80022f6 <HAL_TIM_IC_CaptureCallback+0x112>
	}
	else if(pwm_high_level_time > 0 && pwm_high_level_time < 1000){
 80022e0:	4b24      	ldr	r3, [pc, #144]	; (8002374 <HAL_TIM_IC_CaptureCallback+0x190>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d006      	beq.n	80022f6 <HAL_TIM_IC_CaptureCallback+0x112>
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <HAL_TIM_IC_CaptureCallback+0x190>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022f0:	d201      	bcs.n	80022f6 <HAL_TIM_IC_CaptureCallback+0x112>
		Data=0;		//收到数据0
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
	}

	if(ok == 1 && ok2 == 1){
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <HAL_TIM_IC_CaptureCallback+0x198>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d12e      	bne.n	800235c <HAL_TIM_IC_CaptureCallback+0x178>
 80022fe:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d12a      	bne.n	800235c <HAL_TIM_IC_CaptureCallback+0x178>
		receive_Code <<= 1;
 8002306:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <HAL_TIM_IC_CaptureCallback+0x19c>)
 800230e:	6013      	str	r3, [r2, #0]
		receive_Code += Data;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a19      	ldr	r2, [pc, #100]	; (8002380 <HAL_TIM_IC_CaptureCallback+0x19c>)
 800231a:	6013      	str	r3, [r2, #0]
		receive[Index] = Data;
 800231c:	4b16      	ldr	r3, [pc, #88]	; (8002378 <HAL_TIM_IC_CaptureCallback+0x194>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4918      	ldr	r1, [pc, #96]	; (8002384 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	54ca      	strb	r2, [r1, r3]
		datawp[Index] = pwm_high_level_time;
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HAL_TIM_IC_CaptureCallback+0x190>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <HAL_TIM_IC_CaptureCallback+0x194>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4611      	mov	r1, r2
 8002330:	4a15      	ldr	r2, [pc, #84]	; (8002388 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8002332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Index++;
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_TIM_IC_CaptureCallback+0x194>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	3301      	adds	r3, #1
 800233c:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <HAL_TIM_IC_CaptureCallback+0x194>)
 800233e:	6013      	str	r3, [r2, #0]
		if(Index>=32){
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <HAL_TIM_IC_CaptureCallback+0x194>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b1f      	cmp	r3, #31
 8002346:	dd09      	ble.n	800235c <HAL_TIM_IC_CaptureCallback+0x178>
			receive_Flag=1;
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_TIM_IC_CaptureCallback+0x1a8>)
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
			Index = ok = 0;
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_TIM_IC_CaptureCallback+0x198>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_TIM_IC_CaptureCallback+0x198>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a07      	ldr	r2, [pc, #28]	; (8002378 <HAL_TIM_IC_CaptureCallback+0x194>)
 800235a:	6013      	str	r3, [r2, #0]
		}
	}
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	2000038c 	.word	0x2000038c
 8002368:	200002c8 	.word	0x200002c8
 800236c:	20000380 	.word	0x20000380
 8002370:	20000398 	.word	0x20000398
 8002374:	20000384 	.word	0x20000384
 8002378:	20000390 	.word	0x20000390
 800237c:	20000394 	.word	0x20000394
 8002380:	20000358 	.word	0x20000358
 8002384:	2000035c 	.word	0x2000035c
 8002388:	2000039c 	.word	0x2000039c
 800238c:	2000037d 	.word	0x2000037d

08002390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002394:	b672      	cpsid	i
}
 8002396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002398:	e7fe      	b.n	8002398 <Error_Handler+0x8>

0800239a <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 800239a:	b580      	push	{r7, lr}
 800239c:	b0c8      	sub	sp, #288	; 0x120
 800239e:	af00      	add	r7, sp, #0
 80023a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023a8:	6018      	str	r0, [r3, #0]
 80023aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023ae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80023b2:	6019      	str	r1, [r3, #0]
 80023b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023b8:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80023bc:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 80023be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023c2:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	2bff      	cmp	r3, #255	; 0xff
 80023ca:	d806      	bhi.n	80023da <PN532_WriteFrame+0x40>
 80023cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023d0:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d102      	bne.n	80023e0 <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 80023da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023de:	e0aa      	b.n	8002536 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    frame[0] = PN532_PREAMBLE;
 80023e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 80023f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023fa:	2200      	movs	r2, #0
 80023fc:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 80023fe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002402:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002406:	22ff      	movs	r2, #255	; 0xff
 8002408:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 800240a:	2300      	movs	r3, #0
 800240c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002410:	e010      	b.n	8002434 <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 8002412:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002416:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800241a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800241e:	5cd2      	ldrb	r2, [r2, r3]
 8002420:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002424:	4413      	add	r3, r2
 8002426:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 800242a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800242e:	3301      	adds	r3, #1
 8002430:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002434:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002438:	2b02      	cmp	r3, #2
 800243a:	d9ea      	bls.n	8002412 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 800243c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002440:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800244c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002450:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8002452:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002456:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	425b      	negs	r3, r3
 8002460:	b2da      	uxtb	r2, r3
 8002462:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002466:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800246a:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 800246c:	2300      	movs	r3, #0
 800246e:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8002472:	e023      	b.n	80024bc <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8002474:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8002478:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800247c:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	441a      	add	r2, r3
 8002484:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8002488:	3305      	adds	r3, #5
 800248a:	7811      	ldrb	r1, [r2, #0]
 800248c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8002490:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002494:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8002496:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800249a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800249e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	4413      	add	r3, r2
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80024ac:	4413      	add	r3, r2
 80024ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < length; i++) {
 80024b2:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80024b6:	3301      	adds	r3, #1
 80024b8:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80024bc:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80024c6:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 80024ca:	8812      	ldrh	r2, [r2, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d8d1      	bhi.n	8002474 <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 80024d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80024d4:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	3305      	adds	r3, #5
 80024dc:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 80024e0:	43d2      	mvns	r2, r2
 80024e2:	b2d1      	uxtb	r1, r2
 80024e4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80024e8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80024ec:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 80024ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80024f2:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	3306      	adds	r3, #6
 80024fa:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80024fe:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002502:	2100      	movs	r1, #0
 8002504:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8002506:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800250a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8002516:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 800251a:	8812      	ldrh	r2, [r2, #0]
 800251c:	3207      	adds	r2, #7
 800251e:	b291      	uxth	r1, r2
 8002520:	f107 0214 	add.w	r2, r7, #20
 8002524:	4610      	mov	r0, r2
 8002526:	4798      	blx	r3
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 800252e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002532:	e000      	b.n	8002536 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b0c8      	sub	sp, #288	; 0x120
 8002544:	af00      	add	r7, sp, #0
 8002546:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800254a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800254e:	6018      	str	r0, [r3, #0]
 8002550:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002554:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002558:	6019      	str	r1, [r3, #0]
 800255a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800255e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8002562:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 800256a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800256e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800257a:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 800257e:	8812      	ldrh	r2, [r2, #0]
 8002580:	3207      	adds	r2, #7
 8002582:	b291      	uxth	r1, r2
 8002584:	f107 0214 	add.w	r2, r7, #20
 8002588:	4610      	mov	r0, r2
 800258a:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    while (buff[offset] == 0x00) {
 8002592:	e019      	b.n	80025c8 <PN532_ReadFrame+0x88>
        offset += 1;
 8002594:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002598:	3301      	adds	r3, #1
 800259a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        if (offset >= length + 8){
 800259e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80025a2:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	1dda      	adds	r2, r3, #7
 80025aa:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80025ae:	429a      	cmp	r2, r3
 80025b0:	da0a      	bge.n	80025c8 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 80025b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80025b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	485b      	ldr	r0, [pc, #364]	; (800272c <PN532_ReadFrame+0x1ec>)
 80025c0:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025c6:	e0ab      	b.n	8002720 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 80025c8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80025cc:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80025d0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80025d4:	5cd3      	ldrb	r3, [r2, r3]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0dc      	beq.n	8002594 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 80025da:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80025de:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80025e2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80025e6:	5cd3      	ldrb	r3, [r2, r3]
 80025e8:	2bff      	cmp	r3, #255	; 0xff
 80025ea:	d00a      	beq.n	8002602 <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 80025ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80025f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	484c      	ldr	r0, [pc, #304]	; (800272c <PN532_ReadFrame+0x1ec>)
 80025fa:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80025fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002600:	e08e      	b.n	8002720 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 8002602:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002606:	3301      	adds	r3, #1
 8002608:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    if (offset >= length + 8) {
 800260c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002610:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	1dda      	adds	r2, r3, #7
 8002618:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800261c:	429a      	cmp	r2, r3
 800261e:	da0a      	bge.n	8002636 <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 8002620:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002624:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	4840      	ldr	r0, [pc, #256]	; (8002730 <PN532_ReadFrame+0x1f0>)
 800262e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002634:	e074      	b.n	8002720 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8002636:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800263a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800263e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002642:	5cd3      	ldrb	r3, [r2, r3]
 8002644:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8002648:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800264c:	3301      	adds	r3, #1
 800264e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8002652:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002656:	5cd2      	ldrb	r2, [r2, r3]
 8002658:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800265c:	4413      	add	r3, r2
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8002664:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002668:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	4830      	ldr	r0, [pc, #192]	; (8002734 <PN532_ReadFrame+0x1f4>)
 8002672:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002678:	e052      	b.n	8002720 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 800267a:	2300      	movs	r3, #0
 800267c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8002680:	e014      	b.n	80026ac <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8002682:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002686:	1c9a      	adds	r2, r3, #2
 8002688:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800268c:	4413      	add	r3, r2
 800268e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8002692:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002696:	5cd2      	ldrb	r2, [r2, r3]
 8002698:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800269c:	4413      	add	r3, r2
 800269e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 80026a2:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80026a6:	3301      	adds	r3, #1
 80026a8:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80026ac:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 80026b0:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d2e4      	bcs.n	8002682 <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 80026b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 80026c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80026c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	481a      	ldr	r0, [pc, #104]	; (8002738 <PN532_ReadFrame+0x1f8>)
 80026ce:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80026d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026d4:	e024      	b.n	8002720 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 80026d6:	2300      	movs	r3, #0
 80026d8:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 80026dc:	e018      	b.n	8002710 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 80026de:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80026e2:	1c9a      	adds	r2, r3, #2
 80026e4:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80026e8:	441a      	add	r2, r3
 80026ea:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80026ee:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80026f2:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 80026f6:	6809      	ldr	r1, [r1, #0]
 80026f8:	440b      	add	r3, r1
 80026fa:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80026fe:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002702:	5c8a      	ldrb	r2, [r1, r2]
 8002704:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8002706:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 800270a:	3301      	adds	r3, #1
 800270c:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8002710:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 8002714:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8002718:	429a      	cmp	r2, r3
 800271a:	d3e0      	bcc.n	80026de <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 800271c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
}
 8002720:	4618      	mov	r0, r3
 8002722:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	08008210 	.word	0x08008210
 8002730:	08008244 	.word	0x08008244
 8002734:	08008260 	.word	0x08008260
 8002738:	08008290 	.word	0x08008290

0800273c <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b0c7      	sub	sp, #284	; 0x11c
 8002740:	af00      	add	r7, sp, #0
 8002742:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8002746:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 800274a:	6020      	str	r0, [r4, #0]
 800274c:	4608      	mov	r0, r1
 800274e:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002752:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8002756:	600a      	str	r2, [r1, #0]
 8002758:	4619      	mov	r1, r3
 800275a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800275e:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8002762:	4602      	mov	r2, r0
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800276a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800276e:	460a      	mov	r2, r1
 8002770:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8002772:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800277a:	22d4      	movs	r2, #212	; 0xd4
 800277c:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 800277e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002786:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800278a:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 800278e:	7812      	ldrb	r2, [r2, #0]
 8002790:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8002792:	2300      	movs	r3, #0
 8002794:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8002798:	e012      	b.n	80027c0 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 800279a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800279e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80027a2:	441a      	add	r2, r3
 80027a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80027a8:	3302      	adds	r3, #2
 80027aa:	7811      	ldrb	r1, [r2, #0]
 80027ac:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80027b0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80027b4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 80027b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80027ba:	3301      	adds	r3, #1
 80027bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80027c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d8e5      	bhi.n	800279a <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 80027ce:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 80027d2:	3302      	adds	r3, #2
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	f107 0110 	add.w	r1, r7, #16
 80027da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	f7ff fdd9 	bl	800239a <PN532_WriteFrame>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d011      	beq.n	8002812 <PN532_CallFunction+0xd6>
        pn532->wakeup();
 80027ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 80027fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002800:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	485b      	ldr	r0, [pc, #364]	; (8002978 <PN532_CallFunction+0x23c>)
 800280a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002810:	e0ac      	b.n	800296c <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 8002812:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002816:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8002822:	4798      	blx	r3
 8002824:	4603      	mov	r3, r0
 8002826:	f083 0301 	eor.w	r3, r3, #1
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 8002830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002834:	e09a      	b.n	800296c <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8002836:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800283a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f107 0210 	add.w	r2, r7, #16
 8002846:	2106      	movs	r1, #6
 8002848:	4610      	mov	r0, r2
 800284a:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 800284c:	2300      	movs	r3, #0
 800284e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8002852:	e01c      	b.n	800288e <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 8002854:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002858:	4a48      	ldr	r2, [pc, #288]	; (800297c <PN532_CallFunction+0x240>)
 800285a:	5cd2      	ldrb	r2, [r2, r3]
 800285c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002860:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002864:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8002868:	5ccb      	ldrb	r3, [r1, r3]
 800286a:	429a      	cmp	r2, r3
 800286c:	d00a      	beq.n	8002884 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 800286e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002872:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	4841      	ldr	r0, [pc, #260]	; (8002980 <PN532_CallFunction+0x244>)
 800287c:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 800287e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002882:	e073      	b.n	800296c <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8002884:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002888:	3301      	adds	r3, #1
 800288a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800288e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002892:	2b05      	cmp	r3, #5
 8002894:	d9de      	bls.n	8002854 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8002896:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800289a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80028a6:	4798      	blx	r3
 80028a8:	4603      	mov	r3, r0
 80028aa:	f083 0301 	eor.w	r3, r3, #1
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028b8:	e058      	b.n	800296c <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 80028ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028be:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	3302      	adds	r3, #2
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	f107 0110 	add.w	r1, r7, #16
 80028cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	f7ff fe33 	bl	8002540 <PN532_ReadFrame>
 80028da:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 80028de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2bd5      	cmp	r3, #213	; 0xd5
 80028ea:	d10d      	bne.n	8002908 <PN532_CallFunction+0x1cc>
 80028ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028f4:	785b      	ldrb	r3, [r3, #1]
 80028f6:	461a      	mov	r2, r3
 80028f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028fc:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	3301      	adds	r3, #1
 8002904:	429a      	cmp	r2, r3
 8002906:	d00a      	beq.n	800291e <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8002908:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800290c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	481b      	ldr	r0, [pc, #108]	; (8002984 <PN532_CallFunction+0x248>)
 8002916:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800291c:	e026      	b.n	800296c <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 800291e:	2300      	movs	r3, #0
 8002920:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8002924:	e015      	b.n	8002952 <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 8002926:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800292a:	1c9a      	adds	r2, r3, #2
 800292c:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002930:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002934:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8002938:	6809      	ldr	r1, [r1, #0]
 800293a:	440b      	add	r3, r1
 800293c:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002940:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8002944:	5c8a      	ldrb	r2, [r1, r2]
 8002946:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8002948:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800294c:	3301      	adds	r3, #1
 800294e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8002952:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002956:	b29b      	uxth	r3, r3
 8002958:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800295c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002960:	8812      	ldrh	r2, [r2, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d8df      	bhi.n	8002926 <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 8002966:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800296a:	3b02      	subs	r3, #2
}
 800296c:	4618      	mov	r0, r3
 800296e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002972:	46bd      	mov	sp, r7
 8002974:	bd90      	pop	{r4, r7, pc}
 8002976:	bf00      	nop
 8002978:	080082c4 	.word	0x080082c4
 800297c:	0800898c 	.word	0x0800898c
 8002980:	080082d8 	.word	0x080082d8
 8002984:	08008304 	.word	0x08008304

08002988 <PN532_SamConfiguration>:
}

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af04      	add	r7, sp, #16
 800298e:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8002990:	4a0d      	ldr	r2, [pc, #52]	; (80029c8 <PN532_SamConfiguration+0x40>)
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	4611      	mov	r1, r2
 800299a:	8019      	strh	r1, [r3, #0]
 800299c:	3302      	adds	r3, #2
 800299e:	0c12      	lsrs	r2, r2, #16
 80029a0:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 80029a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a6:	9302      	str	r3, [sp, #8]
 80029a8:	2303      	movs	r3, #3
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	f107 030c 	add.w	r3, r7, #12
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2300      	movs	r3, #0
 80029b4:	2200      	movs	r2, #0
 80029b6:	2114      	movs	r1, #20
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff febf 	bl	800273c <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	08008348 	.word	0x08008348

080029cc <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b090      	sub	sp, #64	; 0x40
 80029d0:	af04      	add	r7, sp, #16
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 80029dc:	2301      	movs	r3, #1
 80029de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 80029e8:	f107 0210 	add.w	r2, r7, #16
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	9302      	str	r3, [sp, #8]
 80029f0:	2302      	movs	r3, #2
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2313      	movs	r3, #19
 80029fc:	214a      	movs	r1, #74	; 0x4a
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f7ff fe9c 	bl	800273c <PN532_CallFunction>
 8002a04:	62b8      	str	r0, [r7, #40]	; 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	da02      	bge.n	8002a12 <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8002a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a10:	e02e      	b.n	8002a70 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8002a12:	7c3b      	ldrb	r3, [r7, #16]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d006      	beq.n	8002a26 <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	4816      	ldr	r0, [pc, #88]	; (8002a78 <PN532_ReadPassiveTarget+0xac>)
 8002a1e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a24:	e024      	b.n	8002a70 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8002a26:	7d7b      	ldrb	r3, [r7, #21]
 8002a28:	2b07      	cmp	r3, #7
 8002a2a:	d906      	bls.n	8002a3a <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	4812      	ldr	r0, [pc, #72]	; (8002a7c <PN532_ReadPassiveTarget+0xb0>)
 8002a32:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a38:	e01a      	b.n	8002a70 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002a40:	e010      	b.n	8002a64 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8002a42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a46:	1d9a      	adds	r2, r3, #6
 8002a48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	440b      	add	r3, r1
 8002a50:	3230      	adds	r2, #48	; 0x30
 8002a52:	443a      	add	r2, r7
 8002a54:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8002a58:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8002a5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002a64:	7d7b      	ldrb	r3, [r7, #21]
 8002a66:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d3e9      	bcc.n	8002a42 <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8002a6e:	7d7b      	ldrb	r3, [r7, #21]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3730      	adds	r7, #48	; 0x30
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	0800834c 	.word	0x0800834c
 8002a7c:	0800836c 	.word	0x0800836c

08002a80 <PN532_Reset>:
//extern I2C_HandleTypeDef hi2c1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
 8002a84:	2201      	movs	r2, #1
 8002a86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a8a:	480e      	ldr	r0, [pc, #56]	; (8002ac4 <PN532_Reset+0x44>)
 8002a8c:	f001 fd15 	bl	80044ba <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002a90:	2064      	movs	r0, #100	; 0x64
 8002a92:	f000 fcef 	bl	8003474 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_RESET);
 8002a96:	2200      	movs	r2, #0
 8002a98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a9c:	4809      	ldr	r0, [pc, #36]	; (8002ac4 <PN532_Reset+0x44>)
 8002a9e:	f001 fd0c 	bl	80044ba <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8002aa2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002aa6:	f000 fce5 	bl	8003474 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ab0:	4804      	ldr	r0, [pc, #16]	; (8002ac4 <PN532_Reset+0x44>)
 8002ab2:	f001 fd02 	bl	80044ba <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002ab6:	2064      	movs	r0, #100	; 0x64
 8002ab8:	f000 fcdc 	bl	8003474 <HAL_Delay>
    return PN532_STATUS_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40010c00 	.word	0x40010c00

08002ac8 <PN532_Log>:

void PN532_Log(const char* log) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4803      	ldr	r0, [pc, #12]	; (8002ae0 <PN532_Log+0x18>)
 8002ad4:	f004 fbae 	bl	8007234 <iprintf>
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	08008394 	.word	0x08008394

08002ae4 <spi_rw>:
        num >>= 1;
    }
    return result;
}

void spi_rw(uint8_t* data, uint8_t count) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(PN532_SS_GPIO_Port, PN532_SS_Pin, GPIO_PIN_RESET);
 8002af0:	2200      	movs	r2, #0
 8002af2:	2101      	movs	r1, #1
 8002af4:	480d      	ldr	r0, [pc, #52]	; (8002b2c <spi_rw+0x48>)
 8002af6:	f001 fce0 	bl	80044ba <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002afa:	2001      	movs	r0, #1
 8002afc:	f000 fcba 	bl	8003474 <HAL_Delay>
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
    for (uint8_t i = 0; i < count; i++) {
        data[i] = reverse_bit(data[i]);
    }
#else
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	220a      	movs	r2, #10
 8002b06:	9200      	str	r2, [sp, #0]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4808      	ldr	r0, [pc, #32]	; (8002b30 <spi_rw+0x4c>)
 8002b0e:	f002 fc75 	bl	80053fc <HAL_SPI_TransmitReceive>
#endif
    HAL_Delay(1);
 8002b12:	2001      	movs	r0, #1
 8002b14:	f000 fcae 	bl	8003474 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_SS_GPIO_Port, PN532_SS_Pin, GPIO_PIN_SET);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	4803      	ldr	r0, [pc, #12]	; (8002b2c <spi_rw+0x48>)
 8002b1e:	f001 fccc 	bl	80044ba <HAL_GPIO_WritePin>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40010c00 	.word	0x40010c00
 8002b30:	200001e0 	.word	0x200001e0

08002b34 <PN532_SPI_ReadData>:

int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 8002b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b38:	b087      	sub	sp, #28
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	807b      	strh	r3, [r7, #2]
 8002b42:	466b      	mov	r3, sp
 8002b44:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8002b46:	887b      	ldrh	r3, [r7, #2]
 8002b48:	1c59      	adds	r1, r3, #1
 8002b4a:	1e4b      	subs	r3, r1, #1
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	460a      	mov	r2, r1
 8002b50:	2300      	movs	r3, #0
 8002b52:	4690      	mov	r8, r2
 8002b54:	4699      	mov	r9, r3
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b6a:	460a      	mov	r2, r1
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	4614      	mov	r4, r2
 8002b70:	461d      	mov	r5, r3
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	00eb      	lsls	r3, r5, #3
 8002b7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b80:	00e2      	lsls	r2, r4, #3
 8002b82:	460b      	mov	r3, r1
 8002b84:	3307      	adds	r3, #7
 8002b86:	08db      	lsrs	r3, r3, #3
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	ebad 0d03 	sub.w	sp, sp, r3
 8002b8e:	466b      	mov	r3, sp
 8002b90:	3300      	adds	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2203      	movs	r2, #3
 8002b98:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 8002b9a:	2005      	movs	r0, #5
 8002b9c:	f000 fc6a 	bl	8003474 <HAL_Delay>
    spi_rw(frame, count + 1);
 8002ba0:	887b      	ldrh	r3, [r7, #2]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	4619      	mov	r1, r3
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7ff ff9a 	bl	8002ae4 <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	75fb      	strb	r3, [r7, #23]
 8002bb4:	e00a      	b.n	8002bcc <PN532_SPI_ReadData+0x98>
        data[i] = frame[i + 1];
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	7dfb      	ldrb	r3, [r7, #23]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	440b      	add	r3, r1
 8002bc0:	68f9      	ldr	r1, [r7, #12]
 8002bc2:	5c8a      	ldrb	r2, [r1, r2]
 8002bc4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	75fb      	strb	r3, [r7, #23]
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	887a      	ldrh	r2, [r7, #2]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d8ef      	bhi.n	8002bb6 <PN532_SPI_ReadData+0x82>
    }
    return PN532_STATUS_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	46b5      	mov	sp, r6
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002be4 <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 8002be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002be8:	b087      	sub	sp, #28
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	807b      	strh	r3, [r7, #2]
 8002bf2:	466b      	mov	r3, sp
 8002bf4:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8002bf6:	887b      	ldrh	r3, [r7, #2]
 8002bf8:	1c59      	adds	r1, r3, #1
 8002bfa:	1e4b      	subs	r3, r1, #1
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	460a      	mov	r2, r1
 8002c00:	2300      	movs	r3, #0
 8002c02:	4690      	mov	r8, r2
 8002c04:	4699      	mov	r9, r3
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c1a:	460a      	mov	r2, r1
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	4614      	mov	r4, r2
 8002c20:	461d      	mov	r5, r3
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	00eb      	lsls	r3, r5, #3
 8002c2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c30:	00e2      	lsls	r2, r4, #3
 8002c32:	460b      	mov	r3, r1
 8002c34:	3307      	adds	r3, #7
 8002c36:	08db      	lsrs	r3, r3, #3
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	ebad 0d03 	sub.w	sp, sp, r3
 8002c3e:	466b      	mov	r3, sp
 8002c40:	3300      	adds	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	75fb      	strb	r3, [r7, #23]
 8002c4e:	e00a      	b.n	8002c66 <PN532_SPI_WriteData+0x82>
        frame[i + 1] = data[i];
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	441a      	add	r2, r3
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	7811      	ldrb	r1, [r2, #0]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	3301      	adds	r3, #1
 8002c64:	75fb      	strb	r3, [r7, #23]
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	887a      	ldrh	r2, [r7, #2]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d8ef      	bhi.n	8002c50 <PN532_SPI_WriteData+0x6c>
    }
    spi_rw(frame, count + 1);
 8002c70:	887b      	ldrh	r3, [r7, #2]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	3301      	adds	r3, #1
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	4619      	mov	r1, r3
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f7ff ff32 	bl	8002ae4 <spi_rw>
    return PN532_STATUS_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	46b5      	mov	sp, r6
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002c8e <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 8002c96:	2302      	movs	r3, #2
 8002c98:	813b      	strh	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 8002c9a:	f000 fbe1 	bl	8003460 <HAL_GetTick>
 8002c9e:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8002ca0:	e010      	b.n	8002cc4 <PN532_SPI_WaitReady+0x36>
        HAL_Delay(10);
 8002ca2:	200a      	movs	r0, #10
 8002ca4:	f000 fbe6 	bl	8003474 <HAL_Delay>
        spi_rw(status, sizeof(status));
 8002ca8:	f107 0308 	add.w	r3, r7, #8
 8002cac:	2102      	movs	r1, #2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff18 	bl	8002ae4 <spi_rw>
        if (status[1] == _SPI_READY) {
 8002cb4:	7a7b      	ldrb	r3, [r7, #9]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <PN532_SPI_WaitReady+0x30>
            return true;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00b      	b.n	8002cd6 <PN532_SPI_WaitReady+0x48>
        } else {
            HAL_Delay(5);
 8002cbe:	2005      	movs	r0, #5
 8002cc0:	f000 fbd8 	bl	8003474 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8002cc4:	f000 fbcc 	bl	8003460 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d8e6      	bhi.n	8002ca2 <PN532_SPI_WaitReady+0x14>
        }
    }
    return false;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
    // Send any special commands/data to wake up PN532
    uint8_t data[] = {0x00};
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	713b      	strb	r3, [r7, #4]
    HAL_Delay(1000);
 8002cea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cee:	f000 fbc1 	bl	8003474 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_SS_GPIO_Port, PN532_SS_Pin, GPIO_PIN_RESET);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	480a      	ldr	r0, [pc, #40]	; (8002d20 <PN532_SPI_Wakeup+0x40>)
 8002cf8:	f001 fbdf 	bl	80044ba <HAL_GPIO_WritePin>
    HAL_Delay(2); // T_osc_start
 8002cfc:	2002      	movs	r0, #2
 8002cfe:	f000 fbb9 	bl	8003474 <HAL_Delay>
    spi_rw(data, 1);
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	2101      	movs	r1, #1
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff feec 	bl	8002ae4 <spi_rw>
    HAL_Delay(1000);
 8002d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d10:	f000 fbb0 	bl	8003474 <HAL_Delay>
    return PN532_STATUS_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40010c00 	.word	0x40010c00

08002d24 <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a0c      	ldr	r2, [pc, #48]	; (8002d60 <PN532_SPI_Init+0x3c>)
 8002d30:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a0b      	ldr	r2, [pc, #44]	; (8002d64 <PN532_SPI_Init+0x40>)
 8002d36:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a0b      	ldr	r2, [pc, #44]	; (8002d68 <PN532_SPI_Init+0x44>)
 8002d3c:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <PN532_SPI_Init+0x48>)
 8002d42:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <PN532_SPI_Init+0x4c>)
 8002d48:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <PN532_SPI_Init+0x50>)
 8002d4e:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	4798      	blx	r3
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	08002a81 	.word	0x08002a81
 8002d64:	08002b35 	.word	0x08002b35
 8002d68:	08002be5 	.word	0x08002be5
 8002d6c:	08002c8f 	.word	0x08002c8f
 8002d70:	08002ce1 	.word	0x08002ce1
 8002d74:	08002ac9 	.word	0x08002ac9

08002d78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <HAL_MspInit+0x5c>)
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <HAL_MspInit+0x5c>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	6193      	str	r3, [r2, #24]
 8002d8a:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_MspInit+0x5c>)
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d96:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <HAL_MspInit+0x5c>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4a0e      	ldr	r2, [pc, #56]	; (8002dd4 <HAL_MspInit+0x5c>)
 8002d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da0:	61d3      	str	r3, [r2, #28]
 8002da2:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <HAL_MspInit+0x5c>)
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_MspInit+0x60>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <HAL_MspInit+0x60>)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40010000 	.word	0x40010000

08002ddc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	f107 0310 	add.w	r3, r7, #16
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <HAL_ADC_MspInit+0x6c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d121      	bne.n	8002e40 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002dfc:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <HAL_ADC_MspInit+0x70>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	4a12      	ldr	r2, [pc, #72]	; (8002e4c <HAL_ADC_MspInit+0x70>)
 8002e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e06:	6193      	str	r3, [r2, #24]
 8002e08:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <HAL_ADC_MspInit+0x70>)
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <HAL_ADC_MspInit+0x70>)
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <HAL_ADC_MspInit+0x70>)
 8002e1a:	f043 0304 	orr.w	r3, r3, #4
 8002e1e:	6193      	str	r3, [r2, #24]
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_ADC_MspInit+0x70>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e30:	2303      	movs	r3, #3
 8002e32:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e34:	f107 0310 	add.w	r3, r7, #16
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4805      	ldr	r0, [pc, #20]	; (8002e50 <HAL_ADC_MspInit+0x74>)
 8002e3c:	f001 f992 	bl	8004164 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e40:	bf00      	nop
 8002e42:	3720      	adds	r7, #32
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40012400 	.word	0x40012400
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40010800 	.word	0x40010800

08002e54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 0310 	add.w	r3, r7, #16
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <HAL_I2C_MspInit+0x70>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d123      	bne.n	8002ebc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e74:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <HAL_I2C_MspInit+0x74>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <HAL_I2C_MspInit+0x74>)
 8002e7a:	f043 0308 	orr.w	r3, r3, #8
 8002e7e:	6193      	str	r3, [r2, #24]
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <HAL_I2C_MspInit+0x74>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e8c:	23c0      	movs	r3, #192	; 0xc0
 8002e8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e90:	2312      	movs	r3, #18
 8002e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e94:	2303      	movs	r3, #3
 8002e96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e98:	f107 0310 	add.w	r3, r7, #16
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	480b      	ldr	r0, [pc, #44]	; (8002ecc <HAL_I2C_MspInit+0x78>)
 8002ea0:	f001 f960 	bl	8004164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <HAL_I2C_MspInit+0x74>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	4a07      	ldr	r2, [pc, #28]	; (8002ec8 <HAL_I2C_MspInit+0x74>)
 8002eaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002eae:	61d3      	str	r3, [r2, #28]
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_I2C_MspInit+0x74>)
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ebc:	bf00      	nop
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40005400 	.word	0x40005400
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40010c00 	.word	0x40010c00

08002ed0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	f107 0310 	add.w	r3, r7, #16
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <HAL_SPI_MspInit+0x98>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d137      	bne.n	8002f60 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <HAL_SPI_MspInit+0x9c>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <HAL_SPI_MspInit+0x9c>)
 8002ef6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002efa:	6193      	str	r3, [r2, #24]
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_SPI_MspInit+0x9c>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f08:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <HAL_SPI_MspInit+0x9c>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <HAL_SPI_MspInit+0x9c>)
 8002f0e:	f043 0304 	orr.w	r3, r3, #4
 8002f12:	6193      	str	r3, [r2, #24]
 8002f14:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <HAL_SPI_MspInit+0x9c>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002f20:	23a0      	movs	r3, #160	; 0xa0
 8002f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2c:	f107 0310 	add.w	r3, r7, #16
 8002f30:	4619      	mov	r1, r3
 8002f32:	480f      	ldr	r0, [pc, #60]	; (8002f70 <HAL_SPI_MspInit+0xa0>)
 8002f34:	f001 f916 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f38:	2340      	movs	r3, #64	; 0x40
 8002f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f44:	f107 0310 	add.w	r3, r7, #16
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4809      	ldr	r0, [pc, #36]	; (8002f70 <HAL_SPI_MspInit+0xa0>)
 8002f4c:	f001 f90a 	bl	8004164 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002f50:	2200      	movs	r2, #0
 8002f52:	2100      	movs	r1, #0
 8002f54:	2023      	movs	r0, #35	; 0x23
 8002f56:	f000 ffc6 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002f5a:	2023      	movs	r0, #35	; 0x23
 8002f5c:	f000 ffdf 	bl	8003f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f60:	bf00      	nop
 8002f62:	3720      	adds	r7, #32
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40013000 	.word	0x40013000
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40010800 	.word	0x40010800

08002f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a09      	ldr	r2, [pc, #36]	; (8002fa8 <HAL_TIM_Base_MspInit+0x34>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d10b      	bne.n	8002f9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <HAL_TIM_Base_MspInit+0x38>)
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	4a08      	ldr	r2, [pc, #32]	; (8002fac <HAL_TIM_Base_MspInit+0x38>)
 8002f8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f90:	6193      	str	r3, [r2, #24]
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_TIM_Base_MspInit+0x38>)
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40021000 	.word	0x40021000

08002fb0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc0:	d113      	bne.n	8002fea <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <HAL_TIM_PWM_MspInit+0x44>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	4a0b      	ldr	r2, [pc, #44]	; (8002ff4 <HAL_TIM_PWM_MspInit+0x44>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	61d3      	str	r3, [r2, #28]
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <HAL_TIM_PWM_MspInit+0x44>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2100      	movs	r1, #0
 8002fde:	201c      	movs	r0, #28
 8002fe0:	f000 ff81 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fe4:	201c      	movs	r0, #28
 8002fe6:	f000 ff9a 	bl	8003f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 0310 	add.w	r3, r7, #16
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM5)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a19      	ldr	r2, [pc, #100]	; (8003078 <HAL_TIM_IC_MspInit+0x80>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d12b      	bne.n	8003070 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003018:	4b18      	ldr	r3, [pc, #96]	; (800307c <HAL_TIM_IC_MspInit+0x84>)
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	4a17      	ldr	r2, [pc, #92]	; (800307c <HAL_TIM_IC_MspInit+0x84>)
 800301e:	f043 0308 	orr.w	r3, r3, #8
 8003022:	61d3      	str	r3, [r2, #28]
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_TIM_IC_MspInit+0x84>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003030:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_TIM_IC_MspInit+0x84>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4a11      	ldr	r2, [pc, #68]	; (800307c <HAL_TIM_IC_MspInit+0x84>)
 8003036:	f043 0304 	orr.w	r3, r3, #4
 800303a:	6193      	str	r3, [r2, #24]
 800303c:	4b0f      	ldr	r3, [pc, #60]	; (800307c <HAL_TIM_IC_MspInit+0x84>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003048:	2308      	movs	r3, #8
 800304a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003054:	f107 0310 	add.w	r3, r7, #16
 8003058:	4619      	mov	r1, r3
 800305a:	4809      	ldr	r0, [pc, #36]	; (8003080 <HAL_TIM_IC_MspInit+0x88>)
 800305c:	f001 f882 	bl	8004164 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003060:	2200      	movs	r2, #0
 8003062:	2100      	movs	r1, #0
 8003064:	2032      	movs	r0, #50	; 0x32
 8003066:	f000 ff3e 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800306a:	2032      	movs	r0, #50	; 0x32
 800306c:	f000 ff57 	bl	8003f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003070:	bf00      	nop
 8003072:	3720      	adds	r7, #32
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40000c00 	.word	0x40000c00
 800307c:	40021000 	.word	0x40021000
 8003080:	40010800 	.word	0x40010800

08003084 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308c:	f107 0310 	add.w	r3, r7, #16
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a2:	d117      	bne.n	80030d4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a4:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <HAL_TIM_MspPostInit+0x58>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	4a0c      	ldr	r2, [pc, #48]	; (80030dc <HAL_TIM_MspPostInit+0x58>)
 80030aa:	f043 0304 	orr.w	r3, r3, #4
 80030ae:	6193      	str	r3, [r2, #24]
 80030b0:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_TIM_MspPostInit+0x58>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030bc:	2304      	movs	r3, #4
 80030be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c0:	2302      	movs	r3, #2
 80030c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c4:	2302      	movs	r3, #2
 80030c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c8:	f107 0310 	add.w	r3, r7, #16
 80030cc:	4619      	mov	r1, r3
 80030ce:	4804      	ldr	r0, [pc, #16]	; (80030e0 <HAL_TIM_MspPostInit+0x5c>)
 80030d0:	f001 f848 	bl	8004164 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80030d4:	bf00      	nop
 80030d6:	3720      	adds	r7, #32
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40010800 	.word	0x40010800

080030e4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80030ea:	f107 0308 	add.w	r3, r7, #8
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80030f8:	4b18      	ldr	r3, [pc, #96]	; (800315c <HAL_FSMC_MspInit+0x78>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d129      	bne.n	8003154 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8003100:	4b16      	ldr	r3, [pc, #88]	; (800315c <HAL_FSMC_MspInit+0x78>)
 8003102:	2201      	movs	r2, #1
 8003104:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003106:	4b16      	ldr	r3, [pc, #88]	; (8003160 <HAL_FSMC_MspInit+0x7c>)
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	4a15      	ldr	r2, [pc, #84]	; (8003160 <HAL_FSMC_MspInit+0x7c>)
 800310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003110:	6153      	str	r3, [r2, #20]
 8003112:	4b13      	ldr	r3, [pc, #76]	; (8003160 <HAL_FSMC_MspInit+0x7c>)
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800311e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003122:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003128:	2303      	movs	r3, #3
 800312a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800312c:	f107 0308 	add.w	r3, r7, #8
 8003130:	4619      	mov	r1, r3
 8003132:	480c      	ldr	r0, [pc, #48]	; (8003164 <HAL_FSMC_MspInit+0x80>)
 8003134:	f001 f816 	bl	8004164 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003138:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800313c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313e:	2302      	movs	r3, #2
 8003140:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003142:	2303      	movs	r3, #3
 8003144:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003146:	f107 0308 	add.w	r3, r7, #8
 800314a:	4619      	mov	r1, r3
 800314c:	4806      	ldr	r0, [pc, #24]	; (8003168 <HAL_FSMC_MspInit+0x84>)
 800314e:	f001 f809 	bl	8004164 <HAL_GPIO_Init>
 8003152:	e000      	b.n	8003156 <HAL_FSMC_MspInit+0x72>
    return;
 8003154:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	2000045c 	.word	0x2000045c
 8003160:	40021000 	.word	0x40021000
 8003164:	40011800 	.word	0x40011800
 8003168:	40011400 	.word	0x40011400

0800316c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8003174:	f7ff ffb6 	bl	80030e4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003184:	e7fe      	b.n	8003184 <NMI_Handler+0x4>

08003186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003186:	b480      	push	{r7}
 8003188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800318a:	e7fe      	b.n	800318a <HardFault_Handler+0x4>

0800318c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003190:	e7fe      	b.n	8003190 <MemManage_Handler+0x4>

08003192 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003192:	b480      	push	{r7}
 8003194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003196:	e7fe      	b.n	8003196 <BusFault_Handler+0x4>

08003198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800319c:	e7fe      	b.n	800319c <UsageFault_Handler+0x4>

0800319e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800319e:	b480      	push	{r7}
 80031a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr

080031b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031b6:	b480      	push	{r7}
 80031b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031c6:	f000 f939 	bl	800343c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}

080031ce <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80031d2:	2020      	movs	r0, #32
 80031d4:	f001 f98a 	bl	80044ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}

080031dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031e0:	4802      	ldr	r0, [pc, #8]	; (80031ec <TIM2_IRQHandler+0x10>)
 80031e2:	f002 ff11 	bl	8006008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000280 	.word	0x20000280

080031f0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80031f4:	4802      	ldr	r0, [pc, #8]	; (8003200 <SPI1_IRQHandler+0x10>)
 80031f6:	f002 fab1 	bl	800575c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200001e0 	.word	0x200001e0

08003204 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003208:	4802      	ldr	r0, [pc, #8]	; (8003214 <TIM5_IRQHandler+0x10>)
 800320a:	f002 fefd 	bl	8006008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	200002c8 	.word	0x200002c8

08003218 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	e00a      	b.n	8003240 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800322a:	f3af 8000 	nop.w
 800322e:	4601      	mov	r1, r0
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	60ba      	str	r2, [r7, #8]
 8003236:	b2ca      	uxtb	r2, r1
 8003238:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	3301      	adds	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	dbf0      	blt.n	800322a <_read+0x12>
	}

return len;
 8003248:	687b      	ldr	r3, [r7, #4]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b086      	sub	sp, #24
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	e009      	b.n	8003278 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	60ba      	str	r2, [r7, #8]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	3301      	adds	r3, #1
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	dbf1      	blt.n	8003264 <_write+0x12>
	}
	return len;
 8003280:	687b      	ldr	r3, [r7, #4]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <_close>:

int _close(int file)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
	return -1;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032b0:	605a      	str	r2, [r3, #4]
	return 0;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr

080032be <_isatty>:

int _isatty(int file)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
	return 1;
 80032c6:	2301      	movs	r3, #1
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
	return 0;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
	...

080032ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032f4:	4a14      	ldr	r2, [pc, #80]	; (8003348 <_sbrk+0x5c>)
 80032f6:	4b15      	ldr	r3, [pc, #84]	; (800334c <_sbrk+0x60>)
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003300:	4b13      	ldr	r3, [pc, #76]	; (8003350 <_sbrk+0x64>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <_sbrk+0x64>)
 800330a:	4a12      	ldr	r2, [pc, #72]	; (8003354 <_sbrk+0x68>)
 800330c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <_sbrk+0x64>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	429a      	cmp	r2, r3
 800331a:	d207      	bcs.n	800332c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800331c:	f003 ff58 	bl	80071d0 <__errno>
 8003320:	4603      	mov	r3, r0
 8003322:	220c      	movs	r2, #12
 8003324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800332a:	e009      	b.n	8003340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800332c:	4b08      	ldr	r3, [pc, #32]	; (8003350 <_sbrk+0x64>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003332:	4b07      	ldr	r3, [pc, #28]	; (8003350 <_sbrk+0x64>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	4a05      	ldr	r2, [pc, #20]	; (8003350 <_sbrk+0x64>)
 800333c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800333e:	68fb      	ldr	r3, [r7, #12]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20010000 	.word	0x20010000
 800334c:	00000400 	.word	0x00000400
 8003350:	20000460 	.word	0x20000460
 8003354:	20000478 	.word	0x20000478

08003358 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003364:	f7ff fff8 	bl	8003358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003368:	480b      	ldr	r0, [pc, #44]	; (8003398 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800336a:	490c      	ldr	r1, [pc, #48]	; (800339c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800336c:	4a0c      	ldr	r2, [pc, #48]	; (80033a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800336e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003370:	e002      	b.n	8003378 <LoopCopyDataInit>

08003372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003376:	3304      	adds	r3, #4

08003378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800337a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800337c:	d3f9      	bcc.n	8003372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003380:	4c09      	ldr	r4, [pc, #36]	; (80033a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003384:	e001      	b.n	800338a <LoopFillZerobss>

08003386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003388:	3204      	adds	r2, #4

0800338a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800338a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800338c:	d3fb      	bcc.n	8003386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800338e:	f003 ff25 	bl	80071dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003392:	f7fe f9c1 	bl	8001718 <main>
  bx lr
 8003396:	4770      	bx	lr
  ldr r0, =_sdata
 8003398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800339c:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 80033a0:	08008a74 	.word	0x08008a74
  ldr r2, =_sbss
 80033a4:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 80033a8:	20000478 	.word	0x20000478

080033ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033ac:	e7fe      	b.n	80033ac <ADC1_2_IRQHandler>
	...

080033b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <HAL_Init+0x28>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a07      	ldr	r2, [pc, #28]	; (80033d8 <HAL_Init+0x28>)
 80033ba:	f043 0310 	orr.w	r3, r3, #16
 80033be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033c0:	2003      	movs	r0, #3
 80033c2:	f000 fd85 	bl	8003ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033c6:	200f      	movs	r0, #15
 80033c8:	f000 f808 	bl	80033dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033cc:	f7ff fcd4 	bl	8002d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40022000 	.word	0x40022000

080033dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033e4:	4b12      	ldr	r3, [pc, #72]	; (8003430 <HAL_InitTick+0x54>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b12      	ldr	r3, [pc, #72]	; (8003434 <HAL_InitTick+0x58>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	4619      	mov	r1, r3
 80033ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fd9d 	bl	8003f3a <HAL_SYSTICK_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e00e      	b.n	8003428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b0f      	cmp	r3, #15
 800340e:	d80a      	bhi.n	8003426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003410:	2200      	movs	r2, #0
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003418:	f000 fd65 	bl	8003ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800341c:	4a06      	ldr	r2, [pc, #24]	; (8003438 <HAL_InitTick+0x5c>)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e000      	b.n	8003428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
}
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	200000c8 	.word	0x200000c8
 8003434:	200000d0 	.word	0x200000d0
 8003438:	200000cc 	.word	0x200000cc

0800343c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_IncTick+0x1c>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_IncTick+0x20>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4413      	add	r3, r2
 800344c:	4a03      	ldr	r2, [pc, #12]	; (800345c <HAL_IncTick+0x20>)
 800344e:	6013      	str	r3, [r2, #0]
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr
 8003458:	200000d0 	.word	0x200000d0
 800345c:	20000464 	.word	0x20000464

08003460 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return uwTick;
 8003464:	4b02      	ldr	r3, [pc, #8]	; (8003470 <HAL_GetTick+0x10>)
 8003466:	681b      	ldr	r3, [r3, #0]
}
 8003468:	4618      	mov	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	20000464 	.word	0x20000464

08003474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800347c:	f7ff fff0 	bl	8003460 <HAL_GetTick>
 8003480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800348c:	d005      	beq.n	800349a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_Delay+0x44>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4413      	add	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800349a:	bf00      	nop
 800349c:	f7ff ffe0 	bl	8003460 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d8f7      	bhi.n	800349c <HAL_Delay+0x28>
  {
  }
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200000d0 	.word	0x200000d0

080034bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e0ce      	b.n	800367c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d109      	bne.n	8003500 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff fc6e 	bl	8002ddc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fbd7 	bl	8003cb4 <ADC_ConversionStop_Disable>
 8003506:	4603      	mov	r3, r0
 8003508:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	f040 80a9 	bne.w	800366a <HAL_ADC_Init+0x1ae>
 8003518:	7dfb      	ldrb	r3, [r7, #23]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f040 80a5 	bne.w	800366a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003528:	f023 0302 	bic.w	r3, r3, #2
 800352c:	f043 0202 	orr.w	r2, r3, #2
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4951      	ldr	r1, [pc, #324]	; (8003684 <HAL_ADC_Init+0x1c8>)
 800353e:	428b      	cmp	r3, r1
 8003540:	d10a      	bne.n	8003558 <HAL_ADC_Init+0x9c>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800354a:	d002      	beq.n	8003552 <HAL_ADC_Init+0x96>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	e004      	b.n	800355c <HAL_ADC_Init+0xa0>
 8003552:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003556:	e001      	b.n	800355c <HAL_ADC_Init+0xa0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800355c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	7b1b      	ldrb	r3, [r3, #12]
 8003562:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003564:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4313      	orrs	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003574:	d003      	beq.n	800357e <HAL_ADC_Init+0xc2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d102      	bne.n	8003584 <HAL_ADC_Init+0xc8>
 800357e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003582:	e000      	b.n	8003586 <HAL_ADC_Init+0xca>
 8003584:	2300      	movs	r3, #0
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	7d1b      	ldrb	r3, [r3, #20]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d119      	bne.n	80035c8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	7b1b      	ldrb	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	035a      	lsls	r2, r3, #13
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	e00b      	b.n	80035c8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	f043 0201 	orr.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	430a      	orrs	r2, r1
 80035da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	4b29      	ldr	r3, [pc, #164]	; (8003688 <HAL_ADC_Init+0x1cc>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	430b      	orrs	r3, r1
 80035ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f8:	d003      	beq.n	8003602 <HAL_ADC_Init+0x146>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d104      	bne.n	800360c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	3b01      	subs	r3, #1
 8003608:	051b      	lsls	r3, r3, #20
 800360a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	430a      	orrs	r2, r1
 800361e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	4b19      	ldr	r3, [pc, #100]	; (800368c <HAL_ADC_Init+0x1d0>)
 8003628:	4013      	ands	r3, r2
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	429a      	cmp	r2, r3
 800362e:	d10b      	bne.n	8003648 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	f043 0201 	orr.w	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003646:	e018      	b.n	800367a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	f023 0312 	bic.w	r3, r3, #18
 8003650:	f043 0210 	orr.w	r2, r3, #16
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	f043 0201 	orr.w	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003668:	e007      	b.n	800367a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	f043 0210 	orr.w	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800367a:	7dfb      	ldrb	r3, [r7, #23]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40013c00 	.word	0x40013c00
 8003688:	ffe1f7fd 	.word	0xffe1f7fd
 800368c:	ff1f0efe 	.word	0xff1f0efe

08003690 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_ADC_Start+0x1a>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e098      	b.n	80037dc <HAL_ADC_Start+0x14c>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 faa4 	bl	8003c00 <ADC_Enable>
 80036b8:	4603      	mov	r3, r0
 80036ba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f040 8087 	bne.w	80037d2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a41      	ldr	r2, [pc, #260]	; (80037e4 <HAL_ADC_Start+0x154>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d105      	bne.n	80036ee <HAL_ADC_Start+0x5e>
 80036e2:	4b41      	ldr	r3, [pc, #260]	; (80037e8 <HAL_ADC_Start+0x158>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d115      	bne.n	800371a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003704:	2b00      	cmp	r3, #0
 8003706:	d026      	beq.n	8003756 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003710:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003718:	e01d      	b.n	8003756 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a2f      	ldr	r2, [pc, #188]	; (80037e8 <HAL_ADC_Start+0x158>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d004      	beq.n	800373a <HAL_ADC_Start+0xaa>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a2b      	ldr	r2, [pc, #172]	; (80037e4 <HAL_ADC_Start+0x154>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d10d      	bne.n	8003756 <HAL_ADC_Start+0xc6>
 800373a:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <HAL_ADC_Start+0x158>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800374e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d006      	beq.n	8003770 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	f023 0206 	bic.w	r2, r3, #6
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	62da      	str	r2, [r3, #44]	; 0x2c
 800376e:	e002      	b.n	8003776 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f06f 0202 	mvn.w	r2, #2
 8003786:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003792:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003796:	d113      	bne.n	80037c0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800379c:	4a11      	ldr	r2, [pc, #68]	; (80037e4 <HAL_ADC_Start+0x154>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d105      	bne.n	80037ae <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80037a2:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_ADC_Start+0x158>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d108      	bne.n	80037c0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80037bc:	609a      	str	r2, [r3, #8]
 80037be:	e00c      	b.n	80037da <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	e003      	b.n	80037da <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80037da:	7bfb      	ldrb	r3, [r7, #15]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40012800 	.word	0x40012800
 80037e8:	40012400 	.word	0x40012400

080037ec <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003802:	f7ff fe2d 	bl	8003460 <HAL_GetTick>
 8003806:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e0d3      	b.n	80039d6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003838:	2b00      	cmp	r3, #0
 800383a:	d131      	bne.n	80038a0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003846:	2b00      	cmp	r3, #0
 8003848:	d12a      	bne.n	80038a0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800384a:	e021      	b.n	8003890 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003852:	d01d      	beq.n	8003890 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_ADC_PollForConversion+0x7e>
 800385a:	f7ff fe01 	bl	8003460 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d212      	bcs.n	8003890 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10b      	bne.n	8003890 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	f043 0204 	orr.w	r2, r3, #4
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e0a2      	b.n	80039d6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0d6      	beq.n	800384c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800389e:	e070      	b.n	8003982 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80038a0:	4b4f      	ldr	r3, [pc, #316]	; (80039e0 <HAL_ADC_PollForConversion+0x1f4>)
 80038a2:	681c      	ldr	r4, [r3, #0]
 80038a4:	2002      	movs	r0, #2
 80038a6:	f001 fc4d 	bl	8005144 <HAL_RCCEx_GetPeriphCLKFreq>
 80038aa:	4603      	mov	r3, r0
 80038ac:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6919      	ldr	r1, [r3, #16]
 80038b6:	4b4b      	ldr	r3, [pc, #300]	; (80039e4 <HAL_ADC_PollForConversion+0x1f8>)
 80038b8:	400b      	ands	r3, r1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d118      	bne.n	80038f0 <HAL_ADC_PollForConversion+0x104>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68d9      	ldr	r1, [r3, #12]
 80038c4:	4b48      	ldr	r3, [pc, #288]	; (80039e8 <HAL_ADC_PollForConversion+0x1fc>)
 80038c6:	400b      	ands	r3, r1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d111      	bne.n	80038f0 <HAL_ADC_PollForConversion+0x104>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6919      	ldr	r1, [r3, #16]
 80038d2:	4b46      	ldr	r3, [pc, #280]	; (80039ec <HAL_ADC_PollForConversion+0x200>)
 80038d4:	400b      	ands	r3, r1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d108      	bne.n	80038ec <HAL_ADC_PollForConversion+0x100>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68d9      	ldr	r1, [r3, #12]
 80038e0:	4b43      	ldr	r3, [pc, #268]	; (80039f0 <HAL_ADC_PollForConversion+0x204>)
 80038e2:	400b      	ands	r3, r1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_ADC_PollForConversion+0x100>
 80038e8:	2314      	movs	r3, #20
 80038ea:	e020      	b.n	800392e <HAL_ADC_PollForConversion+0x142>
 80038ec:	2329      	movs	r3, #41	; 0x29
 80038ee:	e01e      	b.n	800392e <HAL_ADC_PollForConversion+0x142>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6919      	ldr	r1, [r3, #16]
 80038f6:	4b3d      	ldr	r3, [pc, #244]	; (80039ec <HAL_ADC_PollForConversion+0x200>)
 80038f8:	400b      	ands	r3, r1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_ADC_PollForConversion+0x120>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68d9      	ldr	r1, [r3, #12]
 8003904:	4b3a      	ldr	r3, [pc, #232]	; (80039f0 <HAL_ADC_PollForConversion+0x204>)
 8003906:	400b      	ands	r3, r1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00d      	beq.n	8003928 <HAL_ADC_PollForConversion+0x13c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6919      	ldr	r1, [r3, #16]
 8003912:	4b38      	ldr	r3, [pc, #224]	; (80039f4 <HAL_ADC_PollForConversion+0x208>)
 8003914:	400b      	ands	r3, r1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d108      	bne.n	800392c <HAL_ADC_PollForConversion+0x140>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68d9      	ldr	r1, [r3, #12]
 8003920:	4b34      	ldr	r3, [pc, #208]	; (80039f4 <HAL_ADC_PollForConversion+0x208>)
 8003922:	400b      	ands	r3, r1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_ADC_PollForConversion+0x140>
 8003928:	2354      	movs	r3, #84	; 0x54
 800392a:	e000      	b.n	800392e <HAL_ADC_PollForConversion+0x142>
 800392c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003934:	e021      	b.n	800397a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800393c:	d01a      	beq.n	8003974 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d007      	beq.n	8003954 <HAL_ADC_PollForConversion+0x168>
 8003944:	f7ff fd8c 	bl	8003460 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d20f      	bcs.n	8003974 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	429a      	cmp	r2, r3
 800395a:	d90b      	bls.n	8003974 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	f043 0204 	orr.w	r2, r3, #4
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e030      	b.n	80039d6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3301      	adds	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	429a      	cmp	r2, r3
 8003980:	d8d9      	bhi.n	8003936 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f06f 0212 	mvn.w	r2, #18
 800398a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80039a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80039a6:	d115      	bne.n	80039d4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d111      	bne.n	80039d4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d105      	bne.n	80039d4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	f043 0201 	orr.w	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd90      	pop	{r4, r7, pc}
 80039de:	bf00      	nop
 80039e0:	200000c8 	.word	0x200000c8
 80039e4:	24924924 	.word	0x24924924
 80039e8:	00924924 	.word	0x00924924
 80039ec:	12492492 	.word	0x12492492
 80039f0:	00492492 	.word	0x00492492
 80039f4:	00249249 	.word	0x00249249

080039f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x20>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e0dc      	b.n	8003bea <HAL_ADC_ConfigChannel+0x1da>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b06      	cmp	r3, #6
 8003a3e:	d81c      	bhi.n	8003a7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	3b05      	subs	r3, #5
 8003a52:	221f      	movs	r2, #31
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	4019      	ands	r1, r3
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	3b05      	subs	r3, #5
 8003a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	635a      	str	r2, [r3, #52]	; 0x34
 8003a78:	e03c      	b.n	8003af4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b0c      	cmp	r3, #12
 8003a80:	d81c      	bhi.n	8003abc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	3b23      	subs	r3, #35	; 0x23
 8003a94:	221f      	movs	r2, #31
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	4019      	ands	r1, r3
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	3b23      	subs	r3, #35	; 0x23
 8003aae:	fa00 f203 	lsl.w	r2, r0, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30
 8003aba:	e01b      	b.n	8003af4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	3b41      	subs	r3, #65	; 0x41
 8003ace:	221f      	movs	r2, #31
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	4019      	ands	r1, r3
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3b41      	subs	r3, #65	; 0x41
 8003ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b09      	cmp	r3, #9
 8003afa:	d91c      	bls.n	8003b36 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68d9      	ldr	r1, [r3, #12]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3b1e      	subs	r3, #30
 8003b0e:	2207      	movs	r2, #7
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	4019      	ands	r1, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	6898      	ldr	r0, [r3, #8]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4613      	mov	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4413      	add	r3, r2
 8003b26:	3b1e      	subs	r3, #30
 8003b28:	fa00 f203 	lsl.w	r2, r0, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	60da      	str	r2, [r3, #12]
 8003b34:	e019      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6919      	ldr	r1, [r3, #16]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	2207      	movs	r2, #7
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	4019      	ands	r1, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	6898      	ldr	r0, [r3, #8]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4413      	add	r3, r2
 8003b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d003      	beq.n	8003b7a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b76:	2b11      	cmp	r3, #17
 8003b78:	d132      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1d      	ldr	r2, [pc, #116]	; (8003bf4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d125      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d126      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003ba0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b10      	cmp	r3, #16
 8003ba8:	d11a      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a13      	ldr	r2, [pc, #76]	; (8003bfc <HAL_ADC_ConfigChannel+0x1ec>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	0c9a      	lsrs	r2, r3, #18
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003bc0:	e002      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f9      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x1b2>
 8003bce:	e007      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	f043 0220 	orr.w	r2, r3, #32
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	40012400 	.word	0x40012400
 8003bf8:	200000c8 	.word	0x200000c8
 8003bfc:	431bde83 	.word	0x431bde83

08003c00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d040      	beq.n	8003ca0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0201 	orr.w	r2, r2, #1
 8003c2c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c2e:	4b1f      	ldr	r3, [pc, #124]	; (8003cac <ADC_Enable+0xac>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1f      	ldr	r2, [pc, #124]	; (8003cb0 <ADC_Enable+0xb0>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	0c9b      	lsrs	r3, r3, #18
 8003c3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c3c:	e002      	b.n	8003c44 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f9      	bne.n	8003c3e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c4a:	f7ff fc09 	bl	8003460 <HAL_GetTick>
 8003c4e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003c50:	e01f      	b.n	8003c92 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c52:	f7ff fc05 	bl	8003460 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d918      	bls.n	8003c92 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d011      	beq.n	8003c92 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	f043 0210 	orr.w	r2, r3, #16
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	f043 0201 	orr.w	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e007      	b.n	8003ca2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d1d8      	bne.n	8003c52 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	200000c8 	.word	0x200000c8
 8003cb0:	431bde83 	.word	0x431bde83

08003cb4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d12e      	bne.n	8003d2c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0201 	bic.w	r2, r2, #1
 8003cdc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cde:	f7ff fbbf 	bl	8003460 <HAL_GetTick>
 8003ce2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ce4:	e01b      	b.n	8003d1e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ce6:	f7ff fbbb 	bl	8003460 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d914      	bls.n	8003d1e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d10d      	bne.n	8003d1e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	f043 0210 	orr.w	r2, r3, #16
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	f043 0201 	orr.w	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e007      	b.n	8003d2e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d0dc      	beq.n	8003ce6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <__NVIC_SetPriorityGrouping+0x44>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d54:	4013      	ands	r3, r2
 8003d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d6a:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <__NVIC_SetPriorityGrouping+0x44>)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	60d3      	str	r3, [r2, #12]
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d84:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <__NVIC_GetPriorityGrouping+0x18>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	0a1b      	lsrs	r3, r3, #8
 8003d8a:	f003 0307 	and.w	r3, r3, #7
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	e000ed00 	.word	0xe000ed00

08003d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	db0b      	blt.n	8003dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	f003 021f 	and.w	r2, r3, #31
 8003db4:	4906      	ldr	r1, [pc, #24]	; (8003dd0 <__NVIC_EnableIRQ+0x34>)
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr
 8003dd0:	e000e100 	.word	0xe000e100

08003dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	db0a      	blt.n	8003dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	490c      	ldr	r1, [pc, #48]	; (8003e20 <__NVIC_SetPriority+0x4c>)
 8003dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df2:	0112      	lsls	r2, r2, #4
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	440b      	add	r3, r1
 8003df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dfc:	e00a      	b.n	8003e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	4908      	ldr	r1, [pc, #32]	; (8003e24 <__NVIC_SetPriority+0x50>)
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	3b04      	subs	r3, #4
 8003e0c:	0112      	lsls	r2, r2, #4
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	440b      	add	r3, r1
 8003e12:	761a      	strb	r2, [r3, #24]
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	e000e100 	.word	0xe000e100
 8003e24:	e000ed00 	.word	0xe000ed00

08003e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b089      	sub	sp, #36	; 0x24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f1c3 0307 	rsb	r3, r3, #7
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	bf28      	it	cs
 8003e46:	2304      	movcs	r3, #4
 8003e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d902      	bls.n	8003e58 <NVIC_EncodePriority+0x30>
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	3b03      	subs	r3, #3
 8003e56:	e000      	b.n	8003e5a <NVIC_EncodePriority+0x32>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43da      	mvns	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7a:	43d9      	mvns	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e80:	4313      	orrs	r3, r2
         );
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3724      	adds	r7, #36	; 0x24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr

08003e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e9c:	d301      	bcc.n	8003ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e00f      	b.n	8003ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <SysTick_Config+0x40>)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eaa:	210f      	movs	r1, #15
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eb0:	f7ff ff90 	bl	8003dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <SysTick_Config+0x40>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eba:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <SysTick_Config+0x40>)
 8003ebc:	2207      	movs	r2, #7
 8003ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	e000e010 	.word	0xe000e010

08003ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff ff2d 	bl	8003d38 <__NVIC_SetPriorityGrouping>
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	4603      	mov	r3, r0
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ef8:	f7ff ff42 	bl	8003d80 <__NVIC_GetPriorityGrouping>
 8003efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	6978      	ldr	r0, [r7, #20]
 8003f04:	f7ff ff90 	bl	8003e28 <NVIC_EncodePriority>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff ff5f 	bl	8003dd4 <__NVIC_SetPriority>
}
 8003f16:	bf00      	nop
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	4603      	mov	r3, r0
 8003f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff ff35 	bl	8003d9c <__NVIC_EnableIRQ>
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff ffa2 	bl	8003e8c <SysTick_Config>
 8003f48:	4603      	mov	r3, r0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d005      	beq.n	8003f78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2204      	movs	r2, #4
 8003f70:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
 8003f76:	e0d6      	b.n	8004126 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 020e 	bic.w	r2, r2, #14
 8003f86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4b64      	ldr	r3, [pc, #400]	; (8004130 <HAL_DMA_Abort_IT+0x1dc>)
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d958      	bls.n	8004056 <HAL_DMA_Abort_IT+0x102>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a62      	ldr	r2, [pc, #392]	; (8004134 <HAL_DMA_Abort_IT+0x1e0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d04f      	beq.n	800404e <HAL_DMA_Abort_IT+0xfa>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a61      	ldr	r2, [pc, #388]	; (8004138 <HAL_DMA_Abort_IT+0x1e4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d048      	beq.n	800404a <HAL_DMA_Abort_IT+0xf6>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a5f      	ldr	r2, [pc, #380]	; (800413c <HAL_DMA_Abort_IT+0x1e8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d040      	beq.n	8004044 <HAL_DMA_Abort_IT+0xf0>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a5e      	ldr	r2, [pc, #376]	; (8004140 <HAL_DMA_Abort_IT+0x1ec>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d038      	beq.n	800403e <HAL_DMA_Abort_IT+0xea>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a5c      	ldr	r2, [pc, #368]	; (8004144 <HAL_DMA_Abort_IT+0x1f0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d030      	beq.n	8004038 <HAL_DMA_Abort_IT+0xe4>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a5b      	ldr	r2, [pc, #364]	; (8004148 <HAL_DMA_Abort_IT+0x1f4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d028      	beq.n	8004032 <HAL_DMA_Abort_IT+0xde>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a52      	ldr	r2, [pc, #328]	; (8004130 <HAL_DMA_Abort_IT+0x1dc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d020      	beq.n	800402c <HAL_DMA_Abort_IT+0xd8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a57      	ldr	r2, [pc, #348]	; (800414c <HAL_DMA_Abort_IT+0x1f8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d019      	beq.n	8004028 <HAL_DMA_Abort_IT+0xd4>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a55      	ldr	r2, [pc, #340]	; (8004150 <HAL_DMA_Abort_IT+0x1fc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d012      	beq.n	8004024 <HAL_DMA_Abort_IT+0xd0>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a54      	ldr	r2, [pc, #336]	; (8004154 <HAL_DMA_Abort_IT+0x200>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00a      	beq.n	800401e <HAL_DMA_Abort_IT+0xca>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a52      	ldr	r2, [pc, #328]	; (8004158 <HAL_DMA_Abort_IT+0x204>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d102      	bne.n	8004018 <HAL_DMA_Abort_IT+0xc4>
 8004012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004016:	e01b      	b.n	8004050 <HAL_DMA_Abort_IT+0xfc>
 8004018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800401c:	e018      	b.n	8004050 <HAL_DMA_Abort_IT+0xfc>
 800401e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004022:	e015      	b.n	8004050 <HAL_DMA_Abort_IT+0xfc>
 8004024:	2310      	movs	r3, #16
 8004026:	e013      	b.n	8004050 <HAL_DMA_Abort_IT+0xfc>
 8004028:	2301      	movs	r3, #1
 800402a:	e011      	b.n	8004050 <HAL_DMA_Abort_IT+0xfc>
 800402c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004030:	e00e      	b.n	8004050 <HAL_DMA_Abort_IT+0xfc>
 8004032:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004036:	e00b      	b.n	8004050 <HAL_DMA_Abort_IT+0xfc>
 8004038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800403c:	e008      	b.n	8004050 <HAL_DMA_Abort_IT+0xfc>
 800403e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004042:	e005      	b.n	8004050 <HAL_DMA_Abort_IT+0xfc>
 8004044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004048:	e002      	b.n	8004050 <HAL_DMA_Abort_IT+0xfc>
 800404a:	2310      	movs	r3, #16
 800404c:	e000      	b.n	8004050 <HAL_DMA_Abort_IT+0xfc>
 800404e:	2301      	movs	r3, #1
 8004050:	4a42      	ldr	r2, [pc, #264]	; (800415c <HAL_DMA_Abort_IT+0x208>)
 8004052:	6053      	str	r3, [r2, #4]
 8004054:	e057      	b.n	8004106 <HAL_DMA_Abort_IT+0x1b2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a36      	ldr	r2, [pc, #216]	; (8004134 <HAL_DMA_Abort_IT+0x1e0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d04f      	beq.n	8004100 <HAL_DMA_Abort_IT+0x1ac>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a34      	ldr	r2, [pc, #208]	; (8004138 <HAL_DMA_Abort_IT+0x1e4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d048      	beq.n	80040fc <HAL_DMA_Abort_IT+0x1a8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a33      	ldr	r2, [pc, #204]	; (800413c <HAL_DMA_Abort_IT+0x1e8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d040      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x1a2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a31      	ldr	r2, [pc, #196]	; (8004140 <HAL_DMA_Abort_IT+0x1ec>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d038      	beq.n	80040f0 <HAL_DMA_Abort_IT+0x19c>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a30      	ldr	r2, [pc, #192]	; (8004144 <HAL_DMA_Abort_IT+0x1f0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d030      	beq.n	80040ea <HAL_DMA_Abort_IT+0x196>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a2e      	ldr	r2, [pc, #184]	; (8004148 <HAL_DMA_Abort_IT+0x1f4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d028      	beq.n	80040e4 <HAL_DMA_Abort_IT+0x190>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a26      	ldr	r2, [pc, #152]	; (8004130 <HAL_DMA_Abort_IT+0x1dc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d020      	beq.n	80040de <HAL_DMA_Abort_IT+0x18a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a2a      	ldr	r2, [pc, #168]	; (800414c <HAL_DMA_Abort_IT+0x1f8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d019      	beq.n	80040da <HAL_DMA_Abort_IT+0x186>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a29      	ldr	r2, [pc, #164]	; (8004150 <HAL_DMA_Abort_IT+0x1fc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d012      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x182>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a27      	ldr	r2, [pc, #156]	; (8004154 <HAL_DMA_Abort_IT+0x200>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00a      	beq.n	80040d0 <HAL_DMA_Abort_IT+0x17c>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a26      	ldr	r2, [pc, #152]	; (8004158 <HAL_DMA_Abort_IT+0x204>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d102      	bne.n	80040ca <HAL_DMA_Abort_IT+0x176>
 80040c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040c8:	e01b      	b.n	8004102 <HAL_DMA_Abort_IT+0x1ae>
 80040ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040ce:	e018      	b.n	8004102 <HAL_DMA_Abort_IT+0x1ae>
 80040d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040d4:	e015      	b.n	8004102 <HAL_DMA_Abort_IT+0x1ae>
 80040d6:	2310      	movs	r3, #16
 80040d8:	e013      	b.n	8004102 <HAL_DMA_Abort_IT+0x1ae>
 80040da:	2301      	movs	r3, #1
 80040dc:	e011      	b.n	8004102 <HAL_DMA_Abort_IT+0x1ae>
 80040de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040e2:	e00e      	b.n	8004102 <HAL_DMA_Abort_IT+0x1ae>
 80040e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80040e8:	e00b      	b.n	8004102 <HAL_DMA_Abort_IT+0x1ae>
 80040ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040ee:	e008      	b.n	8004102 <HAL_DMA_Abort_IT+0x1ae>
 80040f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040f4:	e005      	b.n	8004102 <HAL_DMA_Abort_IT+0x1ae>
 80040f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040fa:	e002      	b.n	8004102 <HAL_DMA_Abort_IT+0x1ae>
 80040fc:	2310      	movs	r3, #16
 80040fe:	e000      	b.n	8004102 <HAL_DMA_Abort_IT+0x1ae>
 8004100:	2301      	movs	r3, #1
 8004102:	4a17      	ldr	r2, [pc, #92]	; (8004160 <HAL_DMA_Abort_IT+0x20c>)
 8004104:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4798      	blx	r3
    } 
  }
  return status;
 8004126:	7bfb      	ldrb	r3, [r7, #15]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40020080 	.word	0x40020080
 8004134:	40020008 	.word	0x40020008
 8004138:	4002001c 	.word	0x4002001c
 800413c:	40020030 	.word	0x40020030
 8004140:	40020044 	.word	0x40020044
 8004144:	40020058 	.word	0x40020058
 8004148:	4002006c 	.word	0x4002006c
 800414c:	40020408 	.word	0x40020408
 8004150:	4002041c 	.word	0x4002041c
 8004154:	40020430 	.word	0x40020430
 8004158:	40020444 	.word	0x40020444
 800415c:	40020400 	.word	0x40020400
 8004160:	40020000 	.word	0x40020000

08004164 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004164:	b480      	push	{r7}
 8004166:	b08b      	sub	sp, #44	; 0x2c
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800416e:	2300      	movs	r3, #0
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004172:	2300      	movs	r3, #0
 8004174:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004176:	e179      	b.n	800446c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004178:	2201      	movs	r2, #1
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	4013      	ands	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	429a      	cmp	r2, r3
 8004192:	f040 8168 	bne.w	8004466 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4a96      	ldr	r2, [pc, #600]	; (80043f4 <HAL_GPIO_Init+0x290>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d05e      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041a0:	4a94      	ldr	r2, [pc, #592]	; (80043f4 <HAL_GPIO_Init+0x290>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d875      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041a6:	4a94      	ldr	r2, [pc, #592]	; (80043f8 <HAL_GPIO_Init+0x294>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d058      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041ac:	4a92      	ldr	r2, [pc, #584]	; (80043f8 <HAL_GPIO_Init+0x294>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d86f      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041b2:	4a92      	ldr	r2, [pc, #584]	; (80043fc <HAL_GPIO_Init+0x298>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d052      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041b8:	4a90      	ldr	r2, [pc, #576]	; (80043fc <HAL_GPIO_Init+0x298>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d869      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041be:	4a90      	ldr	r2, [pc, #576]	; (8004400 <HAL_GPIO_Init+0x29c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d04c      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041c4:	4a8e      	ldr	r2, [pc, #568]	; (8004400 <HAL_GPIO_Init+0x29c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d863      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041ca:	4a8e      	ldr	r2, [pc, #568]	; (8004404 <HAL_GPIO_Init+0x2a0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d046      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041d0:	4a8c      	ldr	r2, [pc, #560]	; (8004404 <HAL_GPIO_Init+0x2a0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d85d      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041d6:	2b12      	cmp	r3, #18
 80041d8:	d82a      	bhi.n	8004230 <HAL_GPIO_Init+0xcc>
 80041da:	2b12      	cmp	r3, #18
 80041dc:	d859      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041de:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <HAL_GPIO_Init+0x80>)
 80041e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e4:	0800425f 	.word	0x0800425f
 80041e8:	08004239 	.word	0x08004239
 80041ec:	0800424b 	.word	0x0800424b
 80041f0:	0800428d 	.word	0x0800428d
 80041f4:	08004293 	.word	0x08004293
 80041f8:	08004293 	.word	0x08004293
 80041fc:	08004293 	.word	0x08004293
 8004200:	08004293 	.word	0x08004293
 8004204:	08004293 	.word	0x08004293
 8004208:	08004293 	.word	0x08004293
 800420c:	08004293 	.word	0x08004293
 8004210:	08004293 	.word	0x08004293
 8004214:	08004293 	.word	0x08004293
 8004218:	08004293 	.word	0x08004293
 800421c:	08004293 	.word	0x08004293
 8004220:	08004293 	.word	0x08004293
 8004224:	08004293 	.word	0x08004293
 8004228:	08004241 	.word	0x08004241
 800422c:	08004255 	.word	0x08004255
 8004230:	4a75      	ldr	r2, [pc, #468]	; (8004408 <HAL_GPIO_Init+0x2a4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004236:	e02c      	b.n	8004292 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	623b      	str	r3, [r7, #32]
          break;
 800423e:	e029      	b.n	8004294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	3304      	adds	r3, #4
 8004246:	623b      	str	r3, [r7, #32]
          break;
 8004248:	e024      	b.n	8004294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	3308      	adds	r3, #8
 8004250:	623b      	str	r3, [r7, #32]
          break;
 8004252:	e01f      	b.n	8004294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	330c      	adds	r3, #12
 800425a:	623b      	str	r3, [r7, #32]
          break;
 800425c:	e01a      	b.n	8004294 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004266:	2304      	movs	r3, #4
 8004268:	623b      	str	r3, [r7, #32]
          break;
 800426a:	e013      	b.n	8004294 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d105      	bne.n	8004280 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004274:	2308      	movs	r3, #8
 8004276:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	611a      	str	r2, [r3, #16]
          break;
 800427e:	e009      	b.n	8004294 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004280:	2308      	movs	r3, #8
 8004282:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	615a      	str	r2, [r3, #20]
          break;
 800428a:	e003      	b.n	8004294 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800428c:	2300      	movs	r3, #0
 800428e:	623b      	str	r3, [r7, #32]
          break;
 8004290:	e000      	b.n	8004294 <HAL_GPIO_Init+0x130>
          break;
 8004292:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	2bff      	cmp	r3, #255	; 0xff
 8004298:	d801      	bhi.n	800429e <HAL_GPIO_Init+0x13a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	e001      	b.n	80042a2 <HAL_GPIO_Init+0x13e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2bff      	cmp	r3, #255	; 0xff
 80042a8:	d802      	bhi.n	80042b0 <HAL_GPIO_Init+0x14c>
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	e002      	b.n	80042b6 <HAL_GPIO_Init+0x152>
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	3b08      	subs	r3, #8
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	210f      	movs	r1, #15
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	401a      	ands	r2, r3
 80042c8:	6a39      	ldr	r1, [r7, #32]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	431a      	orrs	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80c1 	beq.w	8004466 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80042e4:	4b49      	ldr	r3, [pc, #292]	; (800440c <HAL_GPIO_Init+0x2a8>)
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	4a48      	ldr	r2, [pc, #288]	; (800440c <HAL_GPIO_Init+0x2a8>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	6193      	str	r3, [r2, #24]
 80042f0:	4b46      	ldr	r3, [pc, #280]	; (800440c <HAL_GPIO_Init+0x2a8>)
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80042fc:	4a44      	ldr	r2, [pc, #272]	; (8004410 <HAL_GPIO_Init+0x2ac>)
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	089b      	lsrs	r3, r3, #2
 8004302:	3302      	adds	r3, #2
 8004304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004308:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	220f      	movs	r2, #15
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4013      	ands	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a3c      	ldr	r2, [pc, #240]	; (8004414 <HAL_GPIO_Init+0x2b0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d01f      	beq.n	8004368 <HAL_GPIO_Init+0x204>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a3b      	ldr	r2, [pc, #236]	; (8004418 <HAL_GPIO_Init+0x2b4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d019      	beq.n	8004364 <HAL_GPIO_Init+0x200>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a3a      	ldr	r2, [pc, #232]	; (800441c <HAL_GPIO_Init+0x2b8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d013      	beq.n	8004360 <HAL_GPIO_Init+0x1fc>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a39      	ldr	r2, [pc, #228]	; (8004420 <HAL_GPIO_Init+0x2bc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00d      	beq.n	800435c <HAL_GPIO_Init+0x1f8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a38      	ldr	r2, [pc, #224]	; (8004424 <HAL_GPIO_Init+0x2c0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d007      	beq.n	8004358 <HAL_GPIO_Init+0x1f4>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a37      	ldr	r2, [pc, #220]	; (8004428 <HAL_GPIO_Init+0x2c4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_GPIO_Init+0x1f0>
 8004350:	2305      	movs	r3, #5
 8004352:	e00a      	b.n	800436a <HAL_GPIO_Init+0x206>
 8004354:	2306      	movs	r3, #6
 8004356:	e008      	b.n	800436a <HAL_GPIO_Init+0x206>
 8004358:	2304      	movs	r3, #4
 800435a:	e006      	b.n	800436a <HAL_GPIO_Init+0x206>
 800435c:	2303      	movs	r3, #3
 800435e:	e004      	b.n	800436a <HAL_GPIO_Init+0x206>
 8004360:	2302      	movs	r3, #2
 8004362:	e002      	b.n	800436a <HAL_GPIO_Init+0x206>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <HAL_GPIO_Init+0x206>
 8004368:	2300      	movs	r3, #0
 800436a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436c:	f002 0203 	and.w	r2, r2, #3
 8004370:	0092      	lsls	r2, r2, #2
 8004372:	4093      	lsls	r3, r2
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800437a:	4925      	ldr	r1, [pc, #148]	; (8004410 <HAL_GPIO_Init+0x2ac>)
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	3302      	adds	r3, #2
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d006      	beq.n	80043a2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004394:	4b25      	ldr	r3, [pc, #148]	; (800442c <HAL_GPIO_Init+0x2c8>)
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	4924      	ldr	r1, [pc, #144]	; (800442c <HAL_GPIO_Init+0x2c8>)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]
 80043a0:	e006      	b.n	80043b0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80043a2:	4b22      	ldr	r3, [pc, #136]	; (800442c <HAL_GPIO_Init+0x2c8>)
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	43db      	mvns	r3, r3
 80043aa:	4920      	ldr	r1, [pc, #128]	; (800442c <HAL_GPIO_Init+0x2c8>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d006      	beq.n	80043ca <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80043bc:	4b1b      	ldr	r3, [pc, #108]	; (800442c <HAL_GPIO_Init+0x2c8>)
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	491a      	ldr	r1, [pc, #104]	; (800442c <HAL_GPIO_Init+0x2c8>)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60cb      	str	r3, [r1, #12]
 80043c8:	e006      	b.n	80043d8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043ca:	4b18      	ldr	r3, [pc, #96]	; (800442c <HAL_GPIO_Init+0x2c8>)
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	43db      	mvns	r3, r3
 80043d2:	4916      	ldr	r1, [pc, #88]	; (800442c <HAL_GPIO_Init+0x2c8>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d025      	beq.n	8004430 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80043e4:	4b11      	ldr	r3, [pc, #68]	; (800442c <HAL_GPIO_Init+0x2c8>)
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	4910      	ldr	r1, [pc, #64]	; (800442c <HAL_GPIO_Init+0x2c8>)
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	604b      	str	r3, [r1, #4]
 80043f0:	e025      	b.n	800443e <HAL_GPIO_Init+0x2da>
 80043f2:	bf00      	nop
 80043f4:	10320000 	.word	0x10320000
 80043f8:	10310000 	.word	0x10310000
 80043fc:	10220000 	.word	0x10220000
 8004400:	10210000 	.word	0x10210000
 8004404:	10120000 	.word	0x10120000
 8004408:	10110000 	.word	0x10110000
 800440c:	40021000 	.word	0x40021000
 8004410:	40010000 	.word	0x40010000
 8004414:	40010800 	.word	0x40010800
 8004418:	40010c00 	.word	0x40010c00
 800441c:	40011000 	.word	0x40011000
 8004420:	40011400 	.word	0x40011400
 8004424:	40011800 	.word	0x40011800
 8004428:	40011c00 	.word	0x40011c00
 800442c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004430:	4b15      	ldr	r3, [pc, #84]	; (8004488 <HAL_GPIO_Init+0x324>)
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	43db      	mvns	r3, r3
 8004438:	4913      	ldr	r1, [pc, #76]	; (8004488 <HAL_GPIO_Init+0x324>)
 800443a:	4013      	ands	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d006      	beq.n	8004458 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <HAL_GPIO_Init+0x324>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	490e      	ldr	r1, [pc, #56]	; (8004488 <HAL_GPIO_Init+0x324>)
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	4313      	orrs	r3, r2
 8004454:	600b      	str	r3, [r1, #0]
 8004456:	e006      	b.n	8004466 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004458:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <HAL_GPIO_Init+0x324>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	43db      	mvns	r3, r3
 8004460:	4909      	ldr	r1, [pc, #36]	; (8004488 <HAL_GPIO_Init+0x324>)
 8004462:	4013      	ands	r3, r2
 8004464:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	3301      	adds	r3, #1
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	fa22 f303 	lsr.w	r3, r2, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	f47f ae7e 	bne.w	8004178 <HAL_GPIO_Init+0x14>
  }
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	372c      	adds	r7, #44	; 0x2c
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr
 8004488:	40010400 	.word	0x40010400

0800448c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	887b      	ldrh	r3, [r7, #2]
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044a4:	2301      	movs	r3, #1
 80044a6:	73fb      	strb	r3, [r7, #15]
 80044a8:	e001      	b.n	80044ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr

080044ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	460b      	mov	r3, r1
 80044c4:	807b      	strh	r3, [r7, #2]
 80044c6:	4613      	mov	r3, r2
 80044c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044ca:	787b      	ldrb	r3, [r7, #1]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044d0:	887a      	ldrh	r2, [r7, #2]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80044d6:	e003      	b.n	80044e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044d8:	887b      	ldrh	r3, [r7, #2]
 80044da:	041a      	lsls	r2, r3, #16
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	611a      	str	r2, [r3, #16]
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr
	...

080044ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044f6:	4b08      	ldr	r3, [pc, #32]	; (8004518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d006      	beq.n	8004510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004502:	4a05      	ldr	r2, [pc, #20]	; (8004518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004508:	88fb      	ldrh	r3, [r7, #6]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 f806 	bl	800451c <HAL_GPIO_EXTI_Callback>
  }
}
 8004510:	bf00      	nop
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40010400 	.word	0x40010400

0800451c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e12b      	b.n	800479a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fe fc7c 	bl	8002e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2224      	movs	r2, #36	; 0x24
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0201 	bic.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004582:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004592:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004594:	f000 fcda 	bl	8004f4c <HAL_RCC_GetPCLK1Freq>
 8004598:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4a81      	ldr	r2, [pc, #516]	; (80047a4 <HAL_I2C_Init+0x274>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d807      	bhi.n	80045b4 <HAL_I2C_Init+0x84>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a80      	ldr	r2, [pc, #512]	; (80047a8 <HAL_I2C_Init+0x278>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	bf94      	ite	ls
 80045ac:	2301      	movls	r3, #1
 80045ae:	2300      	movhi	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	e006      	b.n	80045c2 <HAL_I2C_Init+0x92>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a7d      	ldr	r2, [pc, #500]	; (80047ac <HAL_I2C_Init+0x27c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	bf94      	ite	ls
 80045bc:	2301      	movls	r3, #1
 80045be:	2300      	movhi	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e0e7      	b.n	800479a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a78      	ldr	r2, [pc, #480]	; (80047b0 <HAL_I2C_Init+0x280>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	0c9b      	lsrs	r3, r3, #18
 80045d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	4a6a      	ldr	r2, [pc, #424]	; (80047a4 <HAL_I2C_Init+0x274>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d802      	bhi.n	8004604 <HAL_I2C_Init+0xd4>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	3301      	adds	r3, #1
 8004602:	e009      	b.n	8004618 <HAL_I2C_Init+0xe8>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	4a69      	ldr	r2, [pc, #420]	; (80047b4 <HAL_I2C_Init+0x284>)
 8004610:	fba2 2303 	umull	r2, r3, r2, r3
 8004614:	099b      	lsrs	r3, r3, #6
 8004616:	3301      	adds	r3, #1
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6812      	ldr	r2, [r2, #0]
 800461c:	430b      	orrs	r3, r1
 800461e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800462a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	495c      	ldr	r1, [pc, #368]	; (80047a4 <HAL_I2C_Init+0x274>)
 8004634:	428b      	cmp	r3, r1
 8004636:	d819      	bhi.n	800466c <HAL_I2C_Init+0x13c>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1e59      	subs	r1, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	fbb1 f3f3 	udiv	r3, r1, r3
 8004646:	1c59      	adds	r1, r3, #1
 8004648:	f640 73fc 	movw	r3, #4092	; 0xffc
 800464c:	400b      	ands	r3, r1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_I2C_Init+0x138>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1e59      	subs	r1, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004660:	3301      	adds	r3, #1
 8004662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004666:	e051      	b.n	800470c <HAL_I2C_Init+0x1dc>
 8004668:	2304      	movs	r3, #4
 800466a:	e04f      	b.n	800470c <HAL_I2C_Init+0x1dc>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d111      	bne.n	8004698 <HAL_I2C_Init+0x168>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	1e58      	subs	r0, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6859      	ldr	r1, [r3, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	440b      	add	r3, r1
 8004682:	fbb0 f3f3 	udiv	r3, r0, r3
 8004686:	3301      	adds	r3, #1
 8004688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf0c      	ite	eq
 8004690:	2301      	moveq	r3, #1
 8004692:	2300      	movne	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	e012      	b.n	80046be <HAL_I2C_Init+0x18e>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1e58      	subs	r0, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	0099      	lsls	r1, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ae:	3301      	adds	r3, #1
 80046b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_Init+0x196>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e022      	b.n	800470c <HAL_I2C_Init+0x1dc>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10e      	bne.n	80046ec <HAL_I2C_Init+0x1bc>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1e58      	subs	r0, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6859      	ldr	r1, [r3, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	440b      	add	r3, r1
 80046dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e0:	3301      	adds	r3, #1
 80046e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ea:	e00f      	b.n	800470c <HAL_I2C_Init+0x1dc>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	1e58      	subs	r0, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6859      	ldr	r1, [r3, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	0099      	lsls	r1, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004702:	3301      	adds	r3, #1
 8004704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	6809      	ldr	r1, [r1, #0]
 8004710:	4313      	orrs	r3, r2
 8004712:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69da      	ldr	r2, [r3, #28]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800473a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6911      	ldr	r1, [r2, #16]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68d2      	ldr	r2, [r2, #12]
 8004746:	4311      	orrs	r1, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	430b      	orrs	r3, r1
 800474e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695a      	ldr	r2, [r3, #20]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	000186a0 	.word	0x000186a0
 80047a8:	001e847f 	.word	0x001e847f
 80047ac:	003d08ff 	.word	0x003d08ff
 80047b0:	431bde83 	.word	0x431bde83
 80047b4:	10624dd3 	.word	0x10624dd3

080047b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e272      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 8087 	beq.w	80048e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047d8:	4b92      	ldr	r3, [pc, #584]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 030c 	and.w	r3, r3, #12
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d00c      	beq.n	80047fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047e4:	4b8f      	ldr	r3, [pc, #572]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 030c 	and.w	r3, r3, #12
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d112      	bne.n	8004816 <HAL_RCC_OscConfig+0x5e>
 80047f0:	4b8c      	ldr	r3, [pc, #560]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fc:	d10b      	bne.n	8004816 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fe:	4b89      	ldr	r3, [pc, #548]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d06c      	beq.n	80048e4 <HAL_RCC_OscConfig+0x12c>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d168      	bne.n	80048e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e24c      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481e:	d106      	bne.n	800482e <HAL_RCC_OscConfig+0x76>
 8004820:	4b80      	ldr	r3, [pc, #512]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a7f      	ldr	r2, [pc, #508]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 8004826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	e02e      	b.n	800488c <HAL_RCC_OscConfig+0xd4>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10c      	bne.n	8004850 <HAL_RCC_OscConfig+0x98>
 8004836:	4b7b      	ldr	r3, [pc, #492]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a7a      	ldr	r2, [pc, #488]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 800483c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	4b78      	ldr	r3, [pc, #480]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a77      	ldr	r2, [pc, #476]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 8004848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e01d      	b.n	800488c <HAL_RCC_OscConfig+0xd4>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004858:	d10c      	bne.n	8004874 <HAL_RCC_OscConfig+0xbc>
 800485a:	4b72      	ldr	r3, [pc, #456]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a71      	ldr	r2, [pc, #452]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 8004860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	4b6f      	ldr	r3, [pc, #444]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a6e      	ldr	r2, [pc, #440]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 800486c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	e00b      	b.n	800488c <HAL_RCC_OscConfig+0xd4>
 8004874:	4b6b      	ldr	r3, [pc, #428]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a6a      	ldr	r2, [pc, #424]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 800487a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	4b68      	ldr	r3, [pc, #416]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a67      	ldr	r2, [pc, #412]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 8004886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d013      	beq.n	80048bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004894:	f7fe fde4 	bl	8003460 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800489c:	f7fe fde0 	bl	8003460 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	; 0x64
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e200      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ae:	4b5d      	ldr	r3, [pc, #372]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0xe4>
 80048ba:	e014      	b.n	80048e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048bc:	f7fe fdd0 	bl	8003460 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c4:	f7fe fdcc 	bl	8003460 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e1ec      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048d6:	4b53      	ldr	r3, [pc, #332]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x10c>
 80048e2:	e000      	b.n	80048e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d063      	beq.n	80049ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048f2:	4b4c      	ldr	r3, [pc, #304]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048fe:	4b49      	ldr	r3, [pc, #292]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	2b08      	cmp	r3, #8
 8004908:	d11c      	bne.n	8004944 <HAL_RCC_OscConfig+0x18c>
 800490a:	4b46      	ldr	r3, [pc, #280]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d116      	bne.n	8004944 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004916:	4b43      	ldr	r3, [pc, #268]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <HAL_RCC_OscConfig+0x176>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d001      	beq.n	800492e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e1c0      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492e:	4b3d      	ldr	r3, [pc, #244]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	4939      	ldr	r1, [pc, #228]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 800493e:	4313      	orrs	r3, r2
 8004940:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004942:	e03a      	b.n	80049ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d020      	beq.n	800498e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800494c:	4b36      	ldr	r3, [pc, #216]	; (8004a28 <HAL_RCC_OscConfig+0x270>)
 800494e:	2201      	movs	r2, #1
 8004950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004952:	f7fe fd85 	bl	8003460 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800495a:	f7fe fd81 	bl	8003460 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e1a1      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496c:	4b2d      	ldr	r3, [pc, #180]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004978:	4b2a      	ldr	r3, [pc, #168]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	4927      	ldr	r1, [pc, #156]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 8004988:	4313      	orrs	r3, r2
 800498a:	600b      	str	r3, [r1, #0]
 800498c:	e015      	b.n	80049ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800498e:	4b26      	ldr	r3, [pc, #152]	; (8004a28 <HAL_RCC_OscConfig+0x270>)
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004994:	f7fe fd64 	bl	8003460 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800499c:	f7fe fd60 	bl	8003460 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e180      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ae:	4b1d      	ldr	r3, [pc, #116]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d03a      	beq.n	8004a3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d019      	beq.n	8004a02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ce:	4b17      	ldr	r3, [pc, #92]	; (8004a2c <HAL_RCC_OscConfig+0x274>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d4:	f7fe fd44 	bl	8003460 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049dc:	f7fe fd40 	bl	8003460 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e160      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ee:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <HAL_RCC_OscConfig+0x26c>)
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0f0      	beq.n	80049dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80049fa:	2001      	movs	r0, #1
 80049fc:	f000 face 	bl	8004f9c <RCC_Delay>
 8004a00:	e01c      	b.n	8004a3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a02:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <HAL_RCC_OscConfig+0x274>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a08:	f7fe fd2a 	bl	8003460 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a0e:	e00f      	b.n	8004a30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a10:	f7fe fd26 	bl	8003460 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d908      	bls.n	8004a30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e146      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000
 8004a28:	42420000 	.word	0x42420000
 8004a2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a30:	4b92      	ldr	r3, [pc, #584]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e9      	bne.n	8004a10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 80a6 	beq.w	8004b96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a4e:	4b8b      	ldr	r3, [pc, #556]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10d      	bne.n	8004a76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5a:	4b88      	ldr	r3, [pc, #544]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	4a87      	ldr	r2, [pc, #540]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a64:	61d3      	str	r3, [r2, #28]
 8004a66:	4b85      	ldr	r3, [pc, #532]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	60bb      	str	r3, [r7, #8]
 8004a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a72:	2301      	movs	r3, #1
 8004a74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a76:	4b82      	ldr	r3, [pc, #520]	; (8004c80 <HAL_RCC_OscConfig+0x4c8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d118      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a82:	4b7f      	ldr	r3, [pc, #508]	; (8004c80 <HAL_RCC_OscConfig+0x4c8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a7e      	ldr	r2, [pc, #504]	; (8004c80 <HAL_RCC_OscConfig+0x4c8>)
 8004a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a8e:	f7fe fce7 	bl	8003460 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a96:	f7fe fce3 	bl	8003460 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b64      	cmp	r3, #100	; 0x64
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e103      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa8:	4b75      	ldr	r3, [pc, #468]	; (8004c80 <HAL_RCC_OscConfig+0x4c8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d106      	bne.n	8004aca <HAL_RCC_OscConfig+0x312>
 8004abc:	4b6f      	ldr	r3, [pc, #444]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	4a6e      	ldr	r2, [pc, #440]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	6213      	str	r3, [r2, #32]
 8004ac8:	e02d      	b.n	8004b26 <HAL_RCC_OscConfig+0x36e>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCC_OscConfig+0x334>
 8004ad2:	4b6a      	ldr	r3, [pc, #424]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	4a69      	ldr	r2, [pc, #420]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004ad8:	f023 0301 	bic.w	r3, r3, #1
 8004adc:	6213      	str	r3, [r2, #32]
 8004ade:	4b67      	ldr	r3, [pc, #412]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	4a66      	ldr	r2, [pc, #408]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004ae4:	f023 0304 	bic.w	r3, r3, #4
 8004ae8:	6213      	str	r3, [r2, #32]
 8004aea:	e01c      	b.n	8004b26 <HAL_RCC_OscConfig+0x36e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b05      	cmp	r3, #5
 8004af2:	d10c      	bne.n	8004b0e <HAL_RCC_OscConfig+0x356>
 8004af4:	4b61      	ldr	r3, [pc, #388]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	4a60      	ldr	r2, [pc, #384]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004afa:	f043 0304 	orr.w	r3, r3, #4
 8004afe:	6213      	str	r3, [r2, #32]
 8004b00:	4b5e      	ldr	r3, [pc, #376]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	4a5d      	ldr	r2, [pc, #372]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	6213      	str	r3, [r2, #32]
 8004b0c:	e00b      	b.n	8004b26 <HAL_RCC_OscConfig+0x36e>
 8004b0e:	4b5b      	ldr	r3, [pc, #364]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	4a5a      	ldr	r2, [pc, #360]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	6213      	str	r3, [r2, #32]
 8004b1a:	4b58      	ldr	r3, [pc, #352]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	4a57      	ldr	r2, [pc, #348]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004b20:	f023 0304 	bic.w	r3, r3, #4
 8004b24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d015      	beq.n	8004b5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b2e:	f7fe fc97 	bl	8003460 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b34:	e00a      	b.n	8004b4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b36:	f7fe fc93 	bl	8003460 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e0b1      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4c:	4b4b      	ldr	r3, [pc, #300]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0ee      	beq.n	8004b36 <HAL_RCC_OscConfig+0x37e>
 8004b58:	e014      	b.n	8004b84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b5a:	f7fe fc81 	bl	8003460 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b60:	e00a      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b62:	f7fe fc7d 	bl	8003460 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e09b      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b78:	4b40      	ldr	r3, [pc, #256]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1ee      	bne.n	8004b62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d105      	bne.n	8004b96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b8a:	4b3c      	ldr	r3, [pc, #240]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	4a3b      	ldr	r2, [pc, #236]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 8087 	beq.w	8004cae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ba0:	4b36      	ldr	r3, [pc, #216]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f003 030c 	and.w	r3, r3, #12
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d061      	beq.n	8004c70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d146      	bne.n	8004c42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb4:	4b33      	ldr	r3, [pc, #204]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bba:	f7fe fc51 	bl	8003460 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc2:	f7fe fc4d 	bl	8003460 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e06d      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bd4:	4b29      	ldr	r3, [pc, #164]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f0      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be8:	d108      	bne.n	8004bfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004bea:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	4921      	ldr	r1, [pc, #132]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bfc:	4b1f      	ldr	r3, [pc, #124]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a19      	ldr	r1, [r3, #32]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	491b      	ldr	r1, [pc, #108]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c14:	4b1b      	ldr	r3, [pc, #108]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1a:	f7fe fc21 	bl	8003460 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c22:	f7fe fc1d 	bl	8003460 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e03d      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c34:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0f0      	beq.n	8004c22 <HAL_RCC_OscConfig+0x46a>
 8004c40:	e035      	b.n	8004cae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c42:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c48:	f7fe fc0a 	bl	8003460 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c50:	f7fe fc06 	bl	8003460 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e026      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c62:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <HAL_RCC_OscConfig+0x4c4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f0      	bne.n	8004c50 <HAL_RCC_OscConfig+0x498>
 8004c6e:	e01e      	b.n	8004cae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d107      	bne.n	8004c88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e019      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	40007000 	.word	0x40007000
 8004c84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c88:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <HAL_RCC_OscConfig+0x500>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d106      	bne.n	8004caa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d001      	beq.n	8004cae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40021000 	.word	0x40021000

08004cbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0d0      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cd0:	4b6a      	ldr	r3, [pc, #424]	; (8004e7c <HAL_RCC_ClockConfig+0x1c0>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d910      	bls.n	8004d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cde:	4b67      	ldr	r3, [pc, #412]	; (8004e7c <HAL_RCC_ClockConfig+0x1c0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f023 0207 	bic.w	r2, r3, #7
 8004ce6:	4965      	ldr	r1, [pc, #404]	; (8004e7c <HAL_RCC_ClockConfig+0x1c0>)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cee:	4b63      	ldr	r3, [pc, #396]	; (8004e7c <HAL_RCC_ClockConfig+0x1c0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0b8      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d020      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d18:	4b59      	ldr	r3, [pc, #356]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	4a58      	ldr	r2, [pc, #352]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d30:	4b53      	ldr	r3, [pc, #332]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	4a52      	ldr	r2, [pc, #328]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d3c:	4b50      	ldr	r3, [pc, #320]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	494d      	ldr	r1, [pc, #308]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d040      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d107      	bne.n	8004d72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d62:	4b47      	ldr	r3, [pc, #284]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d115      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e07f      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d107      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d7a:	4b41      	ldr	r3, [pc, #260]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e073      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d8a:	4b3d      	ldr	r3, [pc, #244]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e06b      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d9a:	4b39      	ldr	r3, [pc, #228]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f023 0203 	bic.w	r2, r3, #3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	4936      	ldr	r1, [pc, #216]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dac:	f7fe fb58 	bl	8003460 <HAL_GetTick>
 8004db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db2:	e00a      	b.n	8004dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db4:	f7fe fb54 	bl	8003460 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e053      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dca:	4b2d      	ldr	r3, [pc, #180]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f003 020c 	and.w	r2, r3, #12
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d1eb      	bne.n	8004db4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ddc:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <HAL_RCC_ClockConfig+0x1c0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d210      	bcs.n	8004e0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dea:	4b24      	ldr	r3, [pc, #144]	; (8004e7c <HAL_RCC_ClockConfig+0x1c0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f023 0207 	bic.w	r2, r3, #7
 8004df2:	4922      	ldr	r1, [pc, #136]	; (8004e7c <HAL_RCC_ClockConfig+0x1c0>)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfa:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <HAL_RCC_ClockConfig+0x1c0>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d001      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e032      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d008      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e18:	4b19      	ldr	r3, [pc, #100]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	4916      	ldr	r1, [pc, #88]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d009      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e36:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	490e      	ldr	r1, [pc, #56]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e4a:	f000 f821 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	091b      	lsrs	r3, r3, #4
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	490a      	ldr	r1, [pc, #40]	; (8004e84 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5c:	5ccb      	ldrb	r3, [r1, r3]
 8004e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e62:	4a09      	ldr	r2, [pc, #36]	; (8004e88 <HAL_RCC_ClockConfig+0x1cc>)
 8004e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e66:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <HAL_RCC_ClockConfig+0x1d0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe fab6 	bl	80033dc <HAL_InitTick>

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40022000 	.word	0x40022000
 8004e80:	40021000 	.word	0x40021000
 8004e84:	08008994 	.word	0x08008994
 8004e88:	200000c8 	.word	0x200000c8
 8004e8c:	200000cc 	.word	0x200000cc

08004e90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004eaa:	4b1e      	ldr	r3, [pc, #120]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x94>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d002      	beq.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x30>
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d003      	beq.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x36>
 8004ebe:	e027      	b.n	8004f10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ec0:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ec2:	613b      	str	r3, [r7, #16]
      break;
 8004ec4:	e027      	b.n	8004f16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	0c9b      	lsrs	r3, r3, #18
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ed0:	5cd3      	ldrb	r3, [r2, r3]
 8004ed2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d010      	beq.n	8004f00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ede:	4b11      	ldr	r3, [pc, #68]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	0c5b      	lsrs	r3, r3, #17
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	4a11      	ldr	r2, [pc, #68]	; (8004f30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004eea:	5cd3      	ldrb	r3, [r2, r3]
 8004eec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a0d      	ldr	r2, [pc, #52]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ef2:	fb03 f202 	mul.w	r2, r3, r2
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	e004      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a0c      	ldr	r2, [pc, #48]	; (8004f34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f04:	fb02 f303 	mul.w	r3, r2, r3
 8004f08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	613b      	str	r3, [r7, #16]
      break;
 8004f0e:	e002      	b.n	8004f16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f10:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f12:	613b      	str	r3, [r7, #16]
      break;
 8004f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f16:	693b      	ldr	r3, [r7, #16]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bc80      	pop	{r7}
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40021000 	.word	0x40021000
 8004f28:	007a1200 	.word	0x007a1200
 8004f2c:	080089ac 	.word	0x080089ac
 8004f30:	080089bc 	.word	0x080089bc
 8004f34:	003d0900 	.word	0x003d0900

08004f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f3c:	4b02      	ldr	r3, [pc, #8]	; (8004f48 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr
 8004f48:	200000c8 	.word	0x200000c8

08004f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f50:	f7ff fff2 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	0a1b      	lsrs	r3, r3, #8
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	4903      	ldr	r1, [pc, #12]	; (8004f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f62:	5ccb      	ldrb	r3, [r1, r3]
 8004f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	080089a4 	.word	0x080089a4

08004f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f78:	f7ff ffde 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	0adb      	lsrs	r3, r3, #11
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	4903      	ldr	r1, [pc, #12]	; (8004f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f8a:	5ccb      	ldrb	r3, [r1, r3]
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40021000 	.word	0x40021000
 8004f98:	080089a4 	.word	0x080089a4

08004f9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004fa4:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <RCC_Delay+0x34>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a0a      	ldr	r2, [pc, #40]	; (8004fd4 <RCC_Delay+0x38>)
 8004faa:	fba2 2303 	umull	r2, r3, r2, r3
 8004fae:	0a5b      	lsrs	r3, r3, #9
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	fb02 f303 	mul.w	r3, r2, r3
 8004fb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004fb8:	bf00      	nop
  }
  while (Delay --);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1e5a      	subs	r2, r3, #1
 8004fbe:	60fa      	str	r2, [r7, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1f9      	bne.n	8004fb8 <RCC_Delay+0x1c>
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr
 8004fd0:	200000c8 	.word	0x200000c8
 8004fd4:	10624dd3 	.word	0x10624dd3

08004fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d07d      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ff8:	4b4f      	ldr	r3, [pc, #316]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10d      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005004:	4b4c      	ldr	r3, [pc, #304]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	4a4b      	ldr	r2, [pc, #300]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800500a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800500e:	61d3      	str	r3, [r2, #28]
 8005010:	4b49      	ldr	r3, [pc, #292]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800501c:	2301      	movs	r3, #1
 800501e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005020:	4b46      	ldr	r3, [pc, #280]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005028:	2b00      	cmp	r3, #0
 800502a:	d118      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800502c:	4b43      	ldr	r3, [pc, #268]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a42      	ldr	r2, [pc, #264]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005036:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005038:	f7fe fa12 	bl	8003460 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503e:	e008      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005040:	f7fe fa0e 	bl	8003460 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b64      	cmp	r3, #100	; 0x64
 800504c:	d901      	bls.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e06d      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005052:	4b3a      	ldr	r3, [pc, #232]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0f0      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800505e:	4b36      	ldr	r3, [pc, #216]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005066:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d02e      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	429a      	cmp	r2, r3
 800507a:	d027      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800507c:	4b2e      	ldr	r3, [pc, #184]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005084:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005086:	4b2e      	ldr	r3, [pc, #184]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005088:	2201      	movs	r2, #1
 800508a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800508c:	4b2c      	ldr	r3, [pc, #176]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005092:	4a29      	ldr	r2, [pc, #164]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d014      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a2:	f7fe f9dd 	bl	8003460 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a8:	e00a      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050aa:	f7fe f9d9 	bl	8003460 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e036      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c0:	4b1d      	ldr	r3, [pc, #116]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0ee      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050cc:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	4917      	ldr	r1, [pc, #92]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d105      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e4:	4b14      	ldr	r3, [pc, #80]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	4a13      	ldr	r2, [pc, #76]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d008      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050fc:	4b0e      	ldr	r3, [pc, #56]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	490b      	ldr	r1, [pc, #44]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510a:	4313      	orrs	r3, r2
 800510c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b00      	cmp	r3, #0
 8005118:	d008      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800511a:	4b07      	ldr	r3, [pc, #28]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	4904      	ldr	r1, [pc, #16]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005128:	4313      	orrs	r3, r2
 800512a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	40021000 	.word	0x40021000
 800513c:	40007000 	.word	0x40007000
 8005140:	42420440 	.word	0x42420440

08005144 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	2300      	movs	r3, #0
 8005156:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	2300      	movs	r3, #0
 800515e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3b01      	subs	r3, #1
 8005164:	2b0f      	cmp	r3, #15
 8005166:	f200 80af 	bhi.w	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	08005247 	.word	0x08005247
 8005174:	080052ad 	.word	0x080052ad
 8005178:	080052c9 	.word	0x080052c9
 800517c:	08005237 	.word	0x08005237
 8005180:	080052c9 	.word	0x080052c9
 8005184:	080052c9 	.word	0x080052c9
 8005188:	080052c9 	.word	0x080052c9
 800518c:	0800523f 	.word	0x0800523f
 8005190:	080052c9 	.word	0x080052c9
 8005194:	080052c9 	.word	0x080052c9
 8005198:	080052c9 	.word	0x080052c9
 800519c:	080052c9 	.word	0x080052c9
 80051a0:	080052c9 	.word	0x080052c9
 80051a4:	080052c9 	.word	0x080052c9
 80051a8:	080052c9 	.word	0x080052c9
 80051ac:	080051b1 	.word	0x080051b1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80051b0:	4b4a      	ldr	r3, [pc, #296]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80051b6:	4b49      	ldr	r3, [pc, #292]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 8084 	beq.w	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	0c9b      	lsrs	r3, r3, #18
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	4a44      	ldr	r2, [pc, #272]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80051ce:	5cd3      	ldrb	r3, [r2, r3]
 80051d0:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d015      	beq.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051dc:	4b3f      	ldr	r3, [pc, #252]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	0c5b      	lsrs	r3, r3, #17
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	4a3f      	ldr	r2, [pc, #252]	; (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80051e8:	5cd3      	ldrb	r3, [r2, r3]
 80051ea:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00d      	beq.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80051f6:	4a3c      	ldr	r2, [pc, #240]	; (80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	fb02 f303 	mul.w	r3, r2, r3
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	e004      	b.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4a38      	ldr	r2, [pc, #224]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800520c:	fb02 f303 	mul.w	r3, r2, r3
 8005210:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005212:	4b32      	ldr	r3, [pc, #200]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800521a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800521e:	d102      	bne.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005224:	e052      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	4a31      	ldr	r2, [pc, #196]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 800522c:	fba2 2303 	umull	r2, r3, r2, r3
 8005230:	085b      	lsrs	r3, r3, #1
 8005232:	61bb      	str	r3, [r7, #24]
      break;
 8005234:	e04a      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005236:	f7ff fe2b 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 800523a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800523c:	e049      	b.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800523e:	f7ff fe27 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8005242:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005244:	e045      	b.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005246:	4b25      	ldr	r3, [pc, #148]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005256:	d108      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8005262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	e01f      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005274:	d109      	bne.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005276:	4b19      	ldr	r3, [pc, #100]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8005282:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005286:	61bb      	str	r3, [r7, #24]
 8005288:	e00f      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005290:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005294:	d11c      	bne.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8005296:	4b11      	ldr	r3, [pc, #68]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d016      	beq.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 80052a2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80052a6:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80052a8:	e012      	b.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80052aa:	e011      	b.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80052ac:	f7ff fe62 	bl	8004f74 <HAL_RCC_GetPCLK2Freq>
 80052b0:	4602      	mov	r2, r0
 80052b2:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	0b9b      	lsrs	r3, r3, #14
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	3301      	adds	r3, #1
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c4:	61bb      	str	r3, [r7, #24]
      break;
 80052c6:	e004      	b.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 80052c8:	bf00      	nop
 80052ca:	e002      	b.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80052cc:	bf00      	nop
 80052ce:	e000      	b.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80052d0:	bf00      	nop
    }
  }
  return (frequency);
 80052d2:	69bb      	ldr	r3, [r7, #24]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3720      	adds	r7, #32
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40021000 	.word	0x40021000
 80052e0:	080089c0 	.word	0x080089c0
 80052e4:	080089d0 	.word	0x080089d0
 80052e8:	007a1200 	.word	0x007a1200
 80052ec:	003d0900 	.word	0x003d0900
 80052f0:	aaaaaaab 	.word	0xaaaaaaab

080052f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e076      	b.n	80053f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	2b00      	cmp	r3, #0
 800530c:	d108      	bne.n	8005320 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005316:	d009      	beq.n	800532c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	61da      	str	r2, [r3, #28]
 800531e:	e005      	b.n	800532c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fd fdc2 	bl	8002ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005362:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b0:	ea42 0103 	orr.w	r1, r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	0c1a      	lsrs	r2, r3, #16
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f002 0204 	and.w	r2, r2, #4
 80053d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69da      	ldr	r2, [r3, #28]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08c      	sub	sp, #48	; 0x30
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800540a:	2301      	movs	r3, #1
 800540c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_SPI_TransmitReceive+0x26>
 800541e:	2302      	movs	r3, #2
 8005420:	e198      	b.n	8005754 <HAL_SPI_TransmitReceive+0x358>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800542a:	f7fe f819 	bl	8003460 <HAL_GetTick>
 800542e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005440:	887b      	ldrh	r3, [r7, #2]
 8005442:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005448:	2b01      	cmp	r3, #1
 800544a:	d00f      	beq.n	800546c <HAL_SPI_TransmitReceive+0x70>
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005452:	d107      	bne.n	8005464 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d103      	bne.n	8005464 <HAL_SPI_TransmitReceive+0x68>
 800545c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005460:	2b04      	cmp	r3, #4
 8005462:	d003      	beq.n	800546c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005464:	2302      	movs	r3, #2
 8005466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800546a:	e16d      	b.n	8005748 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <HAL_SPI_TransmitReceive+0x82>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <HAL_SPI_TransmitReceive+0x82>
 8005478:	887b      	ldrh	r3, [r7, #2]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d103      	bne.n	8005486 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005484:	e160      	b.n	8005748 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b04      	cmp	r3, #4
 8005490:	d003      	beq.n	800549a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2205      	movs	r2, #5
 8005496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	887a      	ldrh	r2, [r7, #2]
 80054aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	887a      	ldrh	r2, [r7, #2]
 80054b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	887a      	ldrh	r2, [r7, #2]
 80054bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	887a      	ldrh	r2, [r7, #2]
 80054c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054da:	2b40      	cmp	r3, #64	; 0x40
 80054dc:	d007      	beq.n	80054ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f6:	d17c      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <HAL_SPI_TransmitReceive+0x10a>
 8005500:	8b7b      	ldrh	r3, [r7, #26]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d16a      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	881a      	ldrh	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	1c9a      	adds	r2, r3, #2
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b01      	subs	r3, #1
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800552a:	e057      	b.n	80055dc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b02      	cmp	r3, #2
 8005538:	d11b      	bne.n	8005572 <HAL_SPI_TransmitReceive+0x176>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800553e:	b29b      	uxth	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d016      	beq.n	8005572 <HAL_SPI_TransmitReceive+0x176>
 8005544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005546:	2b01      	cmp	r3, #1
 8005548:	d113      	bne.n	8005572 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	881a      	ldrh	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	1c9a      	adds	r2, r3, #2
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b01      	cmp	r3, #1
 800557e:	d119      	bne.n	80055b4 <HAL_SPI_TransmitReceive+0x1b8>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d014      	beq.n	80055b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	b292      	uxth	r2, r2
 8005596:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	1c9a      	adds	r2, r3, #2
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055b0:	2301      	movs	r3, #1
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055b4:	f7fd ff54 	bl	8003460 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d80b      	bhi.n	80055dc <HAL_SPI_TransmitReceive+0x1e0>
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ca:	d007      	beq.n	80055dc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80055da:	e0b5      	b.n	8005748 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1a2      	bne.n	800552c <HAL_SPI_TransmitReceive+0x130>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d19d      	bne.n	800552c <HAL_SPI_TransmitReceive+0x130>
 80055f0:	e080      	b.n	80056f4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_SPI_TransmitReceive+0x204>
 80055fa:	8b7b      	ldrh	r3, [r7, #26]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d16f      	bne.n	80056e0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	330c      	adds	r3, #12
 800560a:	7812      	ldrb	r2, [r2, #0]
 800560c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005626:	e05b      	b.n	80056e0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b02      	cmp	r3, #2
 8005634:	d11c      	bne.n	8005670 <HAL_SPI_TransmitReceive+0x274>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d017      	beq.n	8005670 <HAL_SPI_TransmitReceive+0x274>
 8005640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005642:	2b01      	cmp	r3, #1
 8005644:	d114      	bne.n	8005670 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	330c      	adds	r3, #12
 8005650:	7812      	ldrb	r2, [r2, #0]
 8005652:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d119      	bne.n	80056b2 <HAL_SPI_TransmitReceive+0x2b6>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d014      	beq.n	80056b2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056ae:	2301      	movs	r3, #1
 80056b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056b2:	f7fd fed5 	bl	8003460 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056be:	429a      	cmp	r2, r3
 80056c0:	d803      	bhi.n	80056ca <HAL_SPI_TransmitReceive+0x2ce>
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056c8:	d102      	bne.n	80056d0 <HAL_SPI_TransmitReceive+0x2d4>
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d107      	bne.n	80056e0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80056de:	e033      	b.n	8005748 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d19e      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x22c>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d199      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f9bb 	bl	8005a74 <SPI_EndRxTxTransaction>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d006      	beq.n	8005712 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005710:	e01a      	b.n	8005748 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800573e:	e003      	b.n	8005748 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005750:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005754:	4618      	mov	r0, r3
 8005756:	3730      	adds	r7, #48	; 0x30
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	099b      	lsrs	r3, r3, #6
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10f      	bne.n	80057a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	099b      	lsrs	r3, r3, #6
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d004      	beq.n	80057a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	4798      	blx	r3
    return;
 800579e:	e0be      	b.n	800591e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	085b      	lsrs	r3, r3, #1
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <HAL_SPI_IRQHandler+0x66>
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	09db      	lsrs	r3, r3, #7
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	4798      	blx	r3
    return;
 80057c0:	e0ad      	b.n	800591e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d106      	bne.n	80057dc <HAL_SPI_IRQHandler+0x80>
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	099b      	lsrs	r3, r3, #6
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 80a1 	beq.w	800591e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 809a 	beq.w	800591e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	099b      	lsrs	r3, r3, #6
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d023      	beq.n	800583e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d011      	beq.n	8005826 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005806:	f043 0204 	orr.w	r2, r3, #4
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800580e:	2300      	movs	r3, #0
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	e00b      	b.n	800583e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005826:	2300      	movs	r3, #0
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	693b      	ldr	r3, [r7, #16]
        return;
 800583c:	e06f      	b.n	800591e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d014      	beq.n	8005874 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584e:	f043 0201 	orr.w	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005878:	2b00      	cmp	r3, #0
 800587a:	d04f      	beq.n	800591c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800588a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d104      	bne.n	80058a8 <HAL_SPI_IRQHandler+0x14c>
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d034      	beq.n	8005912 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0203 	bic.w	r2, r2, #3
 80058b6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d011      	beq.n	80058e4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c4:	4a17      	ldr	r2, [pc, #92]	; (8005924 <HAL_SPI_IRQHandler+0x1c8>)
 80058c6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fe fb41 	bl	8003f54 <HAL_DMA_Abort_IT>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d016      	beq.n	800591a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058f0:	4a0c      	ldr	r2, [pc, #48]	; (8005924 <HAL_SPI_IRQHandler+0x1c8>)
 80058f2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fe fb2b 	bl	8003f54 <HAL_DMA_Abort_IT>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005908:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005910:	e003      	b.n	800591a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f808 	bl	8005928 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005918:	e000      	b.n	800591c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800591a:	bf00      	nop
    return;
 800591c:	bf00      	nop
  }
}
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	0800593b 	.word	0x0800593b

08005928 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	bc80      	pop	{r7}
 8005938:	4770      	bx	lr

0800593a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f7ff ffe7 	bl	8005928 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800595a:	bf00      	nop
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b088      	sub	sp, #32
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	4613      	mov	r3, r2
 8005972:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005974:	f7fd fd74 	bl	8003460 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	4413      	add	r3, r2
 8005982:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005984:	f7fd fd6c 	bl	8003460 <HAL_GetTick>
 8005988:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800598a:	4b39      	ldr	r3, [pc, #228]	; (8005a70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	015b      	lsls	r3, r3, #5
 8005990:	0d1b      	lsrs	r3, r3, #20
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	fb02 f303 	mul.w	r3, r2, r3
 8005998:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800599a:	e054      	b.n	8005a46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059a2:	d050      	beq.n	8005a46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059a4:	f7fd fd5c 	bl	8003460 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d902      	bls.n	80059ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d13d      	bne.n	8005a36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059d2:	d111      	bne.n	80059f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059dc:	d004      	beq.n	80059e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e6:	d107      	bne.n	80059f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a00:	d10f      	bne.n	8005a22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e017      	b.n	8005a66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	bf0c      	ite	eq
 8005a56:	2301      	moveq	r3, #1
 8005a58:	2300      	movne	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d19b      	bne.n	800599c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3720      	adds	r7, #32
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	200000c8 	.word	0x200000c8

08005a74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2200      	movs	r2, #0
 8005a88:	2180      	movs	r1, #128	; 0x80
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f7ff ff6a 	bl	8005964 <SPI_WaitFlagStateUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	f043 0220 	orr.w	r2, r3, #32
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e000      	b.n	8005aa8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d004      	beq.n	8005acc <HAL_SRAM_Init+0x1c>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aca:	d101      	bne.n	8005ad0 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e038      	b.n	8005b42 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d106      	bne.n	8005aea <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f7fd fb41 	bl	800316c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3308      	adds	r3, #8
 8005af2:	4619      	mov	r1, r3
 8005af4:	4610      	mov	r0, r2
 8005af6:	f001 fa95 	bl	8007024 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6818      	ldr	r0, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	461a      	mov	r2, r3
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	f001 faf7 	bl	80070f8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6858      	ldr	r0, [r3, #4]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	f001 fb22 	bl	8007160 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	6892      	ldr	r2, [r2, #8]
 8005b24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	6892      	ldr	r2, [r2, #8]
 8005b30:	f041 0101 	orr.w	r1, r1, #1
 8005b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e041      	b.n	8005be0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d106      	bne.n	8005b76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7fd f9ff 	bl	8002f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4619      	mov	r1, r3
 8005b88:	4610      	mov	r0, r2
 8005b8a:	f000 fdd3 	bl	8006734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d001      	beq.n	8005c00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e03c      	b.n	8005c7a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1d      	ldr	r2, [pc, #116]	; (8005c84 <HAL_TIM_Base_Start+0x9c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d018      	beq.n	8005c44 <HAL_TIM_Base_Start+0x5c>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1c      	ldr	r2, [pc, #112]	; (8005c88 <HAL_TIM_Base_Start+0xa0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d013      	beq.n	8005c44 <HAL_TIM_Base_Start+0x5c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c24:	d00e      	beq.n	8005c44 <HAL_TIM_Base_Start+0x5c>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a18      	ldr	r2, [pc, #96]	; (8005c8c <HAL_TIM_Base_Start+0xa4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d009      	beq.n	8005c44 <HAL_TIM_Base_Start+0x5c>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a16      	ldr	r2, [pc, #88]	; (8005c90 <HAL_TIM_Base_Start+0xa8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d004      	beq.n	8005c44 <HAL_TIM_Base_Start+0x5c>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a15      	ldr	r2, [pc, #84]	; (8005c94 <HAL_TIM_Base_Start+0xac>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d111      	bne.n	8005c68 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b06      	cmp	r3, #6
 8005c54:	d010      	beq.n	8005c78 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0201 	orr.w	r2, r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c66:	e007      	b.n	8005c78 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bc80      	pop	{r7}
 8005c82:	4770      	bx	lr
 8005c84:	40012c00 	.word	0x40012c00
 8005c88:	40013400 	.word	0x40013400
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00

08005c98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e041      	b.n	8005d2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fd f976 	bl	8002fb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f000 fd2c 	bl	8006734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b082      	sub	sp, #8
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e041      	b.n	8005dcc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d106      	bne.n	8005d62 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7fd f94b 	bl	8002ff8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2202      	movs	r2, #2
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3304      	adds	r3, #4
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f000 fcdd 	bl	8006734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d104      	bne.n	8005df2 <HAL_TIM_IC_Start_IT+0x1e>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	e013      	b.n	8005e1a <HAL_TIM_IC_Start_IT+0x46>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d104      	bne.n	8005e02 <HAL_TIM_IC_Start_IT+0x2e>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	e00b      	b.n	8005e1a <HAL_TIM_IC_Start_IT+0x46>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d104      	bne.n	8005e12 <HAL_TIM_IC_Start_IT+0x3e>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	e003      	b.n	8005e1a <HAL_TIM_IC_Start_IT+0x46>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d104      	bne.n	8005e2c <HAL_TIM_IC_Start_IT+0x58>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	e013      	b.n	8005e54 <HAL_TIM_IC_Start_IT+0x80>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d104      	bne.n	8005e3c <HAL_TIM_IC_Start_IT+0x68>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	e00b      	b.n	8005e54 <HAL_TIM_IC_Start_IT+0x80>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d104      	bne.n	8005e4c <HAL_TIM_IC_Start_IT+0x78>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	e003      	b.n	8005e54 <HAL_TIM_IC_Start_IT+0x80>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e56:	7bbb      	ldrb	r3, [r7, #14]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d102      	bne.n	8005e62 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e5c:	7b7b      	ldrb	r3, [r7, #13]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d001      	beq.n	8005e66 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e0c2      	b.n	8005fec <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d104      	bne.n	8005e76 <HAL_TIM_IC_Start_IT+0xa2>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e74:	e013      	b.n	8005e9e <HAL_TIM_IC_Start_IT+0xca>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d104      	bne.n	8005e86 <HAL_TIM_IC_Start_IT+0xb2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e84:	e00b      	b.n	8005e9e <HAL_TIM_IC_Start_IT+0xca>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d104      	bne.n	8005e96 <HAL_TIM_IC_Start_IT+0xc2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e94:	e003      	b.n	8005e9e <HAL_TIM_IC_Start_IT+0xca>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d104      	bne.n	8005eae <HAL_TIM_IC_Start_IT+0xda>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eac:	e013      	b.n	8005ed6 <HAL_TIM_IC_Start_IT+0x102>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d104      	bne.n	8005ebe <HAL_TIM_IC_Start_IT+0xea>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ebc:	e00b      	b.n	8005ed6 <HAL_TIM_IC_Start_IT+0x102>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d104      	bne.n	8005ece <HAL_TIM_IC_Start_IT+0xfa>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ecc:	e003      	b.n	8005ed6 <HAL_TIM_IC_Start_IT+0x102>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b0c      	cmp	r3, #12
 8005eda:	d841      	bhi.n	8005f60 <HAL_TIM_IC_Start_IT+0x18c>
 8005edc:	a201      	add	r2, pc, #4	; (adr r2, 8005ee4 <HAL_TIM_IC_Start_IT+0x110>)
 8005ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee2:	bf00      	nop
 8005ee4:	08005f19 	.word	0x08005f19
 8005ee8:	08005f61 	.word	0x08005f61
 8005eec:	08005f61 	.word	0x08005f61
 8005ef0:	08005f61 	.word	0x08005f61
 8005ef4:	08005f2b 	.word	0x08005f2b
 8005ef8:	08005f61 	.word	0x08005f61
 8005efc:	08005f61 	.word	0x08005f61
 8005f00:	08005f61 	.word	0x08005f61
 8005f04:	08005f3d 	.word	0x08005f3d
 8005f08:	08005f61 	.word	0x08005f61
 8005f0c:	08005f61 	.word	0x08005f61
 8005f10:	08005f61 	.word	0x08005f61
 8005f14:	08005f4f 	.word	0x08005f4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0202 	orr.w	r2, r2, #2
 8005f26:	60da      	str	r2, [r3, #12]
      break;
 8005f28:	e01d      	b.n	8005f66 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0204 	orr.w	r2, r2, #4
 8005f38:	60da      	str	r2, [r3, #12]
      break;
 8005f3a:	e014      	b.n	8005f66 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0208 	orr.w	r2, r2, #8
 8005f4a:	60da      	str	r2, [r3, #12]
      break;
 8005f4c:	e00b      	b.n	8005f66 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f042 0210 	orr.w	r2, r2, #16
 8005f5c:	60da      	str	r2, [r3, #12]
      break;
 8005f5e:	e002      	b.n	8005f66 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73fb      	strb	r3, [r7, #15]
      break;
 8005f64:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d13e      	bne.n	8005fea <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2201      	movs	r2, #1
 8005f72:	6839      	ldr	r1, [r7, #0]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 ffb2 	bl	8006ede <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1d      	ldr	r2, [pc, #116]	; (8005ff4 <HAL_TIM_IC_Start_IT+0x220>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d018      	beq.n	8005fb6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1b      	ldr	r2, [pc, #108]	; (8005ff8 <HAL_TIM_IC_Start_IT+0x224>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f96:	d00e      	beq.n	8005fb6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a17      	ldr	r2, [pc, #92]	; (8005ffc <HAL_TIM_IC_Start_IT+0x228>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d009      	beq.n	8005fb6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a16      	ldr	r2, [pc, #88]	; (8006000 <HAL_TIM_IC_Start_IT+0x22c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d004      	beq.n	8005fb6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a14      	ldr	r2, [pc, #80]	; (8006004 <HAL_TIM_IC_Start_IT+0x230>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d111      	bne.n	8005fda <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b06      	cmp	r3, #6
 8005fc6:	d010      	beq.n	8005fea <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0201 	orr.w	r2, r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd8:	e007      	b.n	8005fea <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0201 	orr.w	r2, r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	40012c00 	.word	0x40012c00
 8005ff8:	40013400 	.word	0x40013400
 8005ffc:	40000400 	.word	0x40000400
 8006000:	40000800 	.word	0x40000800
 8006004:	40000c00 	.word	0x40000c00

08006008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b02      	cmp	r3, #2
 800601c:	d122      	bne.n	8006064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b02      	cmp	r3, #2
 800602a:	d11b      	bne.n	8006064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0202 	mvn.w	r2, #2
 8006034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	f003 0303 	and.w	r3, r3, #3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fc f8ca 	bl	80021e4 <HAL_TIM_IC_CaptureCallback>
 8006050:	e005      	b.n	800605e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fb53 	bl	80066fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fb59 	bl	8006710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b04      	cmp	r3, #4
 8006070:	d122      	bne.n	80060b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b04      	cmp	r3, #4
 800607e:	d11b      	bne.n	80060b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0204 	mvn.w	r2, #4
 8006088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2202      	movs	r2, #2
 800608e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7fc f8a0 	bl	80021e4 <HAL_TIM_IC_CaptureCallback>
 80060a4:	e005      	b.n	80060b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fb29 	bl	80066fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fb2f 	bl	8006710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d122      	bne.n	800610c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d11b      	bne.n	800610c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0208 	mvn.w	r2, #8
 80060dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2204      	movs	r2, #4
 80060e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7fc f876 	bl	80021e4 <HAL_TIM_IC_CaptureCallback>
 80060f8:	e005      	b.n	8006106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 faff 	bl	80066fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fb05 	bl	8006710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f003 0310 	and.w	r3, r3, #16
 8006116:	2b10      	cmp	r3, #16
 8006118:	d122      	bne.n	8006160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b10      	cmp	r3, #16
 8006126:	d11b      	bne.n	8006160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0210 	mvn.w	r2, #16
 8006130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2208      	movs	r2, #8
 8006136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7fc f84c 	bl	80021e4 <HAL_TIM_IC_CaptureCallback>
 800614c:	e005      	b.n	800615a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fad5 	bl	80066fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fadb 	bl	8006710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b01      	cmp	r3, #1
 800616c:	d10e      	bne.n	800618c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b01      	cmp	r3, #1
 800617a:	d107      	bne.n	800618c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0201 	mvn.w	r2, #1
 8006184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fab0 	bl	80066ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006196:	2b80      	cmp	r3, #128	; 0x80
 8006198:	d10e      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a4:	2b80      	cmp	r3, #128	; 0x80
 80061a6:	d107      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 ff2d 	bl	8007012 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	d10e      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b40      	cmp	r3, #64	; 0x40
 80061d2:	d107      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fa9f 	bl	8006722 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	d10e      	bne.n	8006210 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	d107      	bne.n	8006210 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0220 	mvn.w	r2, #32
 8006208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fef8 	bl	8007000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006232:	2302      	movs	r3, #2
 8006234:	e088      	b.n	8006348 <HAL_TIM_IC_ConfigChannel+0x130>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11b      	bne.n	800627c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	6819      	ldr	r1, [r3, #0]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f000 fc94 	bl	8006b80 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 020c 	bic.w	r2, r2, #12
 8006266:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6999      	ldr	r1, [r3, #24]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	619a      	str	r2, [r3, #24]
 800627a:	e060      	b.n	800633e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b04      	cmp	r3, #4
 8006280:	d11c      	bne.n	80062bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	6819      	ldr	r1, [r3, #0]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f000 fd09 	bl	8006ca8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	699a      	ldr	r2, [r3, #24]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80062a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6999      	ldr	r1, [r3, #24]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	021a      	lsls	r2, r3, #8
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	619a      	str	r2, [r3, #24]
 80062ba:	e040      	b.n	800633e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d11b      	bne.n	80062fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	6819      	ldr	r1, [r3, #0]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f000 fd54 	bl	8006d7e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69da      	ldr	r2, [r3, #28]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 020c 	bic.w	r2, r2, #12
 80062e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69d9      	ldr	r1, [r3, #28]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	689a      	ldr	r2, [r3, #8]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	61da      	str	r2, [r3, #28]
 80062f8:	e021      	b.n	800633e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b0c      	cmp	r3, #12
 80062fe:	d11c      	bne.n	800633a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	6819      	ldr	r1, [r3, #0]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f000 fd70 	bl	8006df4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	69da      	ldr	r2, [r3, #28]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006322:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69d9      	ldr	r1, [r3, #28]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	021a      	lsls	r2, r3, #8
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	61da      	str	r2, [r3, #28]
 8006338:	e001      	b.n	800633e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006346:	7dfb      	ldrb	r3, [r7, #23]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800636a:	2302      	movs	r3, #2
 800636c:	e0ae      	b.n	80064cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b0c      	cmp	r3, #12
 800637a:	f200 809f 	bhi.w	80064bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800637e:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006384:	080063b9 	.word	0x080063b9
 8006388:	080064bd 	.word	0x080064bd
 800638c:	080064bd 	.word	0x080064bd
 8006390:	080064bd 	.word	0x080064bd
 8006394:	080063f9 	.word	0x080063f9
 8006398:	080064bd 	.word	0x080064bd
 800639c:	080064bd 	.word	0x080064bd
 80063a0:	080064bd 	.word	0x080064bd
 80063a4:	0800643b 	.word	0x0800643b
 80063a8:	080064bd 	.word	0x080064bd
 80063ac:	080064bd 	.word	0x080064bd
 80063b0:	080064bd 	.word	0x080064bd
 80063b4:	0800647b 	.word	0x0800647b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fa32 	bl	8006828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0208 	orr.w	r2, r2, #8
 80063d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0204 	bic.w	r2, r2, #4
 80063e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6999      	ldr	r1, [r3, #24]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	619a      	str	r2, [r3, #24]
      break;
 80063f6:	e064      	b.n	80064c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fa82 	bl	8006908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699a      	ldr	r2, [r3, #24]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6999      	ldr	r1, [r3, #24]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	021a      	lsls	r2, r3, #8
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	619a      	str	r2, [r3, #24]
      break;
 8006438:	e043      	b.n	80064c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fad5 	bl	80069f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69da      	ldr	r2, [r3, #28]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f042 0208 	orr.w	r2, r2, #8
 8006454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0204 	bic.w	r2, r2, #4
 8006464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69d9      	ldr	r1, [r3, #28]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	691a      	ldr	r2, [r3, #16]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	61da      	str	r2, [r3, #28]
      break;
 8006478:	e023      	b.n	80064c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68b9      	ldr	r1, [r7, #8]
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fb29 	bl	8006ad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69da      	ldr	r2, [r3, #28]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69da      	ldr	r2, [r3, #28]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69d9      	ldr	r1, [r3, #28]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	021a      	lsls	r2, r3, #8
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	61da      	str	r2, [r3, #28]
      break;
 80064ba:	e002      	b.n	80064c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	75fb      	strb	r3, [r7, #23]
      break;
 80064c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d101      	bne.n	80064f0 <HAL_TIM_ConfigClockSource+0x1c>
 80064ec:	2302      	movs	r3, #2
 80064ee:	e0b4      	b.n	800665a <HAL_TIM_ConfigClockSource+0x186>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800650e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006516:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006528:	d03e      	beq.n	80065a8 <HAL_TIM_ConfigClockSource+0xd4>
 800652a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800652e:	f200 8087 	bhi.w	8006640 <HAL_TIM_ConfigClockSource+0x16c>
 8006532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006536:	f000 8086 	beq.w	8006646 <HAL_TIM_ConfigClockSource+0x172>
 800653a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800653e:	d87f      	bhi.n	8006640 <HAL_TIM_ConfigClockSource+0x16c>
 8006540:	2b70      	cmp	r3, #112	; 0x70
 8006542:	d01a      	beq.n	800657a <HAL_TIM_ConfigClockSource+0xa6>
 8006544:	2b70      	cmp	r3, #112	; 0x70
 8006546:	d87b      	bhi.n	8006640 <HAL_TIM_ConfigClockSource+0x16c>
 8006548:	2b60      	cmp	r3, #96	; 0x60
 800654a:	d050      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x11a>
 800654c:	2b60      	cmp	r3, #96	; 0x60
 800654e:	d877      	bhi.n	8006640 <HAL_TIM_ConfigClockSource+0x16c>
 8006550:	2b50      	cmp	r3, #80	; 0x50
 8006552:	d03c      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0xfa>
 8006554:	2b50      	cmp	r3, #80	; 0x50
 8006556:	d873      	bhi.n	8006640 <HAL_TIM_ConfigClockSource+0x16c>
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	d058      	beq.n	800660e <HAL_TIM_ConfigClockSource+0x13a>
 800655c:	2b40      	cmp	r3, #64	; 0x40
 800655e:	d86f      	bhi.n	8006640 <HAL_TIM_ConfigClockSource+0x16c>
 8006560:	2b30      	cmp	r3, #48	; 0x30
 8006562:	d064      	beq.n	800662e <HAL_TIM_ConfigClockSource+0x15a>
 8006564:	2b30      	cmp	r3, #48	; 0x30
 8006566:	d86b      	bhi.n	8006640 <HAL_TIM_ConfigClockSource+0x16c>
 8006568:	2b20      	cmp	r3, #32
 800656a:	d060      	beq.n	800662e <HAL_TIM_ConfigClockSource+0x15a>
 800656c:	2b20      	cmp	r3, #32
 800656e:	d867      	bhi.n	8006640 <HAL_TIM_ConfigClockSource+0x16c>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d05c      	beq.n	800662e <HAL_TIM_ConfigClockSource+0x15a>
 8006574:	2b10      	cmp	r3, #16
 8006576:	d05a      	beq.n	800662e <HAL_TIM_ConfigClockSource+0x15a>
 8006578:	e062      	b.n	8006640 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	6899      	ldr	r1, [r3, #8]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f000 fc89 	bl	8006ea0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800659c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	609a      	str	r2, [r3, #8]
      break;
 80065a6:	e04f      	b.n	8006648 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6818      	ldr	r0, [r3, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	6899      	ldr	r1, [r3, #8]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f000 fc72 	bl	8006ea0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065ca:	609a      	str	r2, [r3, #8]
      break;
 80065cc:	e03c      	b.n	8006648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	6859      	ldr	r1, [r3, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	461a      	mov	r2, r3
 80065dc:	f000 fb36 	bl	8006c4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2150      	movs	r1, #80	; 0x50
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fc40 	bl	8006e6c <TIM_ITRx_SetConfig>
      break;
 80065ec:	e02c      	b.n	8006648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	6859      	ldr	r1, [r3, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	461a      	mov	r2, r3
 80065fc:	f000 fb90 	bl	8006d20 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2160      	movs	r1, #96	; 0x60
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fc30 	bl	8006e6c <TIM_ITRx_SetConfig>
      break;
 800660c:	e01c      	b.n	8006648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	6859      	ldr	r1, [r3, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	461a      	mov	r2, r3
 800661c:	f000 fb16 	bl	8006c4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2140      	movs	r1, #64	; 0x40
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fc20 	bl	8006e6c <TIM_ITRx_SetConfig>
      break;
 800662c:	e00c      	b.n	8006648 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f000 fc17 	bl	8006e6c <TIM_ITRx_SetConfig>
      break;
 800663e:	e003      	b.n	8006648 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	73fb      	strb	r3, [r7, #15]
      break;
 8006644:	e000      	b.n	8006648 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b0c      	cmp	r3, #12
 8006676:	d831      	bhi.n	80066dc <HAL_TIM_ReadCapturedValue+0x78>
 8006678:	a201      	add	r2, pc, #4	; (adr r2, 8006680 <HAL_TIM_ReadCapturedValue+0x1c>)
 800667a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667e:	bf00      	nop
 8006680:	080066b5 	.word	0x080066b5
 8006684:	080066dd 	.word	0x080066dd
 8006688:	080066dd 	.word	0x080066dd
 800668c:	080066dd 	.word	0x080066dd
 8006690:	080066bf 	.word	0x080066bf
 8006694:	080066dd 	.word	0x080066dd
 8006698:	080066dd 	.word	0x080066dd
 800669c:	080066dd 	.word	0x080066dd
 80066a0:	080066c9 	.word	0x080066c9
 80066a4:	080066dd 	.word	0x080066dd
 80066a8:	080066dd 	.word	0x080066dd
 80066ac:	080066dd 	.word	0x080066dd
 80066b0:	080066d3 	.word	0x080066d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ba:	60fb      	str	r3, [r7, #12]

      break;
 80066bc:	e00f      	b.n	80066de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c4:	60fb      	str	r3, [r7, #12]

      break;
 80066c6:	e00a      	b.n	80066de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ce:	60fb      	str	r3, [r7, #12]

      break;
 80066d0:	e005      	b.n	80066de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	60fb      	str	r3, [r7, #12]

      break;
 80066da:	e000      	b.n	80066de <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80066dc:	bf00      	nop
  }

  return tmpreg;
 80066de:	68fb      	ldr	r3, [r7, #12]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bc80      	pop	{r7}
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop

080066ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bc80      	pop	{r7}
 80066fc:	4770      	bx	lr

080066fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr

08006710 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	bc80      	pop	{r7}
 8006720:	4770      	bx	lr

08006722 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	bc80      	pop	{r7}
 8006732:	4770      	bx	lr

08006734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a33      	ldr	r2, [pc, #204]	; (8006814 <TIM_Base_SetConfig+0xe0>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d013      	beq.n	8006774 <TIM_Base_SetConfig+0x40>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a32      	ldr	r2, [pc, #200]	; (8006818 <TIM_Base_SetConfig+0xe4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00f      	beq.n	8006774 <TIM_Base_SetConfig+0x40>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800675a:	d00b      	beq.n	8006774 <TIM_Base_SetConfig+0x40>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a2f      	ldr	r2, [pc, #188]	; (800681c <TIM_Base_SetConfig+0xe8>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d007      	beq.n	8006774 <TIM_Base_SetConfig+0x40>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a2e      	ldr	r2, [pc, #184]	; (8006820 <TIM_Base_SetConfig+0xec>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <TIM_Base_SetConfig+0x40>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a2d      	ldr	r2, [pc, #180]	; (8006824 <TIM_Base_SetConfig+0xf0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d108      	bne.n	8006786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a22      	ldr	r2, [pc, #136]	; (8006814 <TIM_Base_SetConfig+0xe0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d013      	beq.n	80067b6 <TIM_Base_SetConfig+0x82>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a21      	ldr	r2, [pc, #132]	; (8006818 <TIM_Base_SetConfig+0xe4>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00f      	beq.n	80067b6 <TIM_Base_SetConfig+0x82>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679c:	d00b      	beq.n	80067b6 <TIM_Base_SetConfig+0x82>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a1e      	ldr	r2, [pc, #120]	; (800681c <TIM_Base_SetConfig+0xe8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d007      	beq.n	80067b6 <TIM_Base_SetConfig+0x82>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a1d      	ldr	r2, [pc, #116]	; (8006820 <TIM_Base_SetConfig+0xec>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d003      	beq.n	80067b6 <TIM_Base_SetConfig+0x82>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a1c      	ldr	r2, [pc, #112]	; (8006824 <TIM_Base_SetConfig+0xf0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d108      	bne.n	80067c8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a09      	ldr	r2, [pc, #36]	; (8006814 <TIM_Base_SetConfig+0xe0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d003      	beq.n	80067fc <TIM_Base_SetConfig+0xc8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a08      	ldr	r2, [pc, #32]	; (8006818 <TIM_Base_SetConfig+0xe4>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d103      	bne.n	8006804 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	691a      	ldr	r2, [r3, #16]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	615a      	str	r2, [r3, #20]
}
 800680a:	bf00      	nop
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr
 8006814:	40012c00 	.word	0x40012c00
 8006818:	40013400 	.word	0x40013400
 800681c:	40000400 	.word	0x40000400
 8006820:	40000800 	.word	0x40000800
 8006824:	40000c00 	.word	0x40000c00

08006828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	f023 0201 	bic.w	r2, r3, #1
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0303 	bic.w	r3, r3, #3
 800685e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f023 0302 	bic.w	r3, r3, #2
 8006870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a20      	ldr	r2, [pc, #128]	; (8006900 <TIM_OC1_SetConfig+0xd8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d003      	beq.n	800688c <TIM_OC1_SetConfig+0x64>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a1f      	ldr	r2, [pc, #124]	; (8006904 <TIM_OC1_SetConfig+0xdc>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d10c      	bne.n	80068a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f023 0308 	bic.w	r3, r3, #8
 8006892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f023 0304 	bic.w	r3, r3, #4
 80068a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a15      	ldr	r2, [pc, #84]	; (8006900 <TIM_OC1_SetConfig+0xd8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d003      	beq.n	80068b6 <TIM_OC1_SetConfig+0x8e>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a14      	ldr	r2, [pc, #80]	; (8006904 <TIM_OC1_SetConfig+0xdc>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d111      	bne.n	80068da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	621a      	str	r2, [r3, #32]
}
 80068f4:	bf00      	nop
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc80      	pop	{r7}
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40012c00 	.word	0x40012c00
 8006904:	40013400 	.word	0x40013400

08006908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	f023 0210 	bic.w	r2, r3, #16
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800693e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f023 0320 	bic.w	r3, r3, #32
 8006952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a21      	ldr	r2, [pc, #132]	; (80069e8 <TIM_OC2_SetConfig+0xe0>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d003      	beq.n	8006970 <TIM_OC2_SetConfig+0x68>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a20      	ldr	r2, [pc, #128]	; (80069ec <TIM_OC2_SetConfig+0xe4>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d10d      	bne.n	800698c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a16      	ldr	r2, [pc, #88]	; (80069e8 <TIM_OC2_SetConfig+0xe0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d003      	beq.n	800699c <TIM_OC2_SetConfig+0x94>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a15      	ldr	r2, [pc, #84]	; (80069ec <TIM_OC2_SetConfig+0xe4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d113      	bne.n	80069c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	bf00      	nop
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40013400 	.word	0x40013400

080069f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f023 0303 	bic.w	r3, r3, #3
 8006a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	021b      	lsls	r3, r3, #8
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a21      	ldr	r2, [pc, #132]	; (8006ad0 <TIM_OC3_SetConfig+0xe0>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d003      	beq.n	8006a56 <TIM_OC3_SetConfig+0x66>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a20      	ldr	r2, [pc, #128]	; (8006ad4 <TIM_OC3_SetConfig+0xe4>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d10d      	bne.n	8006a72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	021b      	lsls	r3, r3, #8
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a16      	ldr	r2, [pc, #88]	; (8006ad0 <TIM_OC3_SetConfig+0xe0>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d003      	beq.n	8006a82 <TIM_OC3_SetConfig+0x92>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a15      	ldr	r2, [pc, #84]	; (8006ad4 <TIM_OC3_SetConfig+0xe4>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d113      	bne.n	8006aaa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	011b      	lsls	r3, r3, #4
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	621a      	str	r2, [r3, #32]
}
 8006ac4:	bf00      	nop
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bc80      	pop	{r7}
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40012c00 	.word	0x40012c00
 8006ad4:	40013400 	.word	0x40013400

08006ad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	021b      	lsls	r3, r3, #8
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	031b      	lsls	r3, r3, #12
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a11      	ldr	r2, [pc, #68]	; (8006b78 <TIM_OC4_SetConfig+0xa0>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d003      	beq.n	8006b40 <TIM_OC4_SetConfig+0x68>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a10      	ldr	r2, [pc, #64]	; (8006b7c <TIM_OC4_SetConfig+0xa4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d109      	bne.n	8006b54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	019b      	lsls	r3, r3, #6
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bc80      	pop	{r7}
 8006b76:	4770      	bx	lr
 8006b78:	40012c00 	.word	0x40012c00
 8006b7c:	40013400 	.word	0x40013400

08006b80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	f023 0201 	bic.w	r2, r3, #1
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4a23      	ldr	r2, [pc, #140]	; (8006c38 <TIM_TI1_SetConfig+0xb8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d013      	beq.n	8006bd6 <TIM_TI1_SetConfig+0x56>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4a22      	ldr	r2, [pc, #136]	; (8006c3c <TIM_TI1_SetConfig+0xbc>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00f      	beq.n	8006bd6 <TIM_TI1_SetConfig+0x56>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bbc:	d00b      	beq.n	8006bd6 <TIM_TI1_SetConfig+0x56>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4a1f      	ldr	r2, [pc, #124]	; (8006c40 <TIM_TI1_SetConfig+0xc0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d007      	beq.n	8006bd6 <TIM_TI1_SetConfig+0x56>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4a1e      	ldr	r2, [pc, #120]	; (8006c44 <TIM_TI1_SetConfig+0xc4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d003      	beq.n	8006bd6 <TIM_TI1_SetConfig+0x56>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4a1d      	ldr	r2, [pc, #116]	; (8006c48 <TIM_TI1_SetConfig+0xc8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d101      	bne.n	8006bda <TIM_TI1_SetConfig+0x5a>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e000      	b.n	8006bdc <TIM_TI1_SetConfig+0x5c>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d008      	beq.n	8006bf2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f023 0303 	bic.w	r3, r3, #3
 8006be6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	e003      	b.n	8006bfa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f043 0301 	orr.w	r3, r3, #1
 8006bf8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	011b      	lsls	r3, r3, #4
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f023 030a 	bic.w	r3, r3, #10
 8006c14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f003 030a 	and.w	r3, r3, #10
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	621a      	str	r2, [r3, #32]
}
 8006c2e:	bf00      	nop
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr
 8006c38:	40012c00 	.word	0x40012c00
 8006c3c:	40013400 	.word	0x40013400
 8006c40:	40000400 	.word	0x40000400
 8006c44:	40000800 	.word	0x40000800
 8006c48:	40000c00 	.word	0x40000c00

08006c4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f023 0201 	bic.w	r2, r3, #1
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	011b      	lsls	r3, r3, #4
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f023 030a 	bic.w	r3, r3, #10
 8006c88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	621a      	str	r2, [r3, #32]
}
 8006c9e:	bf00      	nop
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bc80      	pop	{r7}
 8006ca6:	4770      	bx	lr

08006ca8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	f023 0210 	bic.w	r2, r3, #16
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	021b      	lsls	r3, r3, #8
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	031b      	lsls	r3, r3, #12
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	621a      	str	r2, [r3, #32]
}
 8006d16:	bf00      	nop
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bc80      	pop	{r7}
 8006d1e:	4770      	bx	lr

08006d20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	f023 0210 	bic.w	r2, r3, #16
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	031b      	lsls	r3, r3, #12
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	621a      	str	r2, [r3, #32]
}
 8006d74:	bf00      	nop
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bc80      	pop	{r7}
 8006d7c:	4770      	bx	lr

08006d7e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b087      	sub	sp, #28
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
 8006d8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f023 0303 	bic.w	r3, r3, #3
 8006daa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	011b      	lsls	r3, r3, #4
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	021b      	lsls	r3, r3, #8
 8006dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	621a      	str	r2, [r3, #32]
}
 8006dea:	bf00      	nop
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bc80      	pop	{r7}
 8006df2:	4770      	bx	lr

08006df4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e32:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	031b      	lsls	r3, r3, #12
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e46:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	031b      	lsls	r3, r3, #12
 8006e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	621a      	str	r2, [r3, #32]
}
 8006e62:	bf00      	nop
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bc80      	pop	{r7}
 8006e6a:	4770      	bx	lr

08006e6c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	f043 0307 	orr.w	r3, r3, #7
 8006e8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	609a      	str	r2, [r3, #8]
}
 8006e96:	bf00      	nop
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bc80      	pop	{r7}
 8006e9e:	4770      	bx	lr

08006ea0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
 8006eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	021a      	lsls	r2, r3, #8
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	609a      	str	r2, [r3, #8]
}
 8006ed4:	bf00      	nop
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr

08006ede <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b087      	sub	sp, #28
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	60b9      	str	r1, [r7, #8]
 8006ee8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a1a      	ldr	r2, [r3, #32]
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	43db      	mvns	r3, r3
 8006f00:	401a      	ands	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6a1a      	ldr	r2, [r3, #32]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f003 031f 	and.w	r3, r3, #31
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	fa01 f303 	lsl.w	r3, r1, r3
 8006f16:	431a      	orrs	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	621a      	str	r2, [r3, #32]
}
 8006f1c:	bf00      	nop
 8006f1e:	371c      	adds	r7, #28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bc80      	pop	{r7}
 8006f24:	4770      	bx	lr
	...

08006f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d101      	bne.n	8006f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e050      	b.n	8006fe2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1b      	ldr	r2, [pc, #108]	; (8006fec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d018      	beq.n	8006fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a19      	ldr	r2, [pc, #100]	; (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d013      	beq.n	8006fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f96:	d00e      	beq.n	8006fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a15      	ldr	r2, [pc, #84]	; (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d009      	beq.n	8006fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a14      	ldr	r2, [pc, #80]	; (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d004      	beq.n	8006fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a12      	ldr	r2, [pc, #72]	; (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d10c      	bne.n	8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr
 8006fec:	40012c00 	.word	0x40012c00
 8006ff0:	40013400 	.word	0x40013400
 8006ff4:	40000400 	.word	0x40000400
 8006ff8:	40000800 	.word	0x40000800
 8006ffc:	40000c00 	.word	0x40000c00

08007000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	bc80      	pop	{r7}
 8007010:	4770      	bx	lr

08007012 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	6812      	ldr	r2, [r2, #0]
 800703c:	f023 0101 	bic.w	r1, r3, #1
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2b08      	cmp	r3, #8
 800704c:	d102      	bne.n	8007054 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800704e:	2340      	movs	r3, #64	; 0x40
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	e001      	b.n	8007058 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007054:	2300      	movs	r3, #0
 8007056:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007064:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800706a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007070:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007076:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800707c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007082:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8007088:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800708e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8007094:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80070b2:	4b10      	ldr	r3, [pc, #64]	; (80070f4 <FSMC_NORSRAM_Init+0xd0>)
 80070b4:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070bc:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80070c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	43db      	mvns	r3, r3
 80070d4:	ea02 0103 	and.w	r1, r2, r3
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	4319      	orrs	r1, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	371c      	adds	r7, #28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bc80      	pop	{r7}
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	0008fb7f 	.word	0x0008fb7f

080070f8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	431a      	orrs	r2, r3
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	431a      	orrs	r2, r3
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	041b      	lsls	r3, r3, #16
 800712c:	431a      	orrs	r2, r3
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	3b01      	subs	r3, #1
 8007134:	051b      	lsls	r3, r3, #20
 8007136:	431a      	orrs	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	3b02      	subs	r3, #2
 800713e:	061b      	lsls	r3, r3, #24
 8007140:	431a      	orrs	r2, r3
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	4313      	orrs	r3, r2
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	3201      	adds	r2, #1
 800714c:	4319      	orrs	r1, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	bc80      	pop	{r7}
 800715e:	4770      	bx	lr

08007160 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007174:	d11d      	bne.n	80071b2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800717e:	4b13      	ldr	r3, [pc, #76]	; (80071cc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007180:	4013      	ands	r3, r2
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	6811      	ldr	r1, [r2, #0]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	6852      	ldr	r2, [r2, #4]
 800718a:	0112      	lsls	r2, r2, #4
 800718c:	4311      	orrs	r1, r2
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	6892      	ldr	r2, [r2, #8]
 8007192:	0212      	lsls	r2, r2, #8
 8007194:	4311      	orrs	r1, r2
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	6992      	ldr	r2, [r2, #24]
 800719a:	4311      	orrs	r1, r2
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	68d2      	ldr	r2, [r2, #12]
 80071a0:	0412      	lsls	r2, r2, #16
 80071a2:	430a      	orrs	r2, r1
 80071a4:	ea43 0102 	orr.w	r1, r3, r2
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80071b0:	e005      	b.n	80071be <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80071ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bc80      	pop	{r7}
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	cff00000 	.word	0xcff00000

080071d0 <__errno>:
 80071d0:	4b01      	ldr	r3, [pc, #4]	; (80071d8 <__errno+0x8>)
 80071d2:	6818      	ldr	r0, [r3, #0]
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	200000d4 	.word	0x200000d4

080071dc <__libc_init_array>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	2600      	movs	r6, #0
 80071e0:	4d0c      	ldr	r5, [pc, #48]	; (8007214 <__libc_init_array+0x38>)
 80071e2:	4c0d      	ldr	r4, [pc, #52]	; (8007218 <__libc_init_array+0x3c>)
 80071e4:	1b64      	subs	r4, r4, r5
 80071e6:	10a4      	asrs	r4, r4, #2
 80071e8:	42a6      	cmp	r6, r4
 80071ea:	d109      	bne.n	8007200 <__libc_init_array+0x24>
 80071ec:	f000 ffb6 	bl	800815c <_init>
 80071f0:	2600      	movs	r6, #0
 80071f2:	4d0a      	ldr	r5, [pc, #40]	; (800721c <__libc_init_array+0x40>)
 80071f4:	4c0a      	ldr	r4, [pc, #40]	; (8007220 <__libc_init_array+0x44>)
 80071f6:	1b64      	subs	r4, r4, r5
 80071f8:	10a4      	asrs	r4, r4, #2
 80071fa:	42a6      	cmp	r6, r4
 80071fc:	d105      	bne.n	800720a <__libc_init_array+0x2e>
 80071fe:	bd70      	pop	{r4, r5, r6, pc}
 8007200:	f855 3b04 	ldr.w	r3, [r5], #4
 8007204:	4798      	blx	r3
 8007206:	3601      	adds	r6, #1
 8007208:	e7ee      	b.n	80071e8 <__libc_init_array+0xc>
 800720a:	f855 3b04 	ldr.w	r3, [r5], #4
 800720e:	4798      	blx	r3
 8007210:	3601      	adds	r6, #1
 8007212:	e7f2      	b.n	80071fa <__libc_init_array+0x1e>
 8007214:	08008a6c 	.word	0x08008a6c
 8007218:	08008a6c 	.word	0x08008a6c
 800721c:	08008a6c 	.word	0x08008a6c
 8007220:	08008a70 	.word	0x08008a70

08007224 <memset>:
 8007224:	4603      	mov	r3, r0
 8007226:	4402      	add	r2, r0
 8007228:	4293      	cmp	r3, r2
 800722a:	d100      	bne.n	800722e <memset+0xa>
 800722c:	4770      	bx	lr
 800722e:	f803 1b01 	strb.w	r1, [r3], #1
 8007232:	e7f9      	b.n	8007228 <memset+0x4>

08007234 <iprintf>:
 8007234:	b40f      	push	{r0, r1, r2, r3}
 8007236:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <iprintf+0x2c>)
 8007238:	b513      	push	{r0, r1, r4, lr}
 800723a:	681c      	ldr	r4, [r3, #0]
 800723c:	b124      	cbz	r4, 8007248 <iprintf+0x14>
 800723e:	69a3      	ldr	r3, [r4, #24]
 8007240:	b913      	cbnz	r3, 8007248 <iprintf+0x14>
 8007242:	4620      	mov	r0, r4
 8007244:	f000 f866 	bl	8007314 <__sinit>
 8007248:	ab05      	add	r3, sp, #20
 800724a:	4620      	mov	r0, r4
 800724c:	9a04      	ldr	r2, [sp, #16]
 800724e:	68a1      	ldr	r1, [r4, #8]
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	f000 f9bb 	bl	80075cc <_vfiprintf_r>
 8007256:	b002      	add	sp, #8
 8007258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800725c:	b004      	add	sp, #16
 800725e:	4770      	bx	lr
 8007260:	200000d4 	.word	0x200000d4

08007264 <std>:
 8007264:	2300      	movs	r3, #0
 8007266:	b510      	push	{r4, lr}
 8007268:	4604      	mov	r4, r0
 800726a:	e9c0 3300 	strd	r3, r3, [r0]
 800726e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007272:	6083      	str	r3, [r0, #8]
 8007274:	8181      	strh	r1, [r0, #12]
 8007276:	6643      	str	r3, [r0, #100]	; 0x64
 8007278:	81c2      	strh	r2, [r0, #14]
 800727a:	6183      	str	r3, [r0, #24]
 800727c:	4619      	mov	r1, r3
 800727e:	2208      	movs	r2, #8
 8007280:	305c      	adds	r0, #92	; 0x5c
 8007282:	f7ff ffcf 	bl	8007224 <memset>
 8007286:	4b05      	ldr	r3, [pc, #20]	; (800729c <std+0x38>)
 8007288:	6224      	str	r4, [r4, #32]
 800728a:	6263      	str	r3, [r4, #36]	; 0x24
 800728c:	4b04      	ldr	r3, [pc, #16]	; (80072a0 <std+0x3c>)
 800728e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007290:	4b04      	ldr	r3, [pc, #16]	; (80072a4 <std+0x40>)
 8007292:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007294:	4b04      	ldr	r3, [pc, #16]	; (80072a8 <std+0x44>)
 8007296:	6323      	str	r3, [r4, #48]	; 0x30
 8007298:	bd10      	pop	{r4, pc}
 800729a:	bf00      	nop
 800729c:	08007b79 	.word	0x08007b79
 80072a0:	08007b9b 	.word	0x08007b9b
 80072a4:	08007bd3 	.word	0x08007bd3
 80072a8:	08007bf7 	.word	0x08007bf7

080072ac <_cleanup_r>:
 80072ac:	4901      	ldr	r1, [pc, #4]	; (80072b4 <_cleanup_r+0x8>)
 80072ae:	f000 b8af 	b.w	8007410 <_fwalk_reent>
 80072b2:	bf00      	nop
 80072b4:	08007ec9 	.word	0x08007ec9

080072b8 <__sfmoreglue>:
 80072b8:	2268      	movs	r2, #104	; 0x68
 80072ba:	b570      	push	{r4, r5, r6, lr}
 80072bc:	1e4d      	subs	r5, r1, #1
 80072be:	4355      	muls	r5, r2
 80072c0:	460e      	mov	r6, r1
 80072c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072c6:	f000 f8e5 	bl	8007494 <_malloc_r>
 80072ca:	4604      	mov	r4, r0
 80072cc:	b140      	cbz	r0, 80072e0 <__sfmoreglue+0x28>
 80072ce:	2100      	movs	r1, #0
 80072d0:	e9c0 1600 	strd	r1, r6, [r0]
 80072d4:	300c      	adds	r0, #12
 80072d6:	60a0      	str	r0, [r4, #8]
 80072d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072dc:	f7ff ffa2 	bl	8007224 <memset>
 80072e0:	4620      	mov	r0, r4
 80072e2:	bd70      	pop	{r4, r5, r6, pc}

080072e4 <__sfp_lock_acquire>:
 80072e4:	4801      	ldr	r0, [pc, #4]	; (80072ec <__sfp_lock_acquire+0x8>)
 80072e6:	f000 b8b3 	b.w	8007450 <__retarget_lock_acquire_recursive>
 80072ea:	bf00      	nop
 80072ec:	20000469 	.word	0x20000469

080072f0 <__sfp_lock_release>:
 80072f0:	4801      	ldr	r0, [pc, #4]	; (80072f8 <__sfp_lock_release+0x8>)
 80072f2:	f000 b8ae 	b.w	8007452 <__retarget_lock_release_recursive>
 80072f6:	bf00      	nop
 80072f8:	20000469 	.word	0x20000469

080072fc <__sinit_lock_acquire>:
 80072fc:	4801      	ldr	r0, [pc, #4]	; (8007304 <__sinit_lock_acquire+0x8>)
 80072fe:	f000 b8a7 	b.w	8007450 <__retarget_lock_acquire_recursive>
 8007302:	bf00      	nop
 8007304:	2000046a 	.word	0x2000046a

08007308 <__sinit_lock_release>:
 8007308:	4801      	ldr	r0, [pc, #4]	; (8007310 <__sinit_lock_release+0x8>)
 800730a:	f000 b8a2 	b.w	8007452 <__retarget_lock_release_recursive>
 800730e:	bf00      	nop
 8007310:	2000046a 	.word	0x2000046a

08007314 <__sinit>:
 8007314:	b510      	push	{r4, lr}
 8007316:	4604      	mov	r4, r0
 8007318:	f7ff fff0 	bl	80072fc <__sinit_lock_acquire>
 800731c:	69a3      	ldr	r3, [r4, #24]
 800731e:	b11b      	cbz	r3, 8007328 <__sinit+0x14>
 8007320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007324:	f7ff bff0 	b.w	8007308 <__sinit_lock_release>
 8007328:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800732c:	6523      	str	r3, [r4, #80]	; 0x50
 800732e:	4b13      	ldr	r3, [pc, #76]	; (800737c <__sinit+0x68>)
 8007330:	4a13      	ldr	r2, [pc, #76]	; (8007380 <__sinit+0x6c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	62a2      	str	r2, [r4, #40]	; 0x28
 8007336:	42a3      	cmp	r3, r4
 8007338:	bf08      	it	eq
 800733a:	2301      	moveq	r3, #1
 800733c:	4620      	mov	r0, r4
 800733e:	bf08      	it	eq
 8007340:	61a3      	streq	r3, [r4, #24]
 8007342:	f000 f81f 	bl	8007384 <__sfp>
 8007346:	6060      	str	r0, [r4, #4]
 8007348:	4620      	mov	r0, r4
 800734a:	f000 f81b 	bl	8007384 <__sfp>
 800734e:	60a0      	str	r0, [r4, #8]
 8007350:	4620      	mov	r0, r4
 8007352:	f000 f817 	bl	8007384 <__sfp>
 8007356:	2200      	movs	r2, #0
 8007358:	2104      	movs	r1, #4
 800735a:	60e0      	str	r0, [r4, #12]
 800735c:	6860      	ldr	r0, [r4, #4]
 800735e:	f7ff ff81 	bl	8007264 <std>
 8007362:	2201      	movs	r2, #1
 8007364:	2109      	movs	r1, #9
 8007366:	68a0      	ldr	r0, [r4, #8]
 8007368:	f7ff ff7c 	bl	8007264 <std>
 800736c:	2202      	movs	r2, #2
 800736e:	2112      	movs	r1, #18
 8007370:	68e0      	ldr	r0, [r4, #12]
 8007372:	f7ff ff77 	bl	8007264 <std>
 8007376:	2301      	movs	r3, #1
 8007378:	61a3      	str	r3, [r4, #24]
 800737a:	e7d1      	b.n	8007320 <__sinit+0xc>
 800737c:	080089d4 	.word	0x080089d4
 8007380:	080072ad 	.word	0x080072ad

08007384 <__sfp>:
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	4607      	mov	r7, r0
 8007388:	f7ff ffac 	bl	80072e4 <__sfp_lock_acquire>
 800738c:	4b1e      	ldr	r3, [pc, #120]	; (8007408 <__sfp+0x84>)
 800738e:	681e      	ldr	r6, [r3, #0]
 8007390:	69b3      	ldr	r3, [r6, #24]
 8007392:	b913      	cbnz	r3, 800739a <__sfp+0x16>
 8007394:	4630      	mov	r0, r6
 8007396:	f7ff ffbd 	bl	8007314 <__sinit>
 800739a:	3648      	adds	r6, #72	; 0x48
 800739c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	d503      	bpl.n	80073ac <__sfp+0x28>
 80073a4:	6833      	ldr	r3, [r6, #0]
 80073a6:	b30b      	cbz	r3, 80073ec <__sfp+0x68>
 80073a8:	6836      	ldr	r6, [r6, #0]
 80073aa:	e7f7      	b.n	800739c <__sfp+0x18>
 80073ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073b0:	b9d5      	cbnz	r5, 80073e8 <__sfp+0x64>
 80073b2:	4b16      	ldr	r3, [pc, #88]	; (800740c <__sfp+0x88>)
 80073b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073b8:	60e3      	str	r3, [r4, #12]
 80073ba:	6665      	str	r5, [r4, #100]	; 0x64
 80073bc:	f000 f847 	bl	800744e <__retarget_lock_init_recursive>
 80073c0:	f7ff ff96 	bl	80072f0 <__sfp_lock_release>
 80073c4:	2208      	movs	r2, #8
 80073c6:	4629      	mov	r1, r5
 80073c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073d0:	6025      	str	r5, [r4, #0]
 80073d2:	61a5      	str	r5, [r4, #24]
 80073d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073d8:	f7ff ff24 	bl	8007224 <memset>
 80073dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073e4:	4620      	mov	r0, r4
 80073e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073e8:	3468      	adds	r4, #104	; 0x68
 80073ea:	e7d9      	b.n	80073a0 <__sfp+0x1c>
 80073ec:	2104      	movs	r1, #4
 80073ee:	4638      	mov	r0, r7
 80073f0:	f7ff ff62 	bl	80072b8 <__sfmoreglue>
 80073f4:	4604      	mov	r4, r0
 80073f6:	6030      	str	r0, [r6, #0]
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d1d5      	bne.n	80073a8 <__sfp+0x24>
 80073fc:	f7ff ff78 	bl	80072f0 <__sfp_lock_release>
 8007400:	230c      	movs	r3, #12
 8007402:	603b      	str	r3, [r7, #0]
 8007404:	e7ee      	b.n	80073e4 <__sfp+0x60>
 8007406:	bf00      	nop
 8007408:	080089d4 	.word	0x080089d4
 800740c:	ffff0001 	.word	0xffff0001

08007410 <_fwalk_reent>:
 8007410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007414:	4606      	mov	r6, r0
 8007416:	4688      	mov	r8, r1
 8007418:	2700      	movs	r7, #0
 800741a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800741e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007422:	f1b9 0901 	subs.w	r9, r9, #1
 8007426:	d505      	bpl.n	8007434 <_fwalk_reent+0x24>
 8007428:	6824      	ldr	r4, [r4, #0]
 800742a:	2c00      	cmp	r4, #0
 800742c:	d1f7      	bne.n	800741e <_fwalk_reent+0xe>
 800742e:	4638      	mov	r0, r7
 8007430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007434:	89ab      	ldrh	r3, [r5, #12]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d907      	bls.n	800744a <_fwalk_reent+0x3a>
 800743a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800743e:	3301      	adds	r3, #1
 8007440:	d003      	beq.n	800744a <_fwalk_reent+0x3a>
 8007442:	4629      	mov	r1, r5
 8007444:	4630      	mov	r0, r6
 8007446:	47c0      	blx	r8
 8007448:	4307      	orrs	r7, r0
 800744a:	3568      	adds	r5, #104	; 0x68
 800744c:	e7e9      	b.n	8007422 <_fwalk_reent+0x12>

0800744e <__retarget_lock_init_recursive>:
 800744e:	4770      	bx	lr

08007450 <__retarget_lock_acquire_recursive>:
 8007450:	4770      	bx	lr

08007452 <__retarget_lock_release_recursive>:
 8007452:	4770      	bx	lr

08007454 <sbrk_aligned>:
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	4e0e      	ldr	r6, [pc, #56]	; (8007490 <sbrk_aligned+0x3c>)
 8007458:	460c      	mov	r4, r1
 800745a:	6831      	ldr	r1, [r6, #0]
 800745c:	4605      	mov	r5, r0
 800745e:	b911      	cbnz	r1, 8007466 <sbrk_aligned+0x12>
 8007460:	f000 fb7a 	bl	8007b58 <_sbrk_r>
 8007464:	6030      	str	r0, [r6, #0]
 8007466:	4621      	mov	r1, r4
 8007468:	4628      	mov	r0, r5
 800746a:	f000 fb75 	bl	8007b58 <_sbrk_r>
 800746e:	1c43      	adds	r3, r0, #1
 8007470:	d00a      	beq.n	8007488 <sbrk_aligned+0x34>
 8007472:	1cc4      	adds	r4, r0, #3
 8007474:	f024 0403 	bic.w	r4, r4, #3
 8007478:	42a0      	cmp	r0, r4
 800747a:	d007      	beq.n	800748c <sbrk_aligned+0x38>
 800747c:	1a21      	subs	r1, r4, r0
 800747e:	4628      	mov	r0, r5
 8007480:	f000 fb6a 	bl	8007b58 <_sbrk_r>
 8007484:	3001      	adds	r0, #1
 8007486:	d101      	bne.n	800748c <sbrk_aligned+0x38>
 8007488:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800748c:	4620      	mov	r0, r4
 800748e:	bd70      	pop	{r4, r5, r6, pc}
 8007490:	20000470 	.word	0x20000470

08007494 <_malloc_r>:
 8007494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007498:	1ccd      	adds	r5, r1, #3
 800749a:	f025 0503 	bic.w	r5, r5, #3
 800749e:	3508      	adds	r5, #8
 80074a0:	2d0c      	cmp	r5, #12
 80074a2:	bf38      	it	cc
 80074a4:	250c      	movcc	r5, #12
 80074a6:	2d00      	cmp	r5, #0
 80074a8:	4607      	mov	r7, r0
 80074aa:	db01      	blt.n	80074b0 <_malloc_r+0x1c>
 80074ac:	42a9      	cmp	r1, r5
 80074ae:	d905      	bls.n	80074bc <_malloc_r+0x28>
 80074b0:	230c      	movs	r3, #12
 80074b2:	2600      	movs	r6, #0
 80074b4:	603b      	str	r3, [r7, #0]
 80074b6:	4630      	mov	r0, r6
 80074b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074bc:	4e2e      	ldr	r6, [pc, #184]	; (8007578 <_malloc_r+0xe4>)
 80074be:	f000 fdc5 	bl	800804c <__malloc_lock>
 80074c2:	6833      	ldr	r3, [r6, #0]
 80074c4:	461c      	mov	r4, r3
 80074c6:	bb34      	cbnz	r4, 8007516 <_malloc_r+0x82>
 80074c8:	4629      	mov	r1, r5
 80074ca:	4638      	mov	r0, r7
 80074cc:	f7ff ffc2 	bl	8007454 <sbrk_aligned>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	4604      	mov	r4, r0
 80074d4:	d14d      	bne.n	8007572 <_malloc_r+0xde>
 80074d6:	6834      	ldr	r4, [r6, #0]
 80074d8:	4626      	mov	r6, r4
 80074da:	2e00      	cmp	r6, #0
 80074dc:	d140      	bne.n	8007560 <_malloc_r+0xcc>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	4631      	mov	r1, r6
 80074e2:	4638      	mov	r0, r7
 80074e4:	eb04 0803 	add.w	r8, r4, r3
 80074e8:	f000 fb36 	bl	8007b58 <_sbrk_r>
 80074ec:	4580      	cmp	r8, r0
 80074ee:	d13a      	bne.n	8007566 <_malloc_r+0xd2>
 80074f0:	6821      	ldr	r1, [r4, #0]
 80074f2:	3503      	adds	r5, #3
 80074f4:	1a6d      	subs	r5, r5, r1
 80074f6:	f025 0503 	bic.w	r5, r5, #3
 80074fa:	3508      	adds	r5, #8
 80074fc:	2d0c      	cmp	r5, #12
 80074fe:	bf38      	it	cc
 8007500:	250c      	movcc	r5, #12
 8007502:	4638      	mov	r0, r7
 8007504:	4629      	mov	r1, r5
 8007506:	f7ff ffa5 	bl	8007454 <sbrk_aligned>
 800750a:	3001      	adds	r0, #1
 800750c:	d02b      	beq.n	8007566 <_malloc_r+0xd2>
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	442b      	add	r3, r5
 8007512:	6023      	str	r3, [r4, #0]
 8007514:	e00e      	b.n	8007534 <_malloc_r+0xa0>
 8007516:	6822      	ldr	r2, [r4, #0]
 8007518:	1b52      	subs	r2, r2, r5
 800751a:	d41e      	bmi.n	800755a <_malloc_r+0xc6>
 800751c:	2a0b      	cmp	r2, #11
 800751e:	d916      	bls.n	800754e <_malloc_r+0xba>
 8007520:	1961      	adds	r1, r4, r5
 8007522:	42a3      	cmp	r3, r4
 8007524:	6025      	str	r5, [r4, #0]
 8007526:	bf18      	it	ne
 8007528:	6059      	strne	r1, [r3, #4]
 800752a:	6863      	ldr	r3, [r4, #4]
 800752c:	bf08      	it	eq
 800752e:	6031      	streq	r1, [r6, #0]
 8007530:	5162      	str	r2, [r4, r5]
 8007532:	604b      	str	r3, [r1, #4]
 8007534:	4638      	mov	r0, r7
 8007536:	f104 060b 	add.w	r6, r4, #11
 800753a:	f000 fd8d 	bl	8008058 <__malloc_unlock>
 800753e:	f026 0607 	bic.w	r6, r6, #7
 8007542:	1d23      	adds	r3, r4, #4
 8007544:	1af2      	subs	r2, r6, r3
 8007546:	d0b6      	beq.n	80074b6 <_malloc_r+0x22>
 8007548:	1b9b      	subs	r3, r3, r6
 800754a:	50a3      	str	r3, [r4, r2]
 800754c:	e7b3      	b.n	80074b6 <_malloc_r+0x22>
 800754e:	6862      	ldr	r2, [r4, #4]
 8007550:	42a3      	cmp	r3, r4
 8007552:	bf0c      	ite	eq
 8007554:	6032      	streq	r2, [r6, #0]
 8007556:	605a      	strne	r2, [r3, #4]
 8007558:	e7ec      	b.n	8007534 <_malloc_r+0xa0>
 800755a:	4623      	mov	r3, r4
 800755c:	6864      	ldr	r4, [r4, #4]
 800755e:	e7b2      	b.n	80074c6 <_malloc_r+0x32>
 8007560:	4634      	mov	r4, r6
 8007562:	6876      	ldr	r6, [r6, #4]
 8007564:	e7b9      	b.n	80074da <_malloc_r+0x46>
 8007566:	230c      	movs	r3, #12
 8007568:	4638      	mov	r0, r7
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	f000 fd74 	bl	8008058 <__malloc_unlock>
 8007570:	e7a1      	b.n	80074b6 <_malloc_r+0x22>
 8007572:	6025      	str	r5, [r4, #0]
 8007574:	e7de      	b.n	8007534 <_malloc_r+0xa0>
 8007576:	bf00      	nop
 8007578:	2000046c 	.word	0x2000046c

0800757c <__sfputc_r>:
 800757c:	6893      	ldr	r3, [r2, #8]
 800757e:	b410      	push	{r4}
 8007580:	3b01      	subs	r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	6093      	str	r3, [r2, #8]
 8007586:	da07      	bge.n	8007598 <__sfputc_r+0x1c>
 8007588:	6994      	ldr	r4, [r2, #24]
 800758a:	42a3      	cmp	r3, r4
 800758c:	db01      	blt.n	8007592 <__sfputc_r+0x16>
 800758e:	290a      	cmp	r1, #10
 8007590:	d102      	bne.n	8007598 <__sfputc_r+0x1c>
 8007592:	bc10      	pop	{r4}
 8007594:	f000 bb34 	b.w	8007c00 <__swbuf_r>
 8007598:	6813      	ldr	r3, [r2, #0]
 800759a:	1c58      	adds	r0, r3, #1
 800759c:	6010      	str	r0, [r2, #0]
 800759e:	7019      	strb	r1, [r3, #0]
 80075a0:	4608      	mov	r0, r1
 80075a2:	bc10      	pop	{r4}
 80075a4:	4770      	bx	lr

080075a6 <__sfputs_r>:
 80075a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a8:	4606      	mov	r6, r0
 80075aa:	460f      	mov	r7, r1
 80075ac:	4614      	mov	r4, r2
 80075ae:	18d5      	adds	r5, r2, r3
 80075b0:	42ac      	cmp	r4, r5
 80075b2:	d101      	bne.n	80075b8 <__sfputs_r+0x12>
 80075b4:	2000      	movs	r0, #0
 80075b6:	e007      	b.n	80075c8 <__sfputs_r+0x22>
 80075b8:	463a      	mov	r2, r7
 80075ba:	4630      	mov	r0, r6
 80075bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c0:	f7ff ffdc 	bl	800757c <__sfputc_r>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d1f3      	bne.n	80075b0 <__sfputs_r+0xa>
 80075c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075cc <_vfiprintf_r>:
 80075cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	460d      	mov	r5, r1
 80075d2:	4614      	mov	r4, r2
 80075d4:	4698      	mov	r8, r3
 80075d6:	4606      	mov	r6, r0
 80075d8:	b09d      	sub	sp, #116	; 0x74
 80075da:	b118      	cbz	r0, 80075e4 <_vfiprintf_r+0x18>
 80075dc:	6983      	ldr	r3, [r0, #24]
 80075de:	b90b      	cbnz	r3, 80075e4 <_vfiprintf_r+0x18>
 80075e0:	f7ff fe98 	bl	8007314 <__sinit>
 80075e4:	4b89      	ldr	r3, [pc, #548]	; (800780c <_vfiprintf_r+0x240>)
 80075e6:	429d      	cmp	r5, r3
 80075e8:	d11b      	bne.n	8007622 <_vfiprintf_r+0x56>
 80075ea:	6875      	ldr	r5, [r6, #4]
 80075ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075ee:	07d9      	lsls	r1, r3, #31
 80075f0:	d405      	bmi.n	80075fe <_vfiprintf_r+0x32>
 80075f2:	89ab      	ldrh	r3, [r5, #12]
 80075f4:	059a      	lsls	r2, r3, #22
 80075f6:	d402      	bmi.n	80075fe <_vfiprintf_r+0x32>
 80075f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075fa:	f7ff ff29 	bl	8007450 <__retarget_lock_acquire_recursive>
 80075fe:	89ab      	ldrh	r3, [r5, #12]
 8007600:	071b      	lsls	r3, r3, #28
 8007602:	d501      	bpl.n	8007608 <_vfiprintf_r+0x3c>
 8007604:	692b      	ldr	r3, [r5, #16]
 8007606:	b9eb      	cbnz	r3, 8007644 <_vfiprintf_r+0x78>
 8007608:	4629      	mov	r1, r5
 800760a:	4630      	mov	r0, r6
 800760c:	f000 fb5c 	bl	8007cc8 <__swsetup_r>
 8007610:	b1c0      	cbz	r0, 8007644 <_vfiprintf_r+0x78>
 8007612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007614:	07dc      	lsls	r4, r3, #31
 8007616:	d50e      	bpl.n	8007636 <_vfiprintf_r+0x6a>
 8007618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800761c:	b01d      	add	sp, #116	; 0x74
 800761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007622:	4b7b      	ldr	r3, [pc, #492]	; (8007810 <_vfiprintf_r+0x244>)
 8007624:	429d      	cmp	r5, r3
 8007626:	d101      	bne.n	800762c <_vfiprintf_r+0x60>
 8007628:	68b5      	ldr	r5, [r6, #8]
 800762a:	e7df      	b.n	80075ec <_vfiprintf_r+0x20>
 800762c:	4b79      	ldr	r3, [pc, #484]	; (8007814 <_vfiprintf_r+0x248>)
 800762e:	429d      	cmp	r5, r3
 8007630:	bf08      	it	eq
 8007632:	68f5      	ldreq	r5, [r6, #12]
 8007634:	e7da      	b.n	80075ec <_vfiprintf_r+0x20>
 8007636:	89ab      	ldrh	r3, [r5, #12]
 8007638:	0598      	lsls	r0, r3, #22
 800763a:	d4ed      	bmi.n	8007618 <_vfiprintf_r+0x4c>
 800763c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800763e:	f7ff ff08 	bl	8007452 <__retarget_lock_release_recursive>
 8007642:	e7e9      	b.n	8007618 <_vfiprintf_r+0x4c>
 8007644:	2300      	movs	r3, #0
 8007646:	9309      	str	r3, [sp, #36]	; 0x24
 8007648:	2320      	movs	r3, #32
 800764a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800764e:	2330      	movs	r3, #48	; 0x30
 8007650:	f04f 0901 	mov.w	r9, #1
 8007654:	f8cd 800c 	str.w	r8, [sp, #12]
 8007658:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007818 <_vfiprintf_r+0x24c>
 800765c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007660:	4623      	mov	r3, r4
 8007662:	469a      	mov	sl, r3
 8007664:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007668:	b10a      	cbz	r2, 800766e <_vfiprintf_r+0xa2>
 800766a:	2a25      	cmp	r2, #37	; 0x25
 800766c:	d1f9      	bne.n	8007662 <_vfiprintf_r+0x96>
 800766e:	ebba 0b04 	subs.w	fp, sl, r4
 8007672:	d00b      	beq.n	800768c <_vfiprintf_r+0xc0>
 8007674:	465b      	mov	r3, fp
 8007676:	4622      	mov	r2, r4
 8007678:	4629      	mov	r1, r5
 800767a:	4630      	mov	r0, r6
 800767c:	f7ff ff93 	bl	80075a6 <__sfputs_r>
 8007680:	3001      	adds	r0, #1
 8007682:	f000 80aa 	beq.w	80077da <_vfiprintf_r+0x20e>
 8007686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007688:	445a      	add	r2, fp
 800768a:	9209      	str	r2, [sp, #36]	; 0x24
 800768c:	f89a 3000 	ldrb.w	r3, [sl]
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 80a2 	beq.w	80077da <_vfiprintf_r+0x20e>
 8007696:	2300      	movs	r3, #0
 8007698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800769c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076a0:	f10a 0a01 	add.w	sl, sl, #1
 80076a4:	9304      	str	r3, [sp, #16]
 80076a6:	9307      	str	r3, [sp, #28]
 80076a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076ac:	931a      	str	r3, [sp, #104]	; 0x68
 80076ae:	4654      	mov	r4, sl
 80076b0:	2205      	movs	r2, #5
 80076b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b6:	4858      	ldr	r0, [pc, #352]	; (8007818 <_vfiprintf_r+0x24c>)
 80076b8:	f000 fcba 	bl	8008030 <memchr>
 80076bc:	9a04      	ldr	r2, [sp, #16]
 80076be:	b9d8      	cbnz	r0, 80076f8 <_vfiprintf_r+0x12c>
 80076c0:	06d1      	lsls	r1, r2, #27
 80076c2:	bf44      	itt	mi
 80076c4:	2320      	movmi	r3, #32
 80076c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076ca:	0713      	lsls	r3, r2, #28
 80076cc:	bf44      	itt	mi
 80076ce:	232b      	movmi	r3, #43	; 0x2b
 80076d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076d4:	f89a 3000 	ldrb.w	r3, [sl]
 80076d8:	2b2a      	cmp	r3, #42	; 0x2a
 80076da:	d015      	beq.n	8007708 <_vfiprintf_r+0x13c>
 80076dc:	4654      	mov	r4, sl
 80076de:	2000      	movs	r0, #0
 80076e0:	f04f 0c0a 	mov.w	ip, #10
 80076e4:	9a07      	ldr	r2, [sp, #28]
 80076e6:	4621      	mov	r1, r4
 80076e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076ec:	3b30      	subs	r3, #48	; 0x30
 80076ee:	2b09      	cmp	r3, #9
 80076f0:	d94e      	bls.n	8007790 <_vfiprintf_r+0x1c4>
 80076f2:	b1b0      	cbz	r0, 8007722 <_vfiprintf_r+0x156>
 80076f4:	9207      	str	r2, [sp, #28]
 80076f6:	e014      	b.n	8007722 <_vfiprintf_r+0x156>
 80076f8:	eba0 0308 	sub.w	r3, r0, r8
 80076fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007700:	4313      	orrs	r3, r2
 8007702:	46a2      	mov	sl, r4
 8007704:	9304      	str	r3, [sp, #16]
 8007706:	e7d2      	b.n	80076ae <_vfiprintf_r+0xe2>
 8007708:	9b03      	ldr	r3, [sp, #12]
 800770a:	1d19      	adds	r1, r3, #4
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	9103      	str	r1, [sp, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	bfbb      	ittet	lt
 8007714:	425b      	neglt	r3, r3
 8007716:	f042 0202 	orrlt.w	r2, r2, #2
 800771a:	9307      	strge	r3, [sp, #28]
 800771c:	9307      	strlt	r3, [sp, #28]
 800771e:	bfb8      	it	lt
 8007720:	9204      	strlt	r2, [sp, #16]
 8007722:	7823      	ldrb	r3, [r4, #0]
 8007724:	2b2e      	cmp	r3, #46	; 0x2e
 8007726:	d10c      	bne.n	8007742 <_vfiprintf_r+0x176>
 8007728:	7863      	ldrb	r3, [r4, #1]
 800772a:	2b2a      	cmp	r3, #42	; 0x2a
 800772c:	d135      	bne.n	800779a <_vfiprintf_r+0x1ce>
 800772e:	9b03      	ldr	r3, [sp, #12]
 8007730:	3402      	adds	r4, #2
 8007732:	1d1a      	adds	r2, r3, #4
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	9203      	str	r2, [sp, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	bfb8      	it	lt
 800773c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007740:	9305      	str	r3, [sp, #20]
 8007742:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800781c <_vfiprintf_r+0x250>
 8007746:	2203      	movs	r2, #3
 8007748:	4650      	mov	r0, sl
 800774a:	7821      	ldrb	r1, [r4, #0]
 800774c:	f000 fc70 	bl	8008030 <memchr>
 8007750:	b140      	cbz	r0, 8007764 <_vfiprintf_r+0x198>
 8007752:	2340      	movs	r3, #64	; 0x40
 8007754:	eba0 000a 	sub.w	r0, r0, sl
 8007758:	fa03 f000 	lsl.w	r0, r3, r0
 800775c:	9b04      	ldr	r3, [sp, #16]
 800775e:	3401      	adds	r4, #1
 8007760:	4303      	orrs	r3, r0
 8007762:	9304      	str	r3, [sp, #16]
 8007764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007768:	2206      	movs	r2, #6
 800776a:	482d      	ldr	r0, [pc, #180]	; (8007820 <_vfiprintf_r+0x254>)
 800776c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007770:	f000 fc5e 	bl	8008030 <memchr>
 8007774:	2800      	cmp	r0, #0
 8007776:	d03f      	beq.n	80077f8 <_vfiprintf_r+0x22c>
 8007778:	4b2a      	ldr	r3, [pc, #168]	; (8007824 <_vfiprintf_r+0x258>)
 800777a:	bb1b      	cbnz	r3, 80077c4 <_vfiprintf_r+0x1f8>
 800777c:	9b03      	ldr	r3, [sp, #12]
 800777e:	3307      	adds	r3, #7
 8007780:	f023 0307 	bic.w	r3, r3, #7
 8007784:	3308      	adds	r3, #8
 8007786:	9303      	str	r3, [sp, #12]
 8007788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800778a:	443b      	add	r3, r7
 800778c:	9309      	str	r3, [sp, #36]	; 0x24
 800778e:	e767      	b.n	8007660 <_vfiprintf_r+0x94>
 8007790:	460c      	mov	r4, r1
 8007792:	2001      	movs	r0, #1
 8007794:	fb0c 3202 	mla	r2, ip, r2, r3
 8007798:	e7a5      	b.n	80076e6 <_vfiprintf_r+0x11a>
 800779a:	2300      	movs	r3, #0
 800779c:	f04f 0c0a 	mov.w	ip, #10
 80077a0:	4619      	mov	r1, r3
 80077a2:	3401      	adds	r4, #1
 80077a4:	9305      	str	r3, [sp, #20]
 80077a6:	4620      	mov	r0, r4
 80077a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077ac:	3a30      	subs	r2, #48	; 0x30
 80077ae:	2a09      	cmp	r2, #9
 80077b0:	d903      	bls.n	80077ba <_vfiprintf_r+0x1ee>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0c5      	beq.n	8007742 <_vfiprintf_r+0x176>
 80077b6:	9105      	str	r1, [sp, #20]
 80077b8:	e7c3      	b.n	8007742 <_vfiprintf_r+0x176>
 80077ba:	4604      	mov	r4, r0
 80077bc:	2301      	movs	r3, #1
 80077be:	fb0c 2101 	mla	r1, ip, r1, r2
 80077c2:	e7f0      	b.n	80077a6 <_vfiprintf_r+0x1da>
 80077c4:	ab03      	add	r3, sp, #12
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	462a      	mov	r2, r5
 80077ca:	4630      	mov	r0, r6
 80077cc:	4b16      	ldr	r3, [pc, #88]	; (8007828 <_vfiprintf_r+0x25c>)
 80077ce:	a904      	add	r1, sp, #16
 80077d0:	f3af 8000 	nop.w
 80077d4:	4607      	mov	r7, r0
 80077d6:	1c78      	adds	r0, r7, #1
 80077d8:	d1d6      	bne.n	8007788 <_vfiprintf_r+0x1bc>
 80077da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077dc:	07d9      	lsls	r1, r3, #31
 80077de:	d405      	bmi.n	80077ec <_vfiprintf_r+0x220>
 80077e0:	89ab      	ldrh	r3, [r5, #12]
 80077e2:	059a      	lsls	r2, r3, #22
 80077e4:	d402      	bmi.n	80077ec <_vfiprintf_r+0x220>
 80077e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077e8:	f7ff fe33 	bl	8007452 <__retarget_lock_release_recursive>
 80077ec:	89ab      	ldrh	r3, [r5, #12]
 80077ee:	065b      	lsls	r3, r3, #25
 80077f0:	f53f af12 	bmi.w	8007618 <_vfiprintf_r+0x4c>
 80077f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077f6:	e711      	b.n	800761c <_vfiprintf_r+0x50>
 80077f8:	ab03      	add	r3, sp, #12
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	462a      	mov	r2, r5
 80077fe:	4630      	mov	r0, r6
 8007800:	4b09      	ldr	r3, [pc, #36]	; (8007828 <_vfiprintf_r+0x25c>)
 8007802:	a904      	add	r1, sp, #16
 8007804:	f000 f882 	bl	800790c <_printf_i>
 8007808:	e7e4      	b.n	80077d4 <_vfiprintf_r+0x208>
 800780a:	bf00      	nop
 800780c:	080089f8 	.word	0x080089f8
 8007810:	08008a18 	.word	0x08008a18
 8007814:	080089d8 	.word	0x080089d8
 8007818:	08008a38 	.word	0x08008a38
 800781c:	08008a3e 	.word	0x08008a3e
 8007820:	08008a42 	.word	0x08008a42
 8007824:	00000000 	.word	0x00000000
 8007828:	080075a7 	.word	0x080075a7

0800782c <_printf_common>:
 800782c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007830:	4616      	mov	r6, r2
 8007832:	4699      	mov	r9, r3
 8007834:	688a      	ldr	r2, [r1, #8]
 8007836:	690b      	ldr	r3, [r1, #16]
 8007838:	4607      	mov	r7, r0
 800783a:	4293      	cmp	r3, r2
 800783c:	bfb8      	it	lt
 800783e:	4613      	movlt	r3, r2
 8007840:	6033      	str	r3, [r6, #0]
 8007842:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007846:	460c      	mov	r4, r1
 8007848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800784c:	b10a      	cbz	r2, 8007852 <_printf_common+0x26>
 800784e:	3301      	adds	r3, #1
 8007850:	6033      	str	r3, [r6, #0]
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	0699      	lsls	r1, r3, #26
 8007856:	bf42      	ittt	mi
 8007858:	6833      	ldrmi	r3, [r6, #0]
 800785a:	3302      	addmi	r3, #2
 800785c:	6033      	strmi	r3, [r6, #0]
 800785e:	6825      	ldr	r5, [r4, #0]
 8007860:	f015 0506 	ands.w	r5, r5, #6
 8007864:	d106      	bne.n	8007874 <_printf_common+0x48>
 8007866:	f104 0a19 	add.w	sl, r4, #25
 800786a:	68e3      	ldr	r3, [r4, #12]
 800786c:	6832      	ldr	r2, [r6, #0]
 800786e:	1a9b      	subs	r3, r3, r2
 8007870:	42ab      	cmp	r3, r5
 8007872:	dc28      	bgt.n	80078c6 <_printf_common+0x9a>
 8007874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007878:	1e13      	subs	r3, r2, #0
 800787a:	6822      	ldr	r2, [r4, #0]
 800787c:	bf18      	it	ne
 800787e:	2301      	movne	r3, #1
 8007880:	0692      	lsls	r2, r2, #26
 8007882:	d42d      	bmi.n	80078e0 <_printf_common+0xb4>
 8007884:	4649      	mov	r1, r9
 8007886:	4638      	mov	r0, r7
 8007888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800788c:	47c0      	blx	r8
 800788e:	3001      	adds	r0, #1
 8007890:	d020      	beq.n	80078d4 <_printf_common+0xa8>
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	68e5      	ldr	r5, [r4, #12]
 8007896:	f003 0306 	and.w	r3, r3, #6
 800789a:	2b04      	cmp	r3, #4
 800789c:	bf18      	it	ne
 800789e:	2500      	movne	r5, #0
 80078a0:	6832      	ldr	r2, [r6, #0]
 80078a2:	f04f 0600 	mov.w	r6, #0
 80078a6:	68a3      	ldr	r3, [r4, #8]
 80078a8:	bf08      	it	eq
 80078aa:	1aad      	subeq	r5, r5, r2
 80078ac:	6922      	ldr	r2, [r4, #16]
 80078ae:	bf08      	it	eq
 80078b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078b4:	4293      	cmp	r3, r2
 80078b6:	bfc4      	itt	gt
 80078b8:	1a9b      	subgt	r3, r3, r2
 80078ba:	18ed      	addgt	r5, r5, r3
 80078bc:	341a      	adds	r4, #26
 80078be:	42b5      	cmp	r5, r6
 80078c0:	d11a      	bne.n	80078f8 <_printf_common+0xcc>
 80078c2:	2000      	movs	r0, #0
 80078c4:	e008      	b.n	80078d8 <_printf_common+0xac>
 80078c6:	2301      	movs	r3, #1
 80078c8:	4652      	mov	r2, sl
 80078ca:	4649      	mov	r1, r9
 80078cc:	4638      	mov	r0, r7
 80078ce:	47c0      	blx	r8
 80078d0:	3001      	adds	r0, #1
 80078d2:	d103      	bne.n	80078dc <_printf_common+0xb0>
 80078d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078dc:	3501      	adds	r5, #1
 80078de:	e7c4      	b.n	800786a <_printf_common+0x3e>
 80078e0:	2030      	movs	r0, #48	; 0x30
 80078e2:	18e1      	adds	r1, r4, r3
 80078e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078ee:	4422      	add	r2, r4
 80078f0:	3302      	adds	r3, #2
 80078f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078f6:	e7c5      	b.n	8007884 <_printf_common+0x58>
 80078f8:	2301      	movs	r3, #1
 80078fa:	4622      	mov	r2, r4
 80078fc:	4649      	mov	r1, r9
 80078fe:	4638      	mov	r0, r7
 8007900:	47c0      	blx	r8
 8007902:	3001      	adds	r0, #1
 8007904:	d0e6      	beq.n	80078d4 <_printf_common+0xa8>
 8007906:	3601      	adds	r6, #1
 8007908:	e7d9      	b.n	80078be <_printf_common+0x92>
	...

0800790c <_printf_i>:
 800790c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007910:	7e0f      	ldrb	r7, [r1, #24]
 8007912:	4691      	mov	r9, r2
 8007914:	2f78      	cmp	r7, #120	; 0x78
 8007916:	4680      	mov	r8, r0
 8007918:	460c      	mov	r4, r1
 800791a:	469a      	mov	sl, r3
 800791c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800791e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007922:	d807      	bhi.n	8007934 <_printf_i+0x28>
 8007924:	2f62      	cmp	r7, #98	; 0x62
 8007926:	d80a      	bhi.n	800793e <_printf_i+0x32>
 8007928:	2f00      	cmp	r7, #0
 800792a:	f000 80d9 	beq.w	8007ae0 <_printf_i+0x1d4>
 800792e:	2f58      	cmp	r7, #88	; 0x58
 8007930:	f000 80a4 	beq.w	8007a7c <_printf_i+0x170>
 8007934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800793c:	e03a      	b.n	80079b4 <_printf_i+0xa8>
 800793e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007942:	2b15      	cmp	r3, #21
 8007944:	d8f6      	bhi.n	8007934 <_printf_i+0x28>
 8007946:	a101      	add	r1, pc, #4	; (adr r1, 800794c <_printf_i+0x40>)
 8007948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800794c:	080079a5 	.word	0x080079a5
 8007950:	080079b9 	.word	0x080079b9
 8007954:	08007935 	.word	0x08007935
 8007958:	08007935 	.word	0x08007935
 800795c:	08007935 	.word	0x08007935
 8007960:	08007935 	.word	0x08007935
 8007964:	080079b9 	.word	0x080079b9
 8007968:	08007935 	.word	0x08007935
 800796c:	08007935 	.word	0x08007935
 8007970:	08007935 	.word	0x08007935
 8007974:	08007935 	.word	0x08007935
 8007978:	08007ac7 	.word	0x08007ac7
 800797c:	080079e9 	.word	0x080079e9
 8007980:	08007aa9 	.word	0x08007aa9
 8007984:	08007935 	.word	0x08007935
 8007988:	08007935 	.word	0x08007935
 800798c:	08007ae9 	.word	0x08007ae9
 8007990:	08007935 	.word	0x08007935
 8007994:	080079e9 	.word	0x080079e9
 8007998:	08007935 	.word	0x08007935
 800799c:	08007935 	.word	0x08007935
 80079a0:	08007ab1 	.word	0x08007ab1
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	1d1a      	adds	r2, r3, #4
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	602a      	str	r2, [r5, #0]
 80079ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079b4:	2301      	movs	r3, #1
 80079b6:	e0a4      	b.n	8007b02 <_printf_i+0x1f6>
 80079b8:	6820      	ldr	r0, [r4, #0]
 80079ba:	6829      	ldr	r1, [r5, #0]
 80079bc:	0606      	lsls	r6, r0, #24
 80079be:	f101 0304 	add.w	r3, r1, #4
 80079c2:	d50a      	bpl.n	80079da <_printf_i+0xce>
 80079c4:	680e      	ldr	r6, [r1, #0]
 80079c6:	602b      	str	r3, [r5, #0]
 80079c8:	2e00      	cmp	r6, #0
 80079ca:	da03      	bge.n	80079d4 <_printf_i+0xc8>
 80079cc:	232d      	movs	r3, #45	; 0x2d
 80079ce:	4276      	negs	r6, r6
 80079d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079d4:	230a      	movs	r3, #10
 80079d6:	485e      	ldr	r0, [pc, #376]	; (8007b50 <_printf_i+0x244>)
 80079d8:	e019      	b.n	8007a0e <_printf_i+0x102>
 80079da:	680e      	ldr	r6, [r1, #0]
 80079dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079e0:	602b      	str	r3, [r5, #0]
 80079e2:	bf18      	it	ne
 80079e4:	b236      	sxthne	r6, r6
 80079e6:	e7ef      	b.n	80079c8 <_printf_i+0xbc>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	6820      	ldr	r0, [r4, #0]
 80079ec:	1d19      	adds	r1, r3, #4
 80079ee:	6029      	str	r1, [r5, #0]
 80079f0:	0601      	lsls	r1, r0, #24
 80079f2:	d501      	bpl.n	80079f8 <_printf_i+0xec>
 80079f4:	681e      	ldr	r6, [r3, #0]
 80079f6:	e002      	b.n	80079fe <_printf_i+0xf2>
 80079f8:	0646      	lsls	r6, r0, #25
 80079fa:	d5fb      	bpl.n	80079f4 <_printf_i+0xe8>
 80079fc:	881e      	ldrh	r6, [r3, #0]
 80079fe:	2f6f      	cmp	r7, #111	; 0x6f
 8007a00:	bf0c      	ite	eq
 8007a02:	2308      	moveq	r3, #8
 8007a04:	230a      	movne	r3, #10
 8007a06:	4852      	ldr	r0, [pc, #328]	; (8007b50 <_printf_i+0x244>)
 8007a08:	2100      	movs	r1, #0
 8007a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a0e:	6865      	ldr	r5, [r4, #4]
 8007a10:	2d00      	cmp	r5, #0
 8007a12:	bfa8      	it	ge
 8007a14:	6821      	ldrge	r1, [r4, #0]
 8007a16:	60a5      	str	r5, [r4, #8]
 8007a18:	bfa4      	itt	ge
 8007a1a:	f021 0104 	bicge.w	r1, r1, #4
 8007a1e:	6021      	strge	r1, [r4, #0]
 8007a20:	b90e      	cbnz	r6, 8007a26 <_printf_i+0x11a>
 8007a22:	2d00      	cmp	r5, #0
 8007a24:	d04d      	beq.n	8007ac2 <_printf_i+0x1b6>
 8007a26:	4615      	mov	r5, r2
 8007a28:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a2c:	fb03 6711 	mls	r7, r3, r1, r6
 8007a30:	5dc7      	ldrb	r7, [r0, r7]
 8007a32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a36:	4637      	mov	r7, r6
 8007a38:	42bb      	cmp	r3, r7
 8007a3a:	460e      	mov	r6, r1
 8007a3c:	d9f4      	bls.n	8007a28 <_printf_i+0x11c>
 8007a3e:	2b08      	cmp	r3, #8
 8007a40:	d10b      	bne.n	8007a5a <_printf_i+0x14e>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	07de      	lsls	r6, r3, #31
 8007a46:	d508      	bpl.n	8007a5a <_printf_i+0x14e>
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	6861      	ldr	r1, [r4, #4]
 8007a4c:	4299      	cmp	r1, r3
 8007a4e:	bfde      	ittt	le
 8007a50:	2330      	movle	r3, #48	; 0x30
 8007a52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a56:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007a5a:	1b52      	subs	r2, r2, r5
 8007a5c:	6122      	str	r2, [r4, #16]
 8007a5e:	464b      	mov	r3, r9
 8007a60:	4621      	mov	r1, r4
 8007a62:	4640      	mov	r0, r8
 8007a64:	f8cd a000 	str.w	sl, [sp]
 8007a68:	aa03      	add	r2, sp, #12
 8007a6a:	f7ff fedf 	bl	800782c <_printf_common>
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d14c      	bne.n	8007b0c <_printf_i+0x200>
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a76:	b004      	add	sp, #16
 8007a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7c:	4834      	ldr	r0, [pc, #208]	; (8007b50 <_printf_i+0x244>)
 8007a7e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a82:	6829      	ldr	r1, [r5, #0]
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a8a:	6029      	str	r1, [r5, #0]
 8007a8c:	061d      	lsls	r5, r3, #24
 8007a8e:	d514      	bpl.n	8007aba <_printf_i+0x1ae>
 8007a90:	07df      	lsls	r7, r3, #31
 8007a92:	bf44      	itt	mi
 8007a94:	f043 0320 	orrmi.w	r3, r3, #32
 8007a98:	6023      	strmi	r3, [r4, #0]
 8007a9a:	b91e      	cbnz	r6, 8007aa4 <_printf_i+0x198>
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	f023 0320 	bic.w	r3, r3, #32
 8007aa2:	6023      	str	r3, [r4, #0]
 8007aa4:	2310      	movs	r3, #16
 8007aa6:	e7af      	b.n	8007a08 <_printf_i+0xfc>
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	f043 0320 	orr.w	r3, r3, #32
 8007aae:	6023      	str	r3, [r4, #0]
 8007ab0:	2378      	movs	r3, #120	; 0x78
 8007ab2:	4828      	ldr	r0, [pc, #160]	; (8007b54 <_printf_i+0x248>)
 8007ab4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ab8:	e7e3      	b.n	8007a82 <_printf_i+0x176>
 8007aba:	0659      	lsls	r1, r3, #25
 8007abc:	bf48      	it	mi
 8007abe:	b2b6      	uxthmi	r6, r6
 8007ac0:	e7e6      	b.n	8007a90 <_printf_i+0x184>
 8007ac2:	4615      	mov	r5, r2
 8007ac4:	e7bb      	b.n	8007a3e <_printf_i+0x132>
 8007ac6:	682b      	ldr	r3, [r5, #0]
 8007ac8:	6826      	ldr	r6, [r4, #0]
 8007aca:	1d18      	adds	r0, r3, #4
 8007acc:	6961      	ldr	r1, [r4, #20]
 8007ace:	6028      	str	r0, [r5, #0]
 8007ad0:	0635      	lsls	r5, r6, #24
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	d501      	bpl.n	8007ada <_printf_i+0x1ce>
 8007ad6:	6019      	str	r1, [r3, #0]
 8007ad8:	e002      	b.n	8007ae0 <_printf_i+0x1d4>
 8007ada:	0670      	lsls	r0, r6, #25
 8007adc:	d5fb      	bpl.n	8007ad6 <_printf_i+0x1ca>
 8007ade:	8019      	strh	r1, [r3, #0]
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4615      	mov	r5, r2
 8007ae4:	6123      	str	r3, [r4, #16]
 8007ae6:	e7ba      	b.n	8007a5e <_printf_i+0x152>
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	2100      	movs	r1, #0
 8007aec:	1d1a      	adds	r2, r3, #4
 8007aee:	602a      	str	r2, [r5, #0]
 8007af0:	681d      	ldr	r5, [r3, #0]
 8007af2:	6862      	ldr	r2, [r4, #4]
 8007af4:	4628      	mov	r0, r5
 8007af6:	f000 fa9b 	bl	8008030 <memchr>
 8007afa:	b108      	cbz	r0, 8007b00 <_printf_i+0x1f4>
 8007afc:	1b40      	subs	r0, r0, r5
 8007afe:	6060      	str	r0, [r4, #4]
 8007b00:	6863      	ldr	r3, [r4, #4]
 8007b02:	6123      	str	r3, [r4, #16]
 8007b04:	2300      	movs	r3, #0
 8007b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b0a:	e7a8      	b.n	8007a5e <_printf_i+0x152>
 8007b0c:	462a      	mov	r2, r5
 8007b0e:	4649      	mov	r1, r9
 8007b10:	4640      	mov	r0, r8
 8007b12:	6923      	ldr	r3, [r4, #16]
 8007b14:	47d0      	blx	sl
 8007b16:	3001      	adds	r0, #1
 8007b18:	d0ab      	beq.n	8007a72 <_printf_i+0x166>
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	079b      	lsls	r3, r3, #30
 8007b1e:	d413      	bmi.n	8007b48 <_printf_i+0x23c>
 8007b20:	68e0      	ldr	r0, [r4, #12]
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	4298      	cmp	r0, r3
 8007b26:	bfb8      	it	lt
 8007b28:	4618      	movlt	r0, r3
 8007b2a:	e7a4      	b.n	8007a76 <_printf_i+0x16a>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	4632      	mov	r2, r6
 8007b30:	4649      	mov	r1, r9
 8007b32:	4640      	mov	r0, r8
 8007b34:	47d0      	blx	sl
 8007b36:	3001      	adds	r0, #1
 8007b38:	d09b      	beq.n	8007a72 <_printf_i+0x166>
 8007b3a:	3501      	adds	r5, #1
 8007b3c:	68e3      	ldr	r3, [r4, #12]
 8007b3e:	9903      	ldr	r1, [sp, #12]
 8007b40:	1a5b      	subs	r3, r3, r1
 8007b42:	42ab      	cmp	r3, r5
 8007b44:	dcf2      	bgt.n	8007b2c <_printf_i+0x220>
 8007b46:	e7eb      	b.n	8007b20 <_printf_i+0x214>
 8007b48:	2500      	movs	r5, #0
 8007b4a:	f104 0619 	add.w	r6, r4, #25
 8007b4e:	e7f5      	b.n	8007b3c <_printf_i+0x230>
 8007b50:	08008a49 	.word	0x08008a49
 8007b54:	08008a5a 	.word	0x08008a5a

08007b58 <_sbrk_r>:
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	4d05      	ldr	r5, [pc, #20]	; (8007b74 <_sbrk_r+0x1c>)
 8007b5e:	4604      	mov	r4, r0
 8007b60:	4608      	mov	r0, r1
 8007b62:	602b      	str	r3, [r5, #0]
 8007b64:	f7fb fbc2 	bl	80032ec <_sbrk>
 8007b68:	1c43      	adds	r3, r0, #1
 8007b6a:	d102      	bne.n	8007b72 <_sbrk_r+0x1a>
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	b103      	cbz	r3, 8007b72 <_sbrk_r+0x1a>
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	20000474 	.word	0x20000474

08007b78 <__sread>:
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b80:	f000 fab8 	bl	80080f4 <_read_r>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	bfab      	itete	ge
 8007b88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b8c:	181b      	addge	r3, r3, r0
 8007b8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b92:	bfac      	ite	ge
 8007b94:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b96:	81a3      	strhlt	r3, [r4, #12]
 8007b98:	bd10      	pop	{r4, pc}

08007b9a <__swrite>:
 8007b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b9e:	461f      	mov	r7, r3
 8007ba0:	898b      	ldrh	r3, [r1, #12]
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	05db      	lsls	r3, r3, #23
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	4616      	mov	r6, r2
 8007baa:	d505      	bpl.n	8007bb8 <__swrite+0x1e>
 8007bac:	2302      	movs	r3, #2
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb4:	f000 f9c4 	bl	8007f40 <_lseek_r>
 8007bb8:	89a3      	ldrh	r3, [r4, #12]
 8007bba:	4632      	mov	r2, r6
 8007bbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bc0:	81a3      	strh	r3, [r4, #12]
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	463b      	mov	r3, r7
 8007bc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bce:	f000 b869 	b.w	8007ca4 <_write_r>

08007bd2 <__sseek>:
 8007bd2:	b510      	push	{r4, lr}
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bda:	f000 f9b1 	bl	8007f40 <_lseek_r>
 8007bde:	1c43      	adds	r3, r0, #1
 8007be0:	89a3      	ldrh	r3, [r4, #12]
 8007be2:	bf15      	itete	ne
 8007be4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007be6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bee:	81a3      	strheq	r3, [r4, #12]
 8007bf0:	bf18      	it	ne
 8007bf2:	81a3      	strhne	r3, [r4, #12]
 8007bf4:	bd10      	pop	{r4, pc}

08007bf6 <__sclose>:
 8007bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bfa:	f000 b8d3 	b.w	8007da4 <_close_r>
	...

08007c00 <__swbuf_r>:
 8007c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c02:	460e      	mov	r6, r1
 8007c04:	4614      	mov	r4, r2
 8007c06:	4605      	mov	r5, r0
 8007c08:	b118      	cbz	r0, 8007c12 <__swbuf_r+0x12>
 8007c0a:	6983      	ldr	r3, [r0, #24]
 8007c0c:	b90b      	cbnz	r3, 8007c12 <__swbuf_r+0x12>
 8007c0e:	f7ff fb81 	bl	8007314 <__sinit>
 8007c12:	4b21      	ldr	r3, [pc, #132]	; (8007c98 <__swbuf_r+0x98>)
 8007c14:	429c      	cmp	r4, r3
 8007c16:	d12b      	bne.n	8007c70 <__swbuf_r+0x70>
 8007c18:	686c      	ldr	r4, [r5, #4]
 8007c1a:	69a3      	ldr	r3, [r4, #24]
 8007c1c:	60a3      	str	r3, [r4, #8]
 8007c1e:	89a3      	ldrh	r3, [r4, #12]
 8007c20:	071a      	lsls	r2, r3, #28
 8007c22:	d52f      	bpl.n	8007c84 <__swbuf_r+0x84>
 8007c24:	6923      	ldr	r3, [r4, #16]
 8007c26:	b36b      	cbz	r3, 8007c84 <__swbuf_r+0x84>
 8007c28:	6923      	ldr	r3, [r4, #16]
 8007c2a:	6820      	ldr	r0, [r4, #0]
 8007c2c:	b2f6      	uxtb	r6, r6
 8007c2e:	1ac0      	subs	r0, r0, r3
 8007c30:	6963      	ldr	r3, [r4, #20]
 8007c32:	4637      	mov	r7, r6
 8007c34:	4283      	cmp	r3, r0
 8007c36:	dc04      	bgt.n	8007c42 <__swbuf_r+0x42>
 8007c38:	4621      	mov	r1, r4
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f000 f944 	bl	8007ec8 <_fflush_r>
 8007c40:	bb30      	cbnz	r0, 8007c90 <__swbuf_r+0x90>
 8007c42:	68a3      	ldr	r3, [r4, #8]
 8007c44:	3001      	adds	r0, #1
 8007c46:	3b01      	subs	r3, #1
 8007c48:	60a3      	str	r3, [r4, #8]
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	6022      	str	r2, [r4, #0]
 8007c50:	701e      	strb	r6, [r3, #0]
 8007c52:	6963      	ldr	r3, [r4, #20]
 8007c54:	4283      	cmp	r3, r0
 8007c56:	d004      	beq.n	8007c62 <__swbuf_r+0x62>
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	07db      	lsls	r3, r3, #31
 8007c5c:	d506      	bpl.n	8007c6c <__swbuf_r+0x6c>
 8007c5e:	2e0a      	cmp	r6, #10
 8007c60:	d104      	bne.n	8007c6c <__swbuf_r+0x6c>
 8007c62:	4621      	mov	r1, r4
 8007c64:	4628      	mov	r0, r5
 8007c66:	f000 f92f 	bl	8007ec8 <_fflush_r>
 8007c6a:	b988      	cbnz	r0, 8007c90 <__swbuf_r+0x90>
 8007c6c:	4638      	mov	r0, r7
 8007c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c70:	4b0a      	ldr	r3, [pc, #40]	; (8007c9c <__swbuf_r+0x9c>)
 8007c72:	429c      	cmp	r4, r3
 8007c74:	d101      	bne.n	8007c7a <__swbuf_r+0x7a>
 8007c76:	68ac      	ldr	r4, [r5, #8]
 8007c78:	e7cf      	b.n	8007c1a <__swbuf_r+0x1a>
 8007c7a:	4b09      	ldr	r3, [pc, #36]	; (8007ca0 <__swbuf_r+0xa0>)
 8007c7c:	429c      	cmp	r4, r3
 8007c7e:	bf08      	it	eq
 8007c80:	68ec      	ldreq	r4, [r5, #12]
 8007c82:	e7ca      	b.n	8007c1a <__swbuf_r+0x1a>
 8007c84:	4621      	mov	r1, r4
 8007c86:	4628      	mov	r0, r5
 8007c88:	f000 f81e 	bl	8007cc8 <__swsetup_r>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d0cb      	beq.n	8007c28 <__swbuf_r+0x28>
 8007c90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007c94:	e7ea      	b.n	8007c6c <__swbuf_r+0x6c>
 8007c96:	bf00      	nop
 8007c98:	080089f8 	.word	0x080089f8
 8007c9c:	08008a18 	.word	0x08008a18
 8007ca0:	080089d8 	.word	0x080089d8

08007ca4 <_write_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	4608      	mov	r0, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	2200      	movs	r2, #0
 8007cae:	4d05      	ldr	r5, [pc, #20]	; (8007cc4 <_write_r+0x20>)
 8007cb0:	602a      	str	r2, [r5, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f7fb facd 	bl	8003252 <_write>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d102      	bne.n	8007cc2 <_write_r+0x1e>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	b103      	cbz	r3, 8007cc2 <_write_r+0x1e>
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	20000474 	.word	0x20000474

08007cc8 <__swsetup_r>:
 8007cc8:	4b32      	ldr	r3, [pc, #200]	; (8007d94 <__swsetup_r+0xcc>)
 8007cca:	b570      	push	{r4, r5, r6, lr}
 8007ccc:	681d      	ldr	r5, [r3, #0]
 8007cce:	4606      	mov	r6, r0
 8007cd0:	460c      	mov	r4, r1
 8007cd2:	b125      	cbz	r5, 8007cde <__swsetup_r+0x16>
 8007cd4:	69ab      	ldr	r3, [r5, #24]
 8007cd6:	b913      	cbnz	r3, 8007cde <__swsetup_r+0x16>
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f7ff fb1b 	bl	8007314 <__sinit>
 8007cde:	4b2e      	ldr	r3, [pc, #184]	; (8007d98 <__swsetup_r+0xd0>)
 8007ce0:	429c      	cmp	r4, r3
 8007ce2:	d10f      	bne.n	8007d04 <__swsetup_r+0x3c>
 8007ce4:	686c      	ldr	r4, [r5, #4]
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cec:	0719      	lsls	r1, r3, #28
 8007cee:	d42c      	bmi.n	8007d4a <__swsetup_r+0x82>
 8007cf0:	06dd      	lsls	r5, r3, #27
 8007cf2:	d411      	bmi.n	8007d18 <__swsetup_r+0x50>
 8007cf4:	2309      	movs	r3, #9
 8007cf6:	6033      	str	r3, [r6, #0]
 8007cf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d00:	81a3      	strh	r3, [r4, #12]
 8007d02:	e03e      	b.n	8007d82 <__swsetup_r+0xba>
 8007d04:	4b25      	ldr	r3, [pc, #148]	; (8007d9c <__swsetup_r+0xd4>)
 8007d06:	429c      	cmp	r4, r3
 8007d08:	d101      	bne.n	8007d0e <__swsetup_r+0x46>
 8007d0a:	68ac      	ldr	r4, [r5, #8]
 8007d0c:	e7eb      	b.n	8007ce6 <__swsetup_r+0x1e>
 8007d0e:	4b24      	ldr	r3, [pc, #144]	; (8007da0 <__swsetup_r+0xd8>)
 8007d10:	429c      	cmp	r4, r3
 8007d12:	bf08      	it	eq
 8007d14:	68ec      	ldreq	r4, [r5, #12]
 8007d16:	e7e6      	b.n	8007ce6 <__swsetup_r+0x1e>
 8007d18:	0758      	lsls	r0, r3, #29
 8007d1a:	d512      	bpl.n	8007d42 <__swsetup_r+0x7a>
 8007d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d1e:	b141      	cbz	r1, 8007d32 <__swsetup_r+0x6a>
 8007d20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d24:	4299      	cmp	r1, r3
 8007d26:	d002      	beq.n	8007d2e <__swsetup_r+0x66>
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f000 f99b 	bl	8008064 <_free_r>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	6363      	str	r3, [r4, #52]	; 0x34
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d38:	81a3      	strh	r3, [r4, #12]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	6063      	str	r3, [r4, #4]
 8007d3e:	6923      	ldr	r3, [r4, #16]
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	89a3      	ldrh	r3, [r4, #12]
 8007d44:	f043 0308 	orr.w	r3, r3, #8
 8007d48:	81a3      	strh	r3, [r4, #12]
 8007d4a:	6923      	ldr	r3, [r4, #16]
 8007d4c:	b94b      	cbnz	r3, 8007d62 <__swsetup_r+0x9a>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d58:	d003      	beq.n	8007d62 <__swsetup_r+0x9a>
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f000 f927 	bl	8007fb0 <__smakebuf_r>
 8007d62:	89a0      	ldrh	r0, [r4, #12]
 8007d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d68:	f010 0301 	ands.w	r3, r0, #1
 8007d6c:	d00a      	beq.n	8007d84 <__swsetup_r+0xbc>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	60a3      	str	r3, [r4, #8]
 8007d72:	6963      	ldr	r3, [r4, #20]
 8007d74:	425b      	negs	r3, r3
 8007d76:	61a3      	str	r3, [r4, #24]
 8007d78:	6923      	ldr	r3, [r4, #16]
 8007d7a:	b943      	cbnz	r3, 8007d8e <__swsetup_r+0xc6>
 8007d7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d80:	d1ba      	bne.n	8007cf8 <__swsetup_r+0x30>
 8007d82:	bd70      	pop	{r4, r5, r6, pc}
 8007d84:	0781      	lsls	r1, r0, #30
 8007d86:	bf58      	it	pl
 8007d88:	6963      	ldrpl	r3, [r4, #20]
 8007d8a:	60a3      	str	r3, [r4, #8]
 8007d8c:	e7f4      	b.n	8007d78 <__swsetup_r+0xb0>
 8007d8e:	2000      	movs	r0, #0
 8007d90:	e7f7      	b.n	8007d82 <__swsetup_r+0xba>
 8007d92:	bf00      	nop
 8007d94:	200000d4 	.word	0x200000d4
 8007d98:	080089f8 	.word	0x080089f8
 8007d9c:	08008a18 	.word	0x08008a18
 8007da0:	080089d8 	.word	0x080089d8

08007da4 <_close_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	2300      	movs	r3, #0
 8007da8:	4d05      	ldr	r5, [pc, #20]	; (8007dc0 <_close_r+0x1c>)
 8007daa:	4604      	mov	r4, r0
 8007dac:	4608      	mov	r0, r1
 8007dae:	602b      	str	r3, [r5, #0]
 8007db0:	f7fb fa6b 	bl	800328a <_close>
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d102      	bne.n	8007dbe <_close_r+0x1a>
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	b103      	cbz	r3, 8007dbe <_close_r+0x1a>
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	20000474 	.word	0x20000474

08007dc4 <__sflush_r>:
 8007dc4:	898a      	ldrh	r2, [r1, #12]
 8007dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc8:	4605      	mov	r5, r0
 8007dca:	0710      	lsls	r0, r2, #28
 8007dcc:	460c      	mov	r4, r1
 8007dce:	d457      	bmi.n	8007e80 <__sflush_r+0xbc>
 8007dd0:	684b      	ldr	r3, [r1, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	dc04      	bgt.n	8007de0 <__sflush_r+0x1c>
 8007dd6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	dc01      	bgt.n	8007de0 <__sflush_r+0x1c>
 8007ddc:	2000      	movs	r0, #0
 8007dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007de2:	2e00      	cmp	r6, #0
 8007de4:	d0fa      	beq.n	8007ddc <__sflush_r+0x18>
 8007de6:	2300      	movs	r3, #0
 8007de8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dec:	682f      	ldr	r7, [r5, #0]
 8007dee:	602b      	str	r3, [r5, #0]
 8007df0:	d032      	beq.n	8007e58 <__sflush_r+0x94>
 8007df2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	075a      	lsls	r2, r3, #29
 8007df8:	d505      	bpl.n	8007e06 <__sflush_r+0x42>
 8007dfa:	6863      	ldr	r3, [r4, #4]
 8007dfc:	1ac0      	subs	r0, r0, r3
 8007dfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e00:	b10b      	cbz	r3, 8007e06 <__sflush_r+0x42>
 8007e02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e04:	1ac0      	subs	r0, r0, r3
 8007e06:	2300      	movs	r3, #0
 8007e08:	4602      	mov	r2, r0
 8007e0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	6a21      	ldr	r1, [r4, #32]
 8007e10:	47b0      	blx	r6
 8007e12:	1c43      	adds	r3, r0, #1
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	d106      	bne.n	8007e26 <__sflush_r+0x62>
 8007e18:	6829      	ldr	r1, [r5, #0]
 8007e1a:	291d      	cmp	r1, #29
 8007e1c:	d82c      	bhi.n	8007e78 <__sflush_r+0xb4>
 8007e1e:	4a29      	ldr	r2, [pc, #164]	; (8007ec4 <__sflush_r+0x100>)
 8007e20:	40ca      	lsrs	r2, r1
 8007e22:	07d6      	lsls	r6, r2, #31
 8007e24:	d528      	bpl.n	8007e78 <__sflush_r+0xb4>
 8007e26:	2200      	movs	r2, #0
 8007e28:	6062      	str	r2, [r4, #4]
 8007e2a:	6922      	ldr	r2, [r4, #16]
 8007e2c:	04d9      	lsls	r1, r3, #19
 8007e2e:	6022      	str	r2, [r4, #0]
 8007e30:	d504      	bpl.n	8007e3c <__sflush_r+0x78>
 8007e32:	1c42      	adds	r2, r0, #1
 8007e34:	d101      	bne.n	8007e3a <__sflush_r+0x76>
 8007e36:	682b      	ldr	r3, [r5, #0]
 8007e38:	b903      	cbnz	r3, 8007e3c <__sflush_r+0x78>
 8007e3a:	6560      	str	r0, [r4, #84]	; 0x54
 8007e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e3e:	602f      	str	r7, [r5, #0]
 8007e40:	2900      	cmp	r1, #0
 8007e42:	d0cb      	beq.n	8007ddc <__sflush_r+0x18>
 8007e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e48:	4299      	cmp	r1, r3
 8007e4a:	d002      	beq.n	8007e52 <__sflush_r+0x8e>
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	f000 f909 	bl	8008064 <_free_r>
 8007e52:	2000      	movs	r0, #0
 8007e54:	6360      	str	r0, [r4, #52]	; 0x34
 8007e56:	e7c2      	b.n	8007dde <__sflush_r+0x1a>
 8007e58:	6a21      	ldr	r1, [r4, #32]
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	47b0      	blx	r6
 8007e60:	1c41      	adds	r1, r0, #1
 8007e62:	d1c7      	bne.n	8007df4 <__sflush_r+0x30>
 8007e64:	682b      	ldr	r3, [r5, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0c4      	beq.n	8007df4 <__sflush_r+0x30>
 8007e6a:	2b1d      	cmp	r3, #29
 8007e6c:	d001      	beq.n	8007e72 <__sflush_r+0xae>
 8007e6e:	2b16      	cmp	r3, #22
 8007e70:	d101      	bne.n	8007e76 <__sflush_r+0xb2>
 8007e72:	602f      	str	r7, [r5, #0]
 8007e74:	e7b2      	b.n	8007ddc <__sflush_r+0x18>
 8007e76:	89a3      	ldrh	r3, [r4, #12]
 8007e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e7c:	81a3      	strh	r3, [r4, #12]
 8007e7e:	e7ae      	b.n	8007dde <__sflush_r+0x1a>
 8007e80:	690f      	ldr	r7, [r1, #16]
 8007e82:	2f00      	cmp	r7, #0
 8007e84:	d0aa      	beq.n	8007ddc <__sflush_r+0x18>
 8007e86:	0793      	lsls	r3, r2, #30
 8007e88:	bf18      	it	ne
 8007e8a:	2300      	movne	r3, #0
 8007e8c:	680e      	ldr	r6, [r1, #0]
 8007e8e:	bf08      	it	eq
 8007e90:	694b      	ldreq	r3, [r1, #20]
 8007e92:	1bf6      	subs	r6, r6, r7
 8007e94:	600f      	str	r7, [r1, #0]
 8007e96:	608b      	str	r3, [r1, #8]
 8007e98:	2e00      	cmp	r6, #0
 8007e9a:	dd9f      	ble.n	8007ddc <__sflush_r+0x18>
 8007e9c:	4633      	mov	r3, r6
 8007e9e:	463a      	mov	r2, r7
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	6a21      	ldr	r1, [r4, #32]
 8007ea4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007ea8:	47e0      	blx	ip
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	dc06      	bgt.n	8007ebc <__sflush_r+0xf8>
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eb8:	81a3      	strh	r3, [r4, #12]
 8007eba:	e790      	b.n	8007dde <__sflush_r+0x1a>
 8007ebc:	4407      	add	r7, r0
 8007ebe:	1a36      	subs	r6, r6, r0
 8007ec0:	e7ea      	b.n	8007e98 <__sflush_r+0xd4>
 8007ec2:	bf00      	nop
 8007ec4:	20400001 	.word	0x20400001

08007ec8 <_fflush_r>:
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	690b      	ldr	r3, [r1, #16]
 8007ecc:	4605      	mov	r5, r0
 8007ece:	460c      	mov	r4, r1
 8007ed0:	b913      	cbnz	r3, 8007ed8 <_fflush_r+0x10>
 8007ed2:	2500      	movs	r5, #0
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	b118      	cbz	r0, 8007ee2 <_fflush_r+0x1a>
 8007eda:	6983      	ldr	r3, [r0, #24]
 8007edc:	b90b      	cbnz	r3, 8007ee2 <_fflush_r+0x1a>
 8007ede:	f7ff fa19 	bl	8007314 <__sinit>
 8007ee2:	4b14      	ldr	r3, [pc, #80]	; (8007f34 <_fflush_r+0x6c>)
 8007ee4:	429c      	cmp	r4, r3
 8007ee6:	d11b      	bne.n	8007f20 <_fflush_r+0x58>
 8007ee8:	686c      	ldr	r4, [r5, #4]
 8007eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0ef      	beq.n	8007ed2 <_fflush_r+0xa>
 8007ef2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ef4:	07d0      	lsls	r0, r2, #31
 8007ef6:	d404      	bmi.n	8007f02 <_fflush_r+0x3a>
 8007ef8:	0599      	lsls	r1, r3, #22
 8007efa:	d402      	bmi.n	8007f02 <_fflush_r+0x3a>
 8007efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007efe:	f7ff faa7 	bl	8007450 <__retarget_lock_acquire_recursive>
 8007f02:	4628      	mov	r0, r5
 8007f04:	4621      	mov	r1, r4
 8007f06:	f7ff ff5d 	bl	8007dc4 <__sflush_r>
 8007f0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	07da      	lsls	r2, r3, #31
 8007f10:	d4e0      	bmi.n	8007ed4 <_fflush_r+0xc>
 8007f12:	89a3      	ldrh	r3, [r4, #12]
 8007f14:	059b      	lsls	r3, r3, #22
 8007f16:	d4dd      	bmi.n	8007ed4 <_fflush_r+0xc>
 8007f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f1a:	f7ff fa9a 	bl	8007452 <__retarget_lock_release_recursive>
 8007f1e:	e7d9      	b.n	8007ed4 <_fflush_r+0xc>
 8007f20:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <_fflush_r+0x70>)
 8007f22:	429c      	cmp	r4, r3
 8007f24:	d101      	bne.n	8007f2a <_fflush_r+0x62>
 8007f26:	68ac      	ldr	r4, [r5, #8]
 8007f28:	e7df      	b.n	8007eea <_fflush_r+0x22>
 8007f2a:	4b04      	ldr	r3, [pc, #16]	; (8007f3c <_fflush_r+0x74>)
 8007f2c:	429c      	cmp	r4, r3
 8007f2e:	bf08      	it	eq
 8007f30:	68ec      	ldreq	r4, [r5, #12]
 8007f32:	e7da      	b.n	8007eea <_fflush_r+0x22>
 8007f34:	080089f8 	.word	0x080089f8
 8007f38:	08008a18 	.word	0x08008a18
 8007f3c:	080089d8 	.word	0x080089d8

08007f40 <_lseek_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4604      	mov	r4, r0
 8007f44:	4608      	mov	r0, r1
 8007f46:	4611      	mov	r1, r2
 8007f48:	2200      	movs	r2, #0
 8007f4a:	4d05      	ldr	r5, [pc, #20]	; (8007f60 <_lseek_r+0x20>)
 8007f4c:	602a      	str	r2, [r5, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f7fb f9bf 	bl	80032d2 <_lseek>
 8007f54:	1c43      	adds	r3, r0, #1
 8007f56:	d102      	bne.n	8007f5e <_lseek_r+0x1e>
 8007f58:	682b      	ldr	r3, [r5, #0]
 8007f5a:	b103      	cbz	r3, 8007f5e <_lseek_r+0x1e>
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}
 8007f60:	20000474 	.word	0x20000474

08007f64 <__swhatbuf_r>:
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	460e      	mov	r6, r1
 8007f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f6c:	4614      	mov	r4, r2
 8007f6e:	2900      	cmp	r1, #0
 8007f70:	461d      	mov	r5, r3
 8007f72:	b096      	sub	sp, #88	; 0x58
 8007f74:	da08      	bge.n	8007f88 <__swhatbuf_r+0x24>
 8007f76:	2200      	movs	r2, #0
 8007f78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f7c:	602a      	str	r2, [r5, #0]
 8007f7e:	061a      	lsls	r2, r3, #24
 8007f80:	d410      	bmi.n	8007fa4 <__swhatbuf_r+0x40>
 8007f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f86:	e00e      	b.n	8007fa6 <__swhatbuf_r+0x42>
 8007f88:	466a      	mov	r2, sp
 8007f8a:	f000 f8c5 	bl	8008118 <_fstat_r>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	dbf1      	blt.n	8007f76 <__swhatbuf_r+0x12>
 8007f92:	9a01      	ldr	r2, [sp, #4]
 8007f94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f9c:	425a      	negs	r2, r3
 8007f9e:	415a      	adcs	r2, r3
 8007fa0:	602a      	str	r2, [r5, #0]
 8007fa2:	e7ee      	b.n	8007f82 <__swhatbuf_r+0x1e>
 8007fa4:	2340      	movs	r3, #64	; 0x40
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	b016      	add	sp, #88	; 0x58
 8007fac:	bd70      	pop	{r4, r5, r6, pc}
	...

08007fb0 <__smakebuf_r>:
 8007fb0:	898b      	ldrh	r3, [r1, #12]
 8007fb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fb4:	079d      	lsls	r5, r3, #30
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	460c      	mov	r4, r1
 8007fba:	d507      	bpl.n	8007fcc <__smakebuf_r+0x1c>
 8007fbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	6123      	str	r3, [r4, #16]
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	6163      	str	r3, [r4, #20]
 8007fc8:	b002      	add	sp, #8
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	466a      	mov	r2, sp
 8007fce:	ab01      	add	r3, sp, #4
 8007fd0:	f7ff ffc8 	bl	8007f64 <__swhatbuf_r>
 8007fd4:	9900      	ldr	r1, [sp, #0]
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f7ff fa5b 	bl	8007494 <_malloc_r>
 8007fde:	b948      	cbnz	r0, 8007ff4 <__smakebuf_r+0x44>
 8007fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fe4:	059a      	lsls	r2, r3, #22
 8007fe6:	d4ef      	bmi.n	8007fc8 <__smakebuf_r+0x18>
 8007fe8:	f023 0303 	bic.w	r3, r3, #3
 8007fec:	f043 0302 	orr.w	r3, r3, #2
 8007ff0:	81a3      	strh	r3, [r4, #12]
 8007ff2:	e7e3      	b.n	8007fbc <__smakebuf_r+0xc>
 8007ff4:	4b0d      	ldr	r3, [pc, #52]	; (800802c <__smakebuf_r+0x7c>)
 8007ff6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	6020      	str	r0, [r4, #0]
 8007ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008000:	81a3      	strh	r3, [r4, #12]
 8008002:	9b00      	ldr	r3, [sp, #0]
 8008004:	6120      	str	r0, [r4, #16]
 8008006:	6163      	str	r3, [r4, #20]
 8008008:	9b01      	ldr	r3, [sp, #4]
 800800a:	b15b      	cbz	r3, 8008024 <__smakebuf_r+0x74>
 800800c:	4630      	mov	r0, r6
 800800e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008012:	f000 f893 	bl	800813c <_isatty_r>
 8008016:	b128      	cbz	r0, 8008024 <__smakebuf_r+0x74>
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	f023 0303 	bic.w	r3, r3, #3
 800801e:	f043 0301 	orr.w	r3, r3, #1
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	89a0      	ldrh	r0, [r4, #12]
 8008026:	4305      	orrs	r5, r0
 8008028:	81a5      	strh	r5, [r4, #12]
 800802a:	e7cd      	b.n	8007fc8 <__smakebuf_r+0x18>
 800802c:	080072ad 	.word	0x080072ad

08008030 <memchr>:
 8008030:	4603      	mov	r3, r0
 8008032:	b510      	push	{r4, lr}
 8008034:	b2c9      	uxtb	r1, r1
 8008036:	4402      	add	r2, r0
 8008038:	4293      	cmp	r3, r2
 800803a:	4618      	mov	r0, r3
 800803c:	d101      	bne.n	8008042 <memchr+0x12>
 800803e:	2000      	movs	r0, #0
 8008040:	e003      	b.n	800804a <memchr+0x1a>
 8008042:	7804      	ldrb	r4, [r0, #0]
 8008044:	3301      	adds	r3, #1
 8008046:	428c      	cmp	r4, r1
 8008048:	d1f6      	bne.n	8008038 <memchr+0x8>
 800804a:	bd10      	pop	{r4, pc}

0800804c <__malloc_lock>:
 800804c:	4801      	ldr	r0, [pc, #4]	; (8008054 <__malloc_lock+0x8>)
 800804e:	f7ff b9ff 	b.w	8007450 <__retarget_lock_acquire_recursive>
 8008052:	bf00      	nop
 8008054:	20000468 	.word	0x20000468

08008058 <__malloc_unlock>:
 8008058:	4801      	ldr	r0, [pc, #4]	; (8008060 <__malloc_unlock+0x8>)
 800805a:	f7ff b9fa 	b.w	8007452 <__retarget_lock_release_recursive>
 800805e:	bf00      	nop
 8008060:	20000468 	.word	0x20000468

08008064 <_free_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4605      	mov	r5, r0
 8008068:	2900      	cmp	r1, #0
 800806a:	d040      	beq.n	80080ee <_free_r+0x8a>
 800806c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008070:	1f0c      	subs	r4, r1, #4
 8008072:	2b00      	cmp	r3, #0
 8008074:	bfb8      	it	lt
 8008076:	18e4      	addlt	r4, r4, r3
 8008078:	f7ff ffe8 	bl	800804c <__malloc_lock>
 800807c:	4a1c      	ldr	r2, [pc, #112]	; (80080f0 <_free_r+0x8c>)
 800807e:	6813      	ldr	r3, [r2, #0]
 8008080:	b933      	cbnz	r3, 8008090 <_free_r+0x2c>
 8008082:	6063      	str	r3, [r4, #4]
 8008084:	6014      	str	r4, [r2, #0]
 8008086:	4628      	mov	r0, r5
 8008088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800808c:	f7ff bfe4 	b.w	8008058 <__malloc_unlock>
 8008090:	42a3      	cmp	r3, r4
 8008092:	d908      	bls.n	80080a6 <_free_r+0x42>
 8008094:	6820      	ldr	r0, [r4, #0]
 8008096:	1821      	adds	r1, r4, r0
 8008098:	428b      	cmp	r3, r1
 800809a:	bf01      	itttt	eq
 800809c:	6819      	ldreq	r1, [r3, #0]
 800809e:	685b      	ldreq	r3, [r3, #4]
 80080a0:	1809      	addeq	r1, r1, r0
 80080a2:	6021      	streq	r1, [r4, #0]
 80080a4:	e7ed      	b.n	8008082 <_free_r+0x1e>
 80080a6:	461a      	mov	r2, r3
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	b10b      	cbz	r3, 80080b0 <_free_r+0x4c>
 80080ac:	42a3      	cmp	r3, r4
 80080ae:	d9fa      	bls.n	80080a6 <_free_r+0x42>
 80080b0:	6811      	ldr	r1, [r2, #0]
 80080b2:	1850      	adds	r0, r2, r1
 80080b4:	42a0      	cmp	r0, r4
 80080b6:	d10b      	bne.n	80080d0 <_free_r+0x6c>
 80080b8:	6820      	ldr	r0, [r4, #0]
 80080ba:	4401      	add	r1, r0
 80080bc:	1850      	adds	r0, r2, r1
 80080be:	4283      	cmp	r3, r0
 80080c0:	6011      	str	r1, [r2, #0]
 80080c2:	d1e0      	bne.n	8008086 <_free_r+0x22>
 80080c4:	6818      	ldr	r0, [r3, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	4401      	add	r1, r0
 80080ca:	6011      	str	r1, [r2, #0]
 80080cc:	6053      	str	r3, [r2, #4]
 80080ce:	e7da      	b.n	8008086 <_free_r+0x22>
 80080d0:	d902      	bls.n	80080d8 <_free_r+0x74>
 80080d2:	230c      	movs	r3, #12
 80080d4:	602b      	str	r3, [r5, #0]
 80080d6:	e7d6      	b.n	8008086 <_free_r+0x22>
 80080d8:	6820      	ldr	r0, [r4, #0]
 80080da:	1821      	adds	r1, r4, r0
 80080dc:	428b      	cmp	r3, r1
 80080de:	bf01      	itttt	eq
 80080e0:	6819      	ldreq	r1, [r3, #0]
 80080e2:	685b      	ldreq	r3, [r3, #4]
 80080e4:	1809      	addeq	r1, r1, r0
 80080e6:	6021      	streq	r1, [r4, #0]
 80080e8:	6063      	str	r3, [r4, #4]
 80080ea:	6054      	str	r4, [r2, #4]
 80080ec:	e7cb      	b.n	8008086 <_free_r+0x22>
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	2000046c 	.word	0x2000046c

080080f4 <_read_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4604      	mov	r4, r0
 80080f8:	4608      	mov	r0, r1
 80080fa:	4611      	mov	r1, r2
 80080fc:	2200      	movs	r2, #0
 80080fe:	4d05      	ldr	r5, [pc, #20]	; (8008114 <_read_r+0x20>)
 8008100:	602a      	str	r2, [r5, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	f7fb f888 	bl	8003218 <_read>
 8008108:	1c43      	adds	r3, r0, #1
 800810a:	d102      	bne.n	8008112 <_read_r+0x1e>
 800810c:	682b      	ldr	r3, [r5, #0]
 800810e:	b103      	cbz	r3, 8008112 <_read_r+0x1e>
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	bd38      	pop	{r3, r4, r5, pc}
 8008114:	20000474 	.word	0x20000474

08008118 <_fstat_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	2300      	movs	r3, #0
 800811c:	4d06      	ldr	r5, [pc, #24]	; (8008138 <_fstat_r+0x20>)
 800811e:	4604      	mov	r4, r0
 8008120:	4608      	mov	r0, r1
 8008122:	4611      	mov	r1, r2
 8008124:	602b      	str	r3, [r5, #0]
 8008126:	f7fb f8bb 	bl	80032a0 <_fstat>
 800812a:	1c43      	adds	r3, r0, #1
 800812c:	d102      	bne.n	8008134 <_fstat_r+0x1c>
 800812e:	682b      	ldr	r3, [r5, #0]
 8008130:	b103      	cbz	r3, 8008134 <_fstat_r+0x1c>
 8008132:	6023      	str	r3, [r4, #0]
 8008134:	bd38      	pop	{r3, r4, r5, pc}
 8008136:	bf00      	nop
 8008138:	20000474 	.word	0x20000474

0800813c <_isatty_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	2300      	movs	r3, #0
 8008140:	4d05      	ldr	r5, [pc, #20]	; (8008158 <_isatty_r+0x1c>)
 8008142:	4604      	mov	r4, r0
 8008144:	4608      	mov	r0, r1
 8008146:	602b      	str	r3, [r5, #0]
 8008148:	f7fb f8b9 	bl	80032be <_isatty>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_isatty_r+0x1a>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_isatty_r+0x1a>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	20000474 	.word	0x20000474

0800815c <_init>:
 800815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815e:	bf00      	nop
 8008160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008162:	bc08      	pop	{r3}
 8008164:	469e      	mov	lr, r3
 8008166:	4770      	bx	lr

08008168 <_fini>:
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	bf00      	nop
 800816c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816e:	bc08      	pop	{r3}
 8008170:	469e      	mov	lr, r3
 8008172:	4770      	bx	lr
